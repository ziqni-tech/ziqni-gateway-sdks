openapi: 3.0.1
info:
  title: Ziqni Gateway Services
  version: 1.0.0
  description: These are the Gateway services to be used by customers.
  contact:
    name: Ziqni Support Team
    url: 'https://www.ziqni.com'
    email: support@ziqni.com
  license:
    name: Proprietary and confidential
servers:
  -
    url: 'https://gateway.ziqni.com'
    description: Gateway Endpoint
paths:
  '/api/v1/{spaceName}/competitions':
    summary: Perform operations on competitions
    description: ''
    get:
      tags:
        - competitions
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/idsAsQueryVariable'
        -
          $ref: '#/components/parameters/limit'
        -
          $ref: '#/components/parameters/skip'
        -
          $ref: '#/components/parameters/sortByFields'
        -
          $ref: '#/components/parameters/includeFields'
        -
          $ref: '#/components/parameters/lang'
        -
          $ref: '#/components/parameters/equalTo'
        -
          $ref: '#/components/parameters/doubleEqualTo'
        -
          $ref: '#/components/parameters/lessThanEqualTo'
        -
          $ref: '#/components/parameters/lessThanDoubleEqualTo'
        -
          $ref: '#/components/parameters/greaterThanEqualTo'
        -
          $ref: '#/components/parameters/greaterThanDoubleEqualTo'
        -
          $ref: '#/components/parameters/optionsActualEndDates'
        -
          $ref: '#/components/parameters/actualEndDates'
        -
          $ref: '#/components/parameters/productsProductRefId'
        -
          $ref: '#/components/parameters/productRefId'
        -
          $ref: '#/components/parameters/productMetadataKey'
        -
          $ref: '#/components/parameters/productsMetadataValue'
        -
          $ref: '#/components/parameters/optionsProductRefId'
        -
          $ref: '#/components/parameters/compStatusString'
        -
          $ref: '#/components/parameters/compStatusCode'
        -
          $ref: '#/components/parameters/optionsLimitEntrantsTo'
        -
          $ref: '#/components/parameters/limitEntrantsTo'
        -
          $ref: '#/components/parameters/optionsScheduledStartDates'
        -
          $ref: '#/components/parameters/scheduledStartDates'
        -
          $ref: '#/components/parameters/optionsScheduledEndDates'
        -
          $ref: '#/components/parameters/scheduledEndDates'
        -
          $ref: '#/components/parameters/optionsActualStartDates'
        -
          $ref: '#/components/parameters/actualStartDates'
      responses:
        '200':
          $ref: '#/components/responses/CompetitionResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect.
      security:
        -
          apiKey: []
      operationId: getCompetitions
      summary: Returns a list of competitions
      description: >-
        Returns a simplified list of available Competitions for ALL.


        The default behaviour of a response is that the competitions that are in Ready, Active or
        Finished state AND are eligible for ALL will be returned unless queried otherwise.


        To return eligibility for specific groups you need to send an endpoint for options
        limitEntrantsTo (the value of "search_word" is the member group or multiple groups that you
        are searching for that is eligible to participate). This filter will check eligibility against
        4 types of member group setup:

        1. should - if a member part of this group then a competition will be returned

        2. must - the competition with this group has to exist

        3. must-not - groups that can not participate

        4. ALL - by default if any competition is in ALL member group then it will be returned even if
        the filter is request for must, should or must-not


        The response is competitions that are eligible to ALL + limitEntrantsTo


        This assumes that competitions have first been created using the web console otherwise no data
        will be returned and the value of the "totalRecordsFound" variable in metadata will be 0.


        GET responses can be filtered out based on the competition parameters to narrow down the
        results.


        The denser the queryable URL the more precise the response will be.



        Sort by fields is limited to:

        * created (DateTime of the competition creation)

        * label (the label of the competition)

        * scheduled start and end DateTime

        * actual start and end DateTime

        * status code that indicates the status of the competition


        Example:


        ?_sortByFields=created


        ?_sortByFields=label


        ?_sortByFields=options.scheduledDates.start


        ?_sortByFields=options.scheduledDates.end


        ?_sortByFields=options.actualDates.start


        ?_sortByFields=options.actualDates.end


        ?_sortByFields=statusCode
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/competitions/{id}':
    summary: Perform operations on competitions
    description: ''
    get:
      tags:
        - competitions
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/idAsPathVariable'
        -
          $ref: '#/components/parameters/includeFields'
        -
          $ref: '#/components/parameters/lang'
        -
          $ref: '#/components/parameters/unitsOfMeasureKey'
      responses:
        '200':
          $ref: '#/components/responses/CompetitionByIdResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect.
      security:
        -
          apiKey: []
      operationId: getCompetitionById
      summary: Returns the competition by requested id
      description: >-
        Returns a competition with a list of all available contests and rewards for that competition.


        This assumes that a competition and contests have first been created using the web console.
        Otherwise, no data is returned.
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/contests':
    summary: Perform operations on contests
    description: ''
    get:
      tags:
        - contests
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/idsAsQueryVariable'
        -
          $ref: '#/components/parameters/limit'
        -
          $ref: '#/components/parameters/skip'
        -
          $ref: '#/components/parameters/sortByFields'
        -
          $ref: '#/components/parameters/includeFields'
        -
          $ref: '#/components/parameters/lang'
        -
          $ref: '#/components/parameters/equalTo'
        -
          $ref: '#/components/parameters/doubleEqualTo'
        -
          $ref: '#/components/parameters/lessThanEqualTo'
        -
          $ref: '#/components/parameters/lessThanDoubleEqualTo'
        -
          $ref: '#/components/parameters/greaterThanEqualTo'
        -
          $ref: '#/components/parameters/greaterThanDoubleEqualTo'
        -
          $ref: '#/components/parameters/unitsOfMeasureKey'
        -
          $ref: '#/components/parameters/compId'
        -
          $ref: '#/components/parameters/contNumber'
        -
          $ref: '#/components/parameters/contRound'
        -
          $ref: '#/components/parameters/contOptionsNumberOfEntMax'
        -
          $ref: '#/components/parameters/contOptionsNumberOfEntMin'
        -
          $ref: '#/components/parameters/contOptionsIsPublic'
        -
          $ref: '#/components/parameters/contOptionsAutoStart'
        -
          $ref: '#/components/parameters/contOptionsAutoStop'
        -
          $ref: '#/components/parameters/optionsActualEndDates'
        -
          $ref: '#/components/parameters/optionsScheduledStartDates'
        -
          $ref: '#/components/parameters/optionsScheduledEndDates'
        -
          $ref: '#/components/parameters/optionsActualStartDates'
        -
          $ref: '#/components/parameters/contOptRankStratScoresDesc'
        -
          $ref: '#/components/parameters/contOptRankStratTimeDesc'
        -
          $ref: '#/components/parameters/contOptRankStratScoreFirst'
        -
          $ref: '#/components/parameters/contOptRankStratIgnoreTime'
        -
          $ref: '#/components/parameters/contOptRankStratIgnoreScore'
        -
          $ref: '#/components/parameters/contOptScoringStratLimitUpdates'
        -
          $ref: '#/components/parameters/contOptScoringStratSumBestOf'
        -
          $ref: '#/components/parameters/contOptScoringStratLastUpdateTs'
        -
          $ref: '#/components/parameters/contOptScoringStratRecordTime'
        -
          $ref: '#/components/parameters/statregyTypeString'
        -
          $ref: '#/components/parameters/created'
      responses:
        '200':
          $ref: '#/components/responses/ContestResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect or request URL is incorrect.
      security:
        -
          apiKey: []
      operationId: getContests
      summary: Returns a list of contests
      description: >-
        Returns a simplified list of available Contests and rewards attached to it.


        * The response of a contest is different than the competitions. While competitions give a
        response of only Ready, Active and Finished competitions states the contest gives all the
        contests that are in cancelled state as well.


        This assumes that the competitions and contests have first been created using the web console
        otherwise no data will be returned and the value of the "totalRecordsFound" variable in
        metadata will be 0.


        GET responses can be filtered out based on the contests parameters to narrow down the results.
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/contests/{id}':
    summary: Perform operations on operations on a specific contest
    description: ''
    get:
      tags:
        - contests
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/idAsPathVariable'
        -
          $ref: '#/components/parameters/includeFields'
        -
          $ref: '#/components/parameters/lang'
        -
          $ref: '#/components/parameters/unitsOfMeasureKey'
      responses:
        '200':
          $ref: '#/components/responses/ContestByIdResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect.
      security:
        -
          apiKey: []
      operationId: getContestById
      summary: Returns the contest by requested id
      description: >-
        Returns a contest and rewards attached to it by request.


        This assumes that a competition and contests have first been created using the web console.
        Otherwise no data is returned.
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/contests/{id}/leaderboard':
    summary: Perform operations on competitions
    description: ''
    get:
      tags:
        - contests
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/idAsPathVariable'
        -
          $ref: '#/components/parameters/memberIdOrRefAsQueryVariable'
        -
          $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/LeaderboardResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect.
      security:
        -
          apiKey: []
      operationId: getLeaderboardByContestId
      summary: Returns the leaderboard for a by contest id
      description: >-
        Leaderboards, also referred to as score board, give you aggregates of rank and points by
        member.


        Leaderboards are calculated on a near real-time basis. The rate data is received by
        CompetitionLabs is directly proportional to the update of member positions on the leaderboard.


        GET responses can be queried based on generic query parameters (_limit, memberId) to filter
        results appropriately.
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/members/{id}':
    summary: Perform operations on operations on a specific member
    description: ''
    get:
      tags:
        - members
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/idAsPathVariable'
      responses:
        '200':
          $ref: '#/components/responses/MemberResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect or Member with requested id does not exist.
      security:
        -
          apiKey: []
      operationId: getMemberById
      summary: Returns the member by requested id
      description: Returns the information for a given Member id
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/members/{id}/messages':
    summary: Perform operations on operations on a specific member
    description: ''
    get:
      tags:
        - member-messages
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/idAsPathVariable'
        -
          $ref: '#/components/parameters/eventRefType'
        -
          $ref: '#/components/parameters/eventReferenceId'
        -
          $ref: '#/components/parameters/messageType'
        -
          $ref: '#/components/parameters/subject'
        -
          $ref: '#/components/parameters/prizeRewardEntityType'
        -
          $ref: '#/components/parameters/prizeRewardEntityId'
        -
          $ref: '#/components/parameters/prizeRewardRank'
        -
          $ref: '#/components/parameters/prizeRewardValue'
        -
          $ref: '#/components/parameters/prizeRewardType'
        -
          $ref: '#/components/parameters/prizeRewardDelay'
        -
          $ref: '#/components/parameters/prizeRewardMemAckReqd'
        -
          $ref: '#/components/parameters/prizeRewardMetadataKey'
        -
          $ref: '#/components/parameters/prizeRewardMetadataValue'
        -
          $ref: '#/components/parameters/prizeRewardCreated'
        -
          $ref: '#/components/parameters/prizeRewardId'
        -
          $ref: '#/components/parameters/prizeClaimed'
        -
          $ref: '#/components/parameters/prizeEntityType'
        -
          $ref: '#/components/parameters/prizeEntityId'
        -
          $ref: '#/components/parameters/prizeCreated'
        -
          $ref: '#/components/parameters/prizeId'
        -
          $ref: '#/components/parameters/messageStatus'
        -
          $ref: '#/components/parameters/created'
        -
          $ref: '#/components/parameters/metadataKey'
        -
          $ref: '#/components/parameters/metadataValue'
        -
          $ref: '#/components/parameters/idsAsQueryVariable'
      responses:
        '200':
          $ref: '#/components/responses/MemberMessageResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect or Member with requested id does not exist.
      security:
        -
          apiKey: []
      operationId: getMessagesByMemberId
      summary: Returns messages for a member by requested id
      description: >-
        Returns a list of available messages for the specified memberId.


        GET responses can be filtered out based on the member messages parameters to narrow down the
        results.
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/members/{memberId}/messages/{id}':
    summary: Perform operations on operations on a specific member
    description: ''
    get:
      tags:
        - member-messages
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/memberIdAsPathVariable'
        -
          $ref: '#/components/parameters/idAsPathVariable'
      responses:
        '200':
          $ref: '#/components/responses/MemberMessageResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect or Member with requested id does not exist.
      security:
        -
          apiKey: []
      operationId: getMessageByIdAndMemberId
      summary: Returns messages for a member by requested id
      description: >-
        Returns member message details for the member and message ID specified. When a message with a
        status of New is accessed by this endpoint then the status of the message becomes Read
        automatically.
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/members/{memberId}/achievements':
    summary: Perform operations on operations on a specific member
    description: ''
    get:
      tags:
        - member-achievements
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/memberIdAsPathVariable'
        -
          $ref: '#/components/parameters/idsAsQueryVariable'
      responses:
        '200':
          $ref: '#/components/responses/MemberAchievementResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect or Member with requested id does not exist.
      security:
        -
          apiKey: []
      operationId: getAchievementsByMemberId
      summary: Returns achievements for a member
      description: >-
        Returns a progression list of achieved percentages based on the configured achievements rules
        for a specified member.
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/members/{memberId}/achievements/issued':
    summary: Perform operations on operations on a specific member
    description: ''
    get:
      tags:
        - member-achievements
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/memberIdAsPathVariable'
      responses:
        '200':
          $ref: '#/components/responses/AchievementIssuedResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
            $ref: '#/components/schemas/AchievementIssuedResponseBody'
      security:
        -
          apiKey: []
      operationId: getIssuedAchievementsByMemberId
      summary: Returns achievements issued for a member
      description: >-
        Returns an aggregated list of achieved achievement IDs for a specified member with a count
        that indicates the amount of times this achievement was issued for the specified memerId.


        If there is no achievement data inside the events stream for a specified user no data returned
        and the value of the "totalRecordsFound" variable in metadata is 0.


        `All the achievements, including deprecated/archived ones, that were issued to the member are
        displayed.`
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/members/{memberId}/achievements/{achievementId}':
    summary: Perform operations on operations on a specific member
    description: ''
    get:
      tags:
        - member-achievements
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/memberIdAsPathVariable'
        -
          $ref: '#/components/parameters/achievementIdAsPathVariable'
      responses:
        '200':
          $ref: '#/components/responses/MemberAchievementResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect or Member with requested id does not exist.
      security:
        -
          apiKey: []
      operationId: getAchievementByIdAndMemberId
      summary: Returns specific achievement for a member
      description: >+
        Returns a progression list of achieved percentages based on the configured achievements rules
        for a specified member.

      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/members/{memberId}/competitions':
    summary: Perform operations on competitions
    description: ''
    get:
      tags:
        - member-competitions
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/memberIdAsPathVariable'
        -
          $ref: '#/components/parameters/idsAsQueryVariable'
        -
          $ref: '#/components/parameters/limit'
        -
          $ref: '#/components/parameters/skip'
        -
          $ref: '#/components/parameters/sortByFields'
        -
          $ref: '#/components/parameters/includeFields'
        -
          $ref: '#/components/parameters/lang'
        -
          $ref: '#/components/parameters/equalTo'
        -
          $ref: '#/components/parameters/doubleEqualTo'
        -
          $ref: '#/components/parameters/lessThanEqualTo'
        -
          $ref: '#/components/parameters/lessThanDoubleEqualTo'
        -
          $ref: '#/components/parameters/greaterThanEqualTo'
        -
          $ref: '#/components/parameters/greaterThanDoubleEqualTo'
        -
          $ref: '#/components/parameters/optionsActualEndDates'
        -
          $ref: '#/components/parameters/actualEndDates'
        -
          $ref: '#/components/parameters/productsProductRefId'
        -
          $ref: '#/components/parameters/productRefId'
        -
          $ref: '#/components/parameters/productMetadataKey'
        -
          $ref: '#/components/parameters/productsMetadataValue'
        -
          $ref: '#/components/parameters/optionsProductRefId'
        -
          $ref: '#/components/parameters/compStatusString'
        -
          $ref: '#/components/parameters/compStatusCode'
        -
          $ref: '#/components/parameters/optionsLimitEntrantsTo'
        -
          $ref: '#/components/parameters/limitEntrantsTo'
        -
          $ref: '#/components/parameters/optionsScheduledStartDates'
        -
          $ref: '#/components/parameters/scheduledStartDates'
        -
          $ref: '#/components/parameters/optionsScheduledEndDates'
        -
          $ref: '#/components/parameters/scheduledEndDates'
        -
          $ref: '#/components/parameters/optionsActualStartDates'
        -
          $ref: '#/components/parameters/actualStartDates'
      responses:
        '200':
          $ref: '#/components/responses/MemberCompetitionResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect.
      security:
        -
          apiKey: []
      operationId: getMemberCompetitions
      summary: Returns a list of competitions for a specific member
      description: >-
        Returns a list of competitions that the member can participate in (filtering will be done
        automatically for member group eligibility).


        `The default behaviour of a response is that the competitions that are in Ready, Active or
        Finished state AND are eligible for ALL and eligible for the member Id requested will be
        returned unless queried otherwise.`


        This assumes that competitions have first been created using the web console otherwise no data
        will be returned and the value of the "totalRecordsFound" variable in metadata will be 0.


        GET responses can be filtered out based on the competition parameters to narrow down the
        results.


        The denser the queryable URL the more precise the response will be.



        Sort by fields is limited to:

        * created (DateTime of the competition creation)

        * label (the label of the competition)

        * scheduled start and end DateTime

        * actual start and end DateTime

        * status code that indicates the status of the competition


        Example:


        ?_sortByFields=created


        ?_sortByFields=label


        ?_sortByFields=options.scheduledDates.start


        ?_sortByFields=options.scheduledDates.end


        ?_sortByFields=options.actualDates.start


        ?_sortByFields=options.actualDates.end


        ?_sortByFields=statusCode
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/members/{memberId}/competitions/{competitionId}/optin':
    summary: Perform operations on competitions
    description: ''
    get:
      tags:
        - member-competitions
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/memberIdAsPathVariable'
        -
          $ref: '#/components/parameters/competitionIdAsPathVariable'
      responses:
        '200':
          $ref: '#/components/responses/MemberOptinResponseBody'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: >-
            Competition does not require opt in or Competition has finished or member has already
            opted in
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect or member with requested id not found.
      security:
        -
          apiKey: []
      operationId: optinMemberToCompetition
      summary: Opt in a member in a competition
      description: |-
        Allows a member to opt-in into an existing Competition using an existing Member Id.

        Use
        `/api/v1/:space/members/:memberId/competition/:competitionId/entrants`
        or
        `/api/v1/:space/members/reference/:memberRefId/competition/:competitionId/entrants`

        API endpoint to determine if a Member is already Opted in to a Competition.
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/members/{memberId}/competitions/{competitionId}/entrants':
    summary: Perform operations on operations on a specific member
    description: ''
    get:
      tags:
        - member-competitions
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/memberIdAsPathVariable'
        -
          $ref: '#/components/parameters/competitionIdAsPathVariable'
      responses:
        '200':
          $ref: '#/components/responses/MemberResponseBody'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Member has not opted in
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect or Member with requested id does not exist.
      security:
        -
          apiKey: []
      operationId: checkMemberOptinStatus
      summary: Returns details if the member has opted in
      description: Check if a member is opted into a Competition using a Member Id.
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/members/{memberId}/award/{awardId}':
    summary: Perform operations on operations on a specific member
    description: ''
    get:
      tags:
        - member-awards
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/memberIdAsPathVariable'
        -
          $ref: '#/components/parameters/awardIdAsPathVariable'
      responses:
        '200':
          $ref: '#/components/responses/MemberAwardByIdResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect or Member with requested id does not exist.
      security:
        -
          apiKey: []
      operationId: getAwardByIdAndMemberId
      summary: Returns specific award for a member
      description: |-
        Returns the an award for a given member ID

        You can retrieve an award id using GET Messages public API endpoint and querying the `prize`.

        EXAMPLE

        `GET /api/v1/:space/members/:memberId/messages?prize.memberId=:memberId`

        The response prize id is the awardId that is needed for the Request URL
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/members/{memberId}/award/{awardId}/award':
    summary: Perform operations on operations on a specific member
    description: ''
    get:
      tags:
        - member-awards
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/memberIdAsPathVariable'
        -
          $ref: '#/components/parameters/awardIdAsPathVariable'
      responses:
        '200':
          $ref: '#/components/responses/MemberAwardByIdResponseBody'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Award already claimed
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Award has expired
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: >-
            The X-API-KEY or space name is incorrect or Member with requested id does not exist or
            award does not exist.
      security:
        -
          apiKey: []
      operationId: claimAwardByIdAndMemberId
      summary: Claim a specific award for a member
      description: >
        Claims an Award for a given Member ID. This is only applicable when an award needs to be
        claimed.


        You can retrieve an award id using GET Messages public API endpoint and querying the `prize`.


        EXAMPLE


        `GET /api/v1/:space/members/:memberId/messages?prize.memberId=:memberId`


        The response prize id is the awardId that is needed for the Request URL
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/members/reference/{memberRefId}':
    summary: Perform operations on operations on a specific member
    description: ''
    get:
      tags:
        - members
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/memberRefIdAsPathVariable'
      responses:
        '200':
          $ref: '#/components/responses/MemberResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect or Member with requested id does not exist.
      security:
        -
          apiKey: []
      operationId: getMemberByRefId
      summary: Returns the member by requested id
      description: Returns the information for a given Member Reference ID
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/members/reference/{memberRefId}/messages/':
    summary: Perform operations on operations on a specific member
    description: ''
    get:
      tags:
        - member-messages
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/memberRefIdAsPathVariable'
        -
          $ref: '#/components/parameters/eventRefType'
        -
          $ref: '#/components/parameters/eventReferenceId'
        -
          $ref: '#/components/parameters/messageType'
        -
          $ref: '#/components/parameters/subject'
        -
          $ref: '#/components/parameters/prizeRewardEntityType'
        -
          $ref: '#/components/parameters/prizeRewardEntityId'
        -
          $ref: '#/components/parameters/prizeRewardRank'
        -
          $ref: '#/components/parameters/prizeRewardValue'
        -
          $ref: '#/components/parameters/prizeRewardType'
        -
          $ref: '#/components/parameters/prizeRewardDelay'
        -
          $ref: '#/components/parameters/prizeRewardMemAckReqd'
        -
          $ref: '#/components/parameters/prizeRewardMetadataKey'
        -
          $ref: '#/components/parameters/prizeRewardMetadataValue'
        -
          $ref: '#/components/parameters/prizeRewardCreated'
        -
          $ref: '#/components/parameters/prizeRewardId'
        -
          $ref: '#/components/parameters/prizeClaimed'
        -
          $ref: '#/components/parameters/prizeEntityType'
        -
          $ref: '#/components/parameters/prizeEntityId'
        -
          $ref: '#/components/parameters/prizeCreated'
        -
          $ref: '#/components/parameters/prizeId'
        -
          $ref: '#/components/parameters/messageStatus'
        -
          $ref: '#/components/parameters/created'
        -
          $ref: '#/components/parameters/metadataKey'
        -
          $ref: '#/components/parameters/metadataValue'
        -
          $ref: '#/components/parameters/idsAsQueryVariable'
      responses:
        '200':
          $ref: '#/components/responses/MemberMessageResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect or Member with requested id does not exist.
      security:
        -
          apiKey: []
      operationId: getMessagesByMemberRefId
      summary: Returns messages for a member by requested reference id
      description: >-
        Returns a list of available messages for the specified member Reference ID.


        GET responses can be filtered out based on the member messages parameters to narrow down the
        results.
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/members/reference/{memberRefId}/messages/{id}':
    summary: Perform operations on operations on a specific member
    description: ''
    get:
      tags:
        - member-messages
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/memberRefIdAsPathVariable'
        -
          $ref: '#/components/parameters/idAsPathVariable'
      responses:
        '200':
          $ref: '#/components/responses/MemberMessageResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect or Member with requested id does not exist.
      security:
        -
          apiKey: []
      operationId: getMessageByIdAndMemberRefId
      summary: Returns messages for a member by requested id
      description: >-
        Returns member message details for the member and message ID specified. When a message with a
        status of New is accessed by this endpoint then the status of the message becomes Read
        automatically.
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/members/reference/{memberRefId}/achievements':
    summary: Perform operations on operations on a specific member
    description: ''
    get:
      tags:
        - member-achievements
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/memberRefIdAsPathVariable'
        -
          $ref: '#/components/parameters/idsAsQueryVariable'
      responses:
        '200':
          $ref: '#/components/responses/MemberAchievementResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect or Member with requested id does not exist.
      security:
        -
          apiKey: []
      operationId: getAchievementsByMemberRefId
      summary: Returns achievements for a member
      description: >-
        Returns a progression list of achieved percentages based on the configured achievements rules
        for a specified member.
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/members/reference/{memberRefId}/achievements/issued':
    summary: Perform operations on operations on a specific member
    description: ''
    get:
      tags:
        - member-achievements
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/memberRefIdAsPathVariable'
      responses:
        '200':
          $ref: '#/components/responses/AchievementIssuedResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect or Member with requested id does not exist.
      security:
        -
          apiKey: []
      operationId: getIssuedAchievementsByMemberRefId
      summary: Returns achievements issued for a member
      description: >-
        Returns an aggregated list of achieved achievement IDs for a specified member with a count
        that indicates the amount of times this achievement was issued for the specified memerId.


        If there is no achievement data inside the events stream for a specified user no data returned
        and the value of the "totalRecordsFound" variable in metadata is 0.


        `All the achievements, including deprecated/archived ones, that were issued to the member are
        displayed.`
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/members/reference/{memberRefId}/achievements/{achievementId}':
    summary: Perform operations on operations on a specific member
    description: ''
    get:
      tags:
        - member-achievements
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/memberRefIdAsPathVariable'
        -
          $ref: '#/components/parameters/achievementIdAsPathVariable'
      responses:
        '200':
          $ref: '#/components/responses/MemberAchievementResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect or Member with requested id does not exist.
      security:
        -
          apiKey: []
      operationId: getAchievementByIdAndMemberRefId
      summary: Returns specific achievement for a member
      description: >+
        Returns a progression list of achieved percentages based on the configured achievements rules
        for a specified member.

      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/members/reference/{memberRefId}/competitions':
    summary: Perform operations on competitions
    description: ''
    get:
      tags:
        - member-competitions
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/memberRefIdAsPathVariable'
        -
          $ref: '#/components/parameters/idsAsQueryVariable'
        -
          $ref: '#/components/parameters/limit'
        -
          $ref: '#/components/parameters/skip'
        -
          $ref: '#/components/parameters/sortByFields'
        -
          $ref: '#/components/parameters/includeFields'
        -
          $ref: '#/components/parameters/lang'
        -
          $ref: '#/components/parameters/equalTo'
        -
          $ref: '#/components/parameters/doubleEqualTo'
        -
          $ref: '#/components/parameters/lessThanEqualTo'
        -
          $ref: '#/components/parameters/lessThanDoubleEqualTo'
        -
          $ref: '#/components/parameters/greaterThanEqualTo'
        -
          $ref: '#/components/parameters/greaterThanDoubleEqualTo'
        -
          $ref: '#/components/parameters/optionsActualEndDates'
        -
          $ref: '#/components/parameters/actualEndDates'
        -
          $ref: '#/components/parameters/productsProductRefId'
        -
          $ref: '#/components/parameters/productRefId'
        -
          $ref: '#/components/parameters/productMetadataKey'
        -
          $ref: '#/components/parameters/productsMetadataValue'
        -
          $ref: '#/components/parameters/optionsProductRefId'
        -
          $ref: '#/components/parameters/compStatusString'
        -
          $ref: '#/components/parameters/compStatusCode'
        -
          $ref: '#/components/parameters/optionsLimitEntrantsTo'
        -
          $ref: '#/components/parameters/limitEntrantsTo'
        -
          $ref: '#/components/parameters/optionsScheduledStartDates'
        -
          $ref: '#/components/parameters/scheduledStartDates'
        -
          $ref: '#/components/parameters/optionsScheduledEndDates'
        -
          $ref: '#/components/parameters/scheduledEndDates'
        -
          $ref: '#/components/parameters/optionsActualStartDates'
        -
          $ref: '#/components/parameters/actualStartDates'
      responses:
        '200':
          $ref: '#/components/responses/MemberCompetitionResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect.
      security:
        -
          apiKey: []
      operationId: getCompetitionsByMemberRefId
      summary: Returns a list of competitions for a specific member
      description: >-
        Returns a list of competitions that the member can participate in (filtering will be done
        automatically for member group eligibility).


        `The default behaviour of a response is that the competitions that are in Ready, Active or
        Finished state AND are eligible for ALL and eligible for the member Id requested will be
        returned unless queried otherwise.`


        This assumes that competitions have first been created using the web console otherwise no data
        will be returned and the value of the "totalRecordsFound" variable in metadata will be 0.


        GET responses can be filtered out based on the competition parameters to narrow down the
        results.


        The denser the queryable URL the more precise the response will be.



        Sort by fields is limited to:

        * created (DateTime of the competition creation)

        * label (the label of the competition)

        * scheduled start and end DateTime

        * actual start and end DateTime

        * status code that indicates the status of the competition


        Example:


        ?_sortByFields=created


        ?_sortByFields=label


        ?_sortByFields=options.scheduledDates.start


        ?_sortByFields=options.scheduledDates.end


        ?_sortByFields=options.actualDates.start


        ?_sortByFields=options.actualDates.end


        ?_sortByFields=statusCode
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/members/reference/{memberRefId}/competitions/{competitionId}/optin':
    summary: Perform operations on competitions
    description: ''
    get:
      tags:
        - member-competitions
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/memberRefIdAsPathVariable'
        -
          $ref: '#/components/parameters/competitionIdAsPathVariable'
      responses:
        '200':
          $ref: '#/components/responses/MemberOptinResponseBody'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: >-
            Competition does not require opt in or Competition has finished or member has already
            opted in
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect or member with requested id not found.
      security:
        -
          apiKey: []
      operationId: optinMemberToCompetitionByRefId
      summary: Opt in a member in a competition
      description: |-
        Allows a member to opt-in into an existing Competition using an existing Member Id.

        Use
        `/api/v1/:space/members/:memberId/competition/:competitionId/entrants`
        or
        `/api/v1/:space/members/reference/:memberRefId/competition/:competitionId/entrants`

        API endpoint to determine if a Member is already Opted in to a Competition.
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/members/reference/{memberRefId}/competitions/{competitionId}/entrants':
    summary: Perform operations on operations on a specific member
    description: ''
    get:
      tags:
        - member-competitions
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/memberRefIdAsPathVariable'
        -
          $ref: '#/components/parameters/competitionIdAsPathVariable'
      responses:
        '200':
          $ref: '#/components/responses/MemberResponseBody'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Member has not opted in
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect or Member with requested id does not exist.
      security:
        -
          apiKey: []
      operationId: checkMemberOptinStatusByRefId
      summary: Returns details if the member has opted in
      description: Check if a member is opted into a Competition using a Member Id.
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/members/reference/{memberRefId}/award/{awardId}':
    summary: Perform operations on operations on a specific member
    description: ''
    get:
      tags:
        - member-awards
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/memberRefIdAsPathVariable'
        -
          $ref: '#/components/parameters/awardIdAsPathVariable'
      responses:
        '200':
          $ref: '#/components/responses/MemberAwardByIdResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect or Member with requested id does not exist.
      security:
        -
          apiKey: []
      operationId: getAwardByIdAndMemberRefId
      summary: Returns specific award for a member
      description: |-
        Returns the an award for a given member ID

        You can retrieve an award id using GET Messages public API endpoint and querying the `prize`.

        EXAMPLE

        `GET /api/v1/:space/members/:memberId/messages?prize.memberId=:memberId`

        The response prize id is the awardId that is needed for the Request URL
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/members/reference/{memberRefId}/award/{awardId}/award':
    summary: Perform operations on operations on a specific member
    description: ''
    get:
      tags:
        - member-awards
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/memberRefIdAsPathVariable'
        -
          $ref: '#/components/parameters/awardIdAsPathVariable'
      responses:
        '200':
          $ref: '#/components/responses/MemberAwardByIdResponseBody'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Award already claimed
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Award has expired
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: >-
            The X-API-KEY or space name is incorrect or Member with requested id does not exist or
            award does not exist.
      security:
        -
          apiKey: []
      operationId: claimAwardByIdAndMemberRefId
      summary: Claim a specific award for a member
      description: >
        Claims an Award for a given Member ID. This is only applicable when an award needs to be
        claimed.


        You can retrieve an award id using GET Messages public API endpoint and querying the `prize`.


        EXAMPLE


        `GET /api/v1/:space/members/:memberId/messages?prize.memberId=:memberId`


        The response prize id is the awardId that is needed for the Request URL
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/achievements':
    summary: Perform operations on achievements
    description: ''
    get:
      tags:
        - achievements
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/idsAsQueryVariable'
        -
          $ref: '#/components/parameters/limit'
        -
          $ref: '#/components/parameters/skip'
        -
          $ref: '#/components/parameters/sortByFields'
        -
          $ref: '#/components/parameters/includeFields'
        -
          $ref: '#/components/parameters/lang'
        -
          $ref: '#/components/parameters/equalTo'
        -
          $ref: '#/components/parameters/doubleEqualTo'
        -
          $ref: '#/components/parameters/lessThanEqualTo'
        -
          $ref: '#/components/parameters/lessThanDoubleEqualTo'
        -
          $ref: '#/components/parameters/greaterThanEqualTo'
        -
          $ref: '#/components/parameters/greaterThanDoubleEqualTo'
        -
          $ref: '#/components/parameters/achDeprecated'
        -
          $ref: '#/components/parameters/achLiveStatus'
        -
          $ref: '#/components/parameters/achVisibleOrhidden'
      responses:
        '200':
          $ref: '#/components/responses/AchievementResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          $ref: '#/components/responses/AchievementResponseBody'
      security:
        -
          apiKey: []
      operationId: getAchievements
      summary: Returns a list of achievements
      description: >-
        Returns a simplified list of available Achievements.


        This assumes that achievements have first been created using the web console. Otherwise no
        data is returned and the value of the "totalRecordsFound" variable in the metadata section of
        the response is 0.


        GET responses can be filtered out based on the achievement parameters to narrow down the
        results.


        `Requesting a list of Achievements a response will show Achievements that are in Live state
        and/or Expired.`



        `Achievements that are in Draft state or Deprecated - will not be displayed.`



        Include query parameter options are:


        `?_include=ruleSets`

        `?_include=dependantOn`

        `?_include=products`

        `?_include=metadata`

        `?_include=rewards`


        or multiple at the same time:

        `?_include=products,metadata,ruleSets,dependantOn,rewards`
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/achievements/{id}':
    summary: Perform operations on achievements
    description: ''
    get:
      tags:
        - achievements
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/idAsPathVariable'
        -
          $ref: '#/components/parameters/includeFields'
        -
          $ref: '#/components/parameters/lang'
      responses:
        '200':
          $ref: '#/components/responses/AchievementByIdResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect.
      security:
        -
          apiKey: []
      operationId: getAchievementsById
      summary: Returns an achievement by id
      description: >-
        Returns public facing achievement information for the specified achievement identifier. The
        response object can be expanded depending on the query include parameter.
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/achievements/members/{memberId}':
    summary: Perform operations on achievements
    description: ''
    get:
      tags:
        - achievements
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/memberIdAsPathVariable'
        -
          $ref: '#/components/parameters/limit'
        -
          $ref: '#/components/parameters/skip'
        -
          $ref: '#/components/parameters/sortByFields'
        -
          $ref: '#/components/parameters/includeFields'
        -
          $ref: '#/components/parameters/lang'
        -
          $ref: '#/components/parameters/equalTo'
        -
          $ref: '#/components/parameters/doubleEqualTo'
        -
          $ref: '#/components/parameters/lessThanEqualTo'
        -
          $ref: '#/components/parameters/lessThanDoubleEqualTo'
        -
          $ref: '#/components/parameters/greaterThanEqualTo'
        -
          $ref: '#/components/parameters/greaterThanDoubleEqualTo'
        -
          $ref: '#/components/parameters/achDeprecated'
        -
          $ref: '#/components/parameters/achLiveStatus'
        -
          $ref: '#/components/parameters/achVisibleOrhidden'
      responses:
        '200':
          $ref: '#/components/responses/AchievementResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          $ref: '#/components/responses/AchievementResponseBody'
      security:
        -
          apiKey: []
      operationId: getMemberAchievements
      summary: Returns a list of achievements for a specific member
      description: >-
        Returns a simplified list of available Achievements.


        This assumes that achievements have first been created using the web console. Otherwise no
        data is returned and the value of the "totalRecordsFound" variable in the metadata section of
        the response is 0.


        GET responses can be filtered out based on the achievement parameters to narrow down the
        results.


        `Requesting a list of Achievements a response will show Achievements that are in Live state
        and/or Expired.`



        `Achievements that are in Draft state or Deprecated - will not be displayed.`



        Include query parameter options are:


        `?_include=ruleSets`

        `?_include=dependantOn`

        `?_include=products`

        `?_include=metadata`

        `?_include=rewards`


        or multiple at the same time:

        `?_include=products,metadata,ruleSets,dependantOn,rewards`
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/achievements/members/reference/{memberRefId}':
    summary: Perform operations on achievements
    description: ''
    get:
      tags:
        - achievements
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/memberRefIdAsPathVariable'
        -
          $ref: '#/components/parameters/limit'
        -
          $ref: '#/components/parameters/skip'
        -
          $ref: '#/components/parameters/sortByFields'
        -
          $ref: '#/components/parameters/includeFields'
        -
          $ref: '#/components/parameters/lang'
        -
          $ref: '#/components/parameters/equalTo'
        -
          $ref: '#/components/parameters/doubleEqualTo'
        -
          $ref: '#/components/parameters/lessThanEqualTo'
        -
          $ref: '#/components/parameters/lessThanDoubleEqualTo'
        -
          $ref: '#/components/parameters/greaterThanEqualTo'
        -
          $ref: '#/components/parameters/greaterThanDoubleEqualTo'
        -
          $ref: '#/components/parameters/achDeprecated'
        -
          $ref: '#/components/parameters/achLiveStatus'
        -
          $ref: '#/components/parameters/achVisibleOrhidden'
      responses:
        '200':
          $ref: '#/components/responses/AchievementResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          $ref: '#/components/responses/AchievementResponseBody'
      security:
        -
          apiKey: []
      operationId: getMemberAchievementsByRefId
      summary: Returns a list of achievements by member ref id
      description: >-
        Returns a simplified list of available Achievements.


        This assumes that achievements have first been created using the web console. Otherwise no
        data is returned and the value of the "totalRecordsFound" variable in the metadata section of
        the response is 0.


        GET responses can be filtered out based on the achievement parameters to narrow down the
        results.


        `Requesting a list of Achievements a response will show Achievements that are in Live state
        and/or Expired.`



        `Achievements that are in Draft state or Deprecated - will not be displayed.`



        Include query parameter options are:


        `?_include=ruleSets`

        `?_include=dependantOn`

        `?_include=products`

        `?_include=metadata`

        `?_include=rewards`


        or multiple at the same time:

        `?_include=products,metadata,ruleSets,dependantOn,rewards`
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/widget':
    summary: Perform operations on widgets
    description: ''
    get:
      tags:
        - widgets
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/idsAsQueryVariable'
        -
          $ref: '#/components/parameters/limit'
        -
          $ref: '#/components/parameters/skip'
        -
          $ref: '#/components/parameters/sortByFields'
        -
          $ref: '#/components/parameters/includeFields'
        -
          $ref: '#/components/parameters/lang'
        -
          $ref: '#/components/parameters/equalTo'
        -
          $ref: '#/components/parameters/doubleEqualTo'
        -
          $ref: '#/components/parameters/lessThanEqualTo'
        -
          $ref: '#/components/parameters/lessThanDoubleEqualTo'
        -
          $ref: '#/components/parameters/greaterThanEqualTo'
        -
          $ref: '#/components/parameters/greaterThanDoubleEqualTo'
      responses:
        '200':
          $ref: '#/components/responses/WidgetResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect.
      security:
        -
          apiKey: []
      operationId: getWidgets
      summary: Returns a list of widgets
      description: Returns the information for all the widgets.
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/widget/{id}':
    summary: Perform operations on widgets
    description: ''
    get:
      tags:
        - widgets
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/idAsPathVariable'
      responses:
        '200':
          $ref: '#/components/responses/WidgetByIdResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect.
      security:
        -
          apiKey: []
      operationId: getWidgetById
      summary: Returns a widget information for specific id
      description: Returns the information for a specific widget
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/widget/preview/{widgetId}':
    summary: Perform operations on widgets
    description: ''
    get:
      tags:
        - widgets
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/widgetIdAsPathVariable'
        -
          $ref: '#/components/parameters/limit'
        -
          $ref: '#/components/parameters/skip'
      responses:
        '200':
          $ref: '#/components/responses/AchievementResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          $ref: '#/components/responses/AchievementResponseBody'
      security:
        -
          apiKey: []
      operationId: getWidgetPreviewById
      summary: Returns the information of live achievements for a given Widget ID
      description: >-
        Returns the information of live achievements for a given Widget ID


        `Achievements that are in the widget but are deprecated/archived will not be shown in the
        response`
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/sse/{memberId}':
    summary: Subscribe to SSE channel
    description: ''
    get:
      tags:
        - sse
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/memberIdAsPathVariable'
      responses:
        '200':
          $ref: '#/components/responses/SseMemberMessageResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect.
      security:
        -
          apiKey: []
      operationId: subscribeSseChannelByMemberId
      summary: Subscribe to SSE channel
      description: Establishes an SSE channel for a specific member id.
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/sse/reference/{memberRefId}':
    summary: Subscribe to SSE channel
    description: ''
    get:
      tags:
        - sse
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/memberRefIdAsPathVariable'
      responses:
        '200':
          $ref: '#/components/responses/SseMemberMessageResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect.
      security:
        -
          apiKey: []
      operationId: subscribeSseChannelByMemberRefId
      summary: Subscribe to SSE channel
      description: Establishes an SSE channel for a specific member ref id.
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/sse/{memberId}/heartbeat':
    summary: Subscribe to SSE channel
    description: ''
    get:
      tags:
        - sse
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/memberIdAsPathVariable'
      responses:
        '200':
          $ref: '#/components/responses/SseMemberMessageResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect.
      security:
        -
          apiKey: []
      operationId: subscribeSseChannelHeartbeatByMemberId
      summary: Subscribe to SSE channel
      description: Establishes an SSE channel for a specific member id.
      x-codegen-request-body-name: body
  '/api/v1/{spaceName}/sse/reference/{memberRefId}/heartbeat':
    summary: Subscribe to SSE channel
    description: ''
    get:
      tags:
        - sse
      parameters:
        -
          $ref: '#/components/parameters/xApiKey'
        -
          $ref: '#/components/parameters/spaceName'
        -
          $ref: '#/components/parameters/memberRefIdAsPathVariable'
      responses:
        '200':
          $ref: '#/components/responses/SseMemberMessageResponseBody'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The X-API-KEY is missing
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: The X-API-KEY or space name is incorrect.
      security:
        -
          apiKey: []
      operationId: subscribeSseChannelHeartbeatByMemberRefId
      summary: Subscribe to SSE channel
      description: Establishes an SSE channel for a specific member id.
      x-codegen-request-body-name: body
components:
  schemas:
    ResponseMeta:
      description: 'Response metadata   '
      required:
        - totalRecordsFound
        - skip
        - limit
      type: object
      properties:
        totalRecordsFound:
          format: int32
          description: ''
          type: integer
        skip:
          format: int32
          description: ''
          type: integer
        limit:
          format: int32
          description: ''
          type: integer
        time:
          format: date-time
          description: ''
          type: string
      example: |-
        {
            "time": "2021-10-18T14:59:47.148Z"
            "totalRecordsFound": 73,
            "skip": 10,
            "limit": 25
        }
    ApiErrorResponse:
      description: ''
      type: object
      properties:
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        errors:
          -
            message: 'No account found for space name - [test]'
            code: 1007
            status: 404
    Error:
      description: ''
      required:
        - status
      type: object
      properties:
        message:
          description: ''
          type: string
        code:
          format: int32
          description: ''
          type: integer
        status:
          format: int32
          description: ''
          type: integer
      example:
        message: 'No account found for space name - [test]'
        code: 1007
        status: 404
    RewardType:
      description: ''
      type: object
      properties:
        jsonClass:
          description: ''
          type: string
        name:
          description: ''
          type: string
        key:
          description: ''
          type: string
        description:
          description: ''
          type: string
        accountId:
          description: ''
          type: string
        system:
          description: ''
          type: boolean
        unitOfMeasureType:
          description: ''
          type: string
        created:
          format: date-time
          description: ''
          type: string
        id:
          description: ''
          type: string
        metadata:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Metadata'
      example:
        jsonClass: RewardType
        name: Some Reward type
        key: my-first-reward-type
        description: My rirst reward type
        accountId: hVQ3P4cB9xnV8CJCr5_h
        system: false
        unitOfMeasureType: Other
        metadata: []
        created: '2021-08-03T11:52:56.691+0000'
        id: RcaBq345s6dVZdx7NFxa
    Metadata:
      description: ''
      type: object
      properties:
        key:
          description: ''
          type: string
        value:
          description: ''
          type: string
      example:
        key: my-first-key
        value: my-first-value
    Reward:
      description: ''
      type: object
      properties:
        jsonClass:
          description: ''
          type: string
        entityType:
          description: ''
          type: string
        entityId:
          description: ''
          type: string
        rewardRank:
          description: ''
          type: array
          items:
            format: int32
            type: integer
        rewardName:
          description: ''
          type: string
        value:
          format: double
          description: ''
          type: number
        rewardType:
          description: ''
          type: string
        description:
          description: ''
          type: string
        delay:
          format: int32
          description: ''
          type: integer
        memberAcknowledgmentRequired:
          description: ''
          type: boolean
        metadata:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Metadata'
        accountId:
          description: ''
          type: string
        period:
          format: int32
          description: ''
          type: integer
        created:
          format: date-time
          description: ''
          type: string
        id:
          description: ''
          type: string
        translations:
          description: ''
          type: string
        rewardTypeObject:
          $ref: '#/components/schemas/RewardType'
          description: ''
      example:
        jsonClass: Reward
        entityType: contest
        entityId: <contestId>
        rewardRank:
          - 1
        rewardName: My first reward
        value: 1
        rewardType: <rewardTypeId>
        description: My first reward description
        delay: 0
        memberAcknowledgmentRequired: false
        metadata: []
        accountId: <accountId>
        period: 0
        created: '2021-09-11T09:48:19.291+0000'
        id: <rewardId>
        translations: {}
        rewardTypeObject:
          jsonClass: RewardType
          name: My first reward type
          key: my-first-reward-type-key
          description: My first reward type
          accountId: <accountId>
          system: false
          unitOfMeasureType: Other
          metadata: []
          created: '2021-09-03T11:52:56.691+0000'
          id: <rewardTypeId>
    Contest:
      description: ''
      type: object
      properties:
        statusCode:
          format: int32
          description: ''
          type: integer
        number:
          format: int32
          description: ''
          type: integer
        actualStart:
          format: date-time
          description: ''
          type: string
        actualEnd:
          format: date-time
          description: ''
          type: string
        entransFromContest:
          description: ''
          type: array
          items:
            type: string
        description:
          description: ''
          type: string
        label:
          description: ''
          type: string
        jsonClass:
          description: ''
          type: string
        rewards:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Reward'
        scheduledStart:
          format: date-time
          description: ''
          type: string
        id:
          description: ''
          type: string
        termsConditions:
          description: ''
          type: string
        status:
          description: ''
          type: string
        scheduledEnd:
          format: date-time
          description: ''
          type: string
        round:
          format: int32
          description: ''
          type: integer
        competitionId:
          description: ''
          type: string
        roundType:
          description: ''
          type: string
      example:
        statusCode: 6
        number: 0
        actualStart: '2021-10-02T00:00:25.675+0000'
        actualEnd: '2021-10-02T00:58:25.724+0000'
        entrantsFromContest: []
        description: my first desc
        label: my first label
        jsonClass: Contest
        rewards:
          -
            jsonClass: Reward
            entityType: contest
            entityId: <contestId>
            rewardRank:
              - 3
            rewardName: my first reward name
            value: 3
            rewardType: <rewardTypeId>
            description: my first desc
            delay: 0
            memberAcknowledgmentRequired: false
            metadata: []
            accountId: <accountId>
            period: 0
            created: '2021-10-01T09:48:19.291+0000'
            id: <rewardId>
            translations: {}
            rewardTypeObject:
              jsonClass: RewardType
              name: my first reward type
              key: my-first-reward-type-key
              description: my first desc
              accountId: <accountId>
              system: false
              unitOfMeasureType: Other
              metadata: []
              created: '2021-09-03T11:52:56.691+0000'
              id: <rewardtypeId>
        scheduledStart: '2021-10-02T00:00:00.000+0000'
        id: <contestId>
        termsConditions: my first terms and conditions
        status: Finalised
        scheduledEnd: '2021-10-02T00:59:00.000+0000'
        round: 1
        competitionId: <competitionId>
        roundType: TimeBound
    ContestResponse:
      description: ''
      required: []
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/ResponseMeta'
          description: ''
        data:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Contest'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        meta:
          time: '2021-10-03T16:32:53.296Z'
          totalRecordsFound: 253
          skip: 0
          limit: 2
        data:
          -
            statusCode: 6
            number: 0
            actualStart: '2021-10-02T00:00:25.675+0000'
            actualEnd: '2021-10-02T00:58:25.724+0000'
            entrantsFromContest: []
            description: my first desc
            label: my first label
            jsonClass: Contest
            rewards:
              -
                jsonClass: Reward
                entityType: contest
                entityId: <contestId>
                rewardRank:
                  - 3
                rewardName: my first reward name
                value: 3
                rewardType: <rewardTypeId>
                description: my first desc
                delay: 0
                memberAcknowledgmentRequired: false
                metadata: []
                accountId: <accountId>
                period: 0
                created: '2021-10-01T09:48:19.291+0000'
                id: <rewardId>
                translations: {}
                rewardTypeObject:
                  jsonClass: RewardType
                  name: my first reward type
                  key: my-first-reward-type-key
                  description: my first desc
                  accountId: <accountId>
                  system: false
                  unitOfMeasureType: Other
                  metadata: []
                  created: '2021-09-03T11:52:56.691+0000'
                  id: <rewardtypeId>
            scheduledStart: '2021-10-02T00:00:00.000+0000'
            id: <contestId>
            termsConditions: my first terms and conditions
            status: Finalised
            scheduledEnd: '2021-10-02T00:59:00.000+0000'
            round: 1
            competitionId: <competitionId>
            roundType: TimeBound
          -
            statusCode: 6
            number: 0
            actualStart: '2021-10-02T00:00:25.675+0000'
            actualEnd: '2021-10-02T00:58:25.724+0000'
            entrantsFromContest: []
            description: my first desc
            label: my first label
            jsonClass: Contest
            rewards:
              -
                jsonClass: Reward
                entityType: contest
                entityId: <contestId>
                rewardRank:
                  - 3
                rewardName: my first reward name
                value: 3
                rewardType: <rewardTypeId>
                description: my first desc
                delay: 0
                memberAcknowledgmentRequired: false
                metadata: []
                accountId: <accountId>
                period: 0
                created: '2021-10-01T09:48:19.291+0000'
                id: <rewardId>
                translations: {}
                rewardTypeObject:
                  jsonClass: RewardType
                  name: my first reward type
                  key: my-first-reward-type-key
                  description: my first desc
                  accountId: <accountId>
                  system: false
                  unitOfMeasureType: Other
                  metadata: []
                  created: '2021-09-03T11:52:56.691+0000'
                  id: <rewardtypeId>
            scheduledStart: '2021-10-02T00:00:00.000+0000'
            id: <contestId>
            termsConditions: my first terms and conditions
            status: Finalised
            scheduledEnd: '2021-10-02T00:59:00.000+0000'
            round: 1
            competitionId: <competitionId>
            roundType: TimeBound
        errors:
          -
            message: 'No account found for space name - [test]'
            code: 1007
            status: 404
    ContestByIdResponse:
      description: ''
      required: []
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Contest'
          description: ''
        time:
          format: date-time
          description: ''
          type: string
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        data:
          statusCode: 6
          number: 0
          actualStart: '2021-10-02T00:00:25.675+0000'
          actualEnd: '2021-10-02T00:58:25.724+0000'
          entrantsFromContest: []
          description: my first desc
          label: my first label
          jsonClass: Contest
          rewards:
            -
              jsonClass: Reward
              entityType: contest
              entityId: <contestId>
              rewardRank:
                - 3
              rewardName: my first reward name
              value: 3
              rewardType: <rewardTypeId>
              description: my first desc
              delay: 0
              memberAcknowledgmentRequired: false
              metadata: []
              accountId: <accountId>
              period: 0
              created: '2021-10-01T09:48:19.291+0000'
              id: <rewardId>
              translations: {}
              rewardTypeObject:
                jsonClass: RewardType
                name: my first reward type
                key: my-first-reward-type-key
                description: my first desc
                accountId: <accountId>
                system: false
                unitOfMeasureType: Other
                metadata: []
                created: '2021-09-03T11:52:56.691+0000'
                id: <rewardtypeId>
          scheduledStart: '2021-10-02T00:00:00.000+0000'
          id: <contestId>
          termsConditions: my first terms and conditions
          status: Finalised
          scheduledEnd: '2021-10-02T00:59:00.000+0000'
          round: 1
          competitionId: <competitionId>
          roundType: TimeBound
        time: '2021-10-02T13:21:47.630Z'
        errors:
          -
            message: 'No account found for space name - [test]'
            code: 1007
            status: 404
    CompetitionByIdResponse:
      description: ''
      required: []
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Competition'
          description: ''
        time:
          format: date-time
          description: ''
          type: string
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        data:
          statusCode: 7
          numberOfRounds: 1
          description: my first desc
          optinRequired: true
          label: my first label
          actualStart: '2021-10-02T00:00:05.666+0000'
          actualEnd: '2021-10-02T00:59:45.781+0000'
          contests:
            -
              statusCode: 6
              number: 0
              actualStart: '2021-10-02T00:00:25.675+0000'
              actualEnd: '2021-10-02T00:58:25.724+0000'
              entrantsFromContest: []
              description: my first desc
              label: my first label
              jsonClass: Contest
              rewards:
                -
                  jsonClass: Reward
                  entityType: contest
                  entityId: <contestId>
                  rewardRank:
                    - 3
                  rewardName: my first reward name
                  value: 25
                  rewardType: <rewardTypeId>
                  description: my first desc
                  delay: 0
                  memberAcknowledgmentRequired: false
                  metadata: []
                  accountId: <accountId>
                  period: 0
                  created: '2021-10-01T09:48:19.291+0000'
                  id: <rewardId>
                  translations: {}
                  rewardTypeObject:
                    jsonClass: RewardType
                    name: my first reward type
                    key: my-first-reward-type-key
                    description: my first desc
                    accountId: <accountId>
                    system: false
                    unitOfMeasureType: Other
                    metadata: []
                    created: '2021-09-03T11:52:56.691+0000'
                    id: <rewardtypeId>
              scheduledStart: '2021-10-02T00:00:00.000+0000'
              id: <contestId>
              termsConditions: my first terms and conditions
              status: Finalised
              scheduledEnd: '2021-10-02T00:59:00.000+0000'
              round: 1
              competitionId: <competitionId>
              roundType: TimeBound
          scheduledStart: '2021-10-02T00:00:00.000+0000'
          id: <competitionId>
          termsConditions: my first terms and conditions
          status: Finished
          scheduledEnd: '2021-10-02T00:59:00.000+0000'
        time: '2021-10-02T13:21:47.630Z'
        errors:
          -
            message: 'No account found for space name - [test]'
            code: 1007
            status: 404
    CompetitionById:
      description: ''
      type: object
      allOf:
        -
          $ref: '#/components/schemas/Competition'
      properties:
        contests:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Contest'
      example:
        statusCode: 7
        numberOfRounds: 1
        description: my first desc
        optinRequired: true
        label: my first label
        actualStart: '2021-10-02T00:00:05.666+0000'
        actualEnd: '2021-10-02T00:59:45.781+0000'
        contests:
          -
            statusCode: 6
            number: 0
            actualStart: '2021-10-02T00:00:25.675+0000'
            actualEnd: '2021-10-02T00:58:25.724+0000'
            entrantsFromContest: []
            description: my first desc
            label: my first label
            jsonClass: Contest
            rewards:
              -
                jsonClass: Reward
                entityType: contest
                entityId: <contestId>
                rewardRank:
                  - 3
                rewardName: my first reward name
                value: 25
                rewardType: <rewardTypeId>
                description: my first desc
                delay: 0
                memberAcknowledgmentRequired: false
                metadata: []
                accountId: <accountId>
                period: 0
                created: '2021-10-01T09:48:19.291+0000'
                id: <rewardId>
                translations: {}
                rewardTypeObject:
                  jsonClass: RewardType
                  name: my first reward type
                  key: my-first-reward-type-key
                  description: my first desc
                  accountId: <accountId>
                  system: false
                  unitOfMeasureType: Other
                  metadata: []
                  created: '2021-09-03T11:52:56.691+0000'
                  id: <rewardtypeId>
            scheduledStart: '2021-10-02T00:00:00.000+0000'
            id: <contestId>
            termsConditions: my first terms and conditions
            status: Finalised
            scheduledEnd: '2021-10-02T00:59:00.000+0000'
            round: 1
            competitionId: <competitionId>
            roundType: TimeBound
        scheduledStart: '2021-10-02T00:00:00.000+0000'
        id: <competitionId>
        termsConditions: my first terms and conditions
        status: Finished
        scheduledEnd: '2021-10-02T00:59:00.000+0000'
    Competition:
      description: ''
      required: []
      type: object
      properties:
        statusCode:
          format: int32
          description: ''
          type: integer
        numberOfRounds:
          format: int32
          description: ''
          type: integer
        actualStart:
          format: date-time
          description: ''
          type: string
        actualEnd:
          format: date-time
          description: ''
          type: string
        description:
          description: ''
          type: string
        optinRequired:
          description: ''
          type: boolean
        label:
          description: ''
          type: string
        scheduledStart:
          format: date-time
          description: ''
          type: string
        scheduledEnd:
          format: date-time
          description: ''
          type: string
        id:
          description: ''
          type: string
        termsConditions:
          description: ''
          type: string
        status:
          description: ''
          type: string
      example:
        statusCode: 7
        actualStart: '2018-05-03T14:03:06.884+00:00'
        actualEnd: '2018-05-11T19:00:00.859+00:00'
        numberOfRounds: 1
        description: |-
          T&C:
          1. Lorem ipsum dolor sit amet
          2. consectetur adipiscing elit
          3. sed do eiusmod tempor incididunt ut labore et dolore magna aliqua
        optinRequired: false
        label: All For One And One For All!
        scheduledStart: '2018-05-03T16:00:00.000+00:00'
        id: dPJGJmNBo6YLmk6mqxcB
        termsConditions: ''
        status: Finished
        scheduledEnd: '2018-05-11T19:00:00.000+00:00'
    CompetitionResponse:
      description: ''
      required: []
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/ResponseMeta'
          description: ''
        data:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Competition'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        meta:
          time: '2021-10-18T14:59:47.148Z'
          totalRecordsFound: 73
          skip: 10
          limit: 2
        data:
          -
            statusCode: 7
            actualStart: '2018-05-03T14:03:06.884+00:00'
            actualEnd: '2018-05-11T19:00:00.859+00:00'
            numberOfRounds: 1
            description: |-
              T&C:
              1. Lorem ipsum dolor sit amet
              2. consectetur adipiscing elit
              3. sed do eiusmod tempor incididunt ut labore et dolore magna aliqua
            optinRequired: false
            label: All For One And One For All!
            scheduledStart: '2018-05-03T16:00:00.000+00:00'
            id: <competitionId>
            termsConditions: ''
            status: Finished
            scheduledEnd: '2018-05-11T19:00:00.000+00:00'
          -
            statusCode: 3
            actualStart: '2018-06-03T14:03:06.884+00:00'
            actualEnd: '2018-06-11T19:00:00.859+00:00'
            numberOfRounds: 1
            description: |-
              T&C:
              1. Lorem ipsum dolor sit amet
              2. consectetur adipiscing elit
              3. sed do eiusmod tempor incididunt ut labore et dolore magna aliqua
            optinRequired: false
            label: Fruits - All For One And One For All!
            scheduledStart: '2018-06-03T16:00:00.000+00:00'
            id: <competitionId>
            termsConditions: ''
            status: Ready
            scheduledEnd: '2018-06-11T19:00:00.000+00:00'
        errors:
          -
            message: 'No account found for space name - [test]'
            code: 1007
            status: 404
    Leaderboard:
      description: ''
      type: object
      properties:
        name:
          description: ''
          type: string
        rank:
          format: int32
          description: ''
          type: integer
        change:
          format: int32
          description: ''
          type: integer
        points:
          format: double
          description: ''
          type: number
        memberId:
          description: ''
          type: string
        memberRefId:
          description: ''
          type: string
      example:
        name: my first name
        rank: 2
        change: 0
        points: 1
        memberId: <member-id>
        memberRefId: my-first-member-ref
    LeaderboardResponse:
      description: ''
      required: []
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/ResponseMeta'
          description: ''
        data:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Leaderboard'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        meta:
          time: '2021-10-03T18:58:40.519Z'
          totalRecordsFound: 2
          skip: 0
          limit: 20
        data:
          -
            name: my first name
            rank: 1
            change: 0
            points: 10
            memberId: <member-id>
            memberRefId: my-first-member-ref-1
          -
            name: my first name
            rank: 2
            change: 0
            points: 1
            memberId: <member-id>
            memberRefId: my-first-member-ref-2
        errors:
          -
            message: 'No account found for space name - [test]'
            code: 1007
            status: 404
    Member:
      description: ''
      type: object
      properties:
        jsonClass:
          description: ''
          type: string
        accountId:
          description: ''
          type: string
        memberType:
          description: ''
          type: string
        name:
          description: ''
          type: string
        memberRefId:
          description: ''
          type: string
        groups:
          description: ''
          type: array
          items:
            type: string
        created:
          description: ''
          type: string
        id:
          description: ''
          type: string
      example:
        jsonClass: Member
        accountId: <account-id>
        memberType: Individual
        name: my first name
        memberRefId: my-first-member-ref-id
        groups:
          - group1
          - group2
        created: '2021-09-08T15:39:53.891+0000'
        id: <member-id>
    MemberResponse:
      description: '        '
      required: []
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/ResponseMeta'
          description: ''
        data:
          $ref: '#/components/schemas/Member'
          description: ''
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        meta:
          time: '2021-10-03T19:13:41.171Z'
        data:
          jsonClass: Member
          accountId: <account-id>
          memberType: Individual
          name: my first name
          memberRefId: my-first-member-ref-id
          groups:
            - group1
            - group2
          created: '2021-09-08T15:39:53.891+0000'
          id: <member-id>
        errors:
          -
            message: 'No account found for space name - [test]'
            code: 1007
            status: 404
    Award:
      description: ''
      type: object
      properties:
        accountId:
          description: ''
          type: string
        memberId:
          description: ''
          type: string
        reward:
          $ref: '#/components/schemas/Reward'
          description: ''
        claimed:
          description: ''
          type: boolean
        entityType:
          description: ''
          type: string
        entityId:
          description: ''
          type: string
        period:
          format: int32
          description: ''
          type: integer
        created:
          format: date-time
          description: ''
          type: string
        id:
          description: ''
          type: string
      example:
        accountId: <accountId>
        memberId: <memberId>
        reward:
          jsonClass: Reward
          entityType: contest
          entityId: <contestId>
          rewardRank:
            - 1
          rewardName: My first reward
          value: 1
          rewardType: <rewardTypeId>
          description: My first reward description
          delay: 0
          memberAcknowledgmentRequired: false
          metadata: []
          accountId: <accountId>
          period: 0
          created: '2021-09-11T09:48:19.291+0000'
          id: <rewardId>
          translations: {}
          rewardTypeObject:
            jsonClass: RewardType
            name: My first reward type
            key: my-first-reward-type-key
            description: My first reward type
            accountId: <accountId>
            system: false
            unitOfMeasureType: Other
            metadata: []
            created: '2021-09-03T11:52:56.691+0000'
            id: <rewardTypeId>
        claimed: true
        entityType: Contest
        entityId: <entityId>
        period: 0
        created: '2021-09-21T09:00:05.688+0000'
        id: <awardId>
    MemberMessage:
      description: ''
      type: object
      properties:
        jsonClass:
          description: ''
          type: string
        accountId:
          description: ''
          type: string
        memberId:
          description: ''
          type: string
        eventRefType:
          description: ''
          type: string
        eventReferenceId:
          description: ''
          type: string
        messageType:
          description: ''
          type: string
        subject:
          description: ''
          type: string
        body:
          description: ''
          type: string
        prize:
          $ref: '#/components/schemas/Award'
          description: ''
        status:
          description: ''
          type: string
        created:
          format: date-time
          description: ''
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
          description: ''
        id:
          description: ''
          type: string
      example:
        jsonClass: MemberMessage
        accountId: <accountId>
        memberId: <memberId>
        eventRefType: ContestType
        eventReferenceId: <eventRefId>
        messageType: Reward
        subject: my first subject
        body: my first message body
        prize:
          accountId: <accountId>
          memberId: <memberId>
          reward:
            jsonClass: Reward
            entityType: contest
            entityId: <contestId>
            rewardRank:
              - 1
            rewardName: My first reward
            value: 1
            rewardType: <rewardTypeId>
            description: My first reward description
            delay: 0
            memberAcknowledgmentRequired: false
            metadata: []
            accountId: <accountId>
            period: 0
            created: '2021-09-11T09:48:19.291+0000'
            id: <rewardId>
            translations: {}
            rewardTypeObject:
              jsonClass: RewardType
              name: My first reward type
              key: my-first-reward-type-key
              description: My first reward type
              accountId: <accountId>
              system: false
              unitOfMeasureType: Other
              metadata: []
              created: '2021-09-03T11:52:56.691+0000'
              id: <rewardTypeId>
          claimed: true
          entityType: Contest
          entityId: <entityId>
          period: 0
          created: '2021-09-21T09:00:05.688+0000'
          id: <awardId>
        status: New
        created: '2021-09-21T09:00:05.690+0000'
        metadata:
          -
            jsonClass: Metadata
            key: icon
            value: ''
        id: <messageId>
    MemberMessageResponse:
      description: '        '
      required: []
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/ResponseMeta'
          description: ''
        data:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/MemberMessage'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        meta:
          time: '2021-10-03T19:27:15.326Z'
          totalRecordsFound: 6
          skip: 0
          limit: 1
        data:
          -
            jsonClass: MemberMessage
            accountId: <accountId>
            memberId: <memberId>
            eventRefType: ContestType
            eventReferenceId: <eventRefId>
            messageType: Reward
            subject: my first subject
            body: my first message body
            prize:
              accountId: <accountId>
              memberId: <memberId>
              reward:
                jsonClass: Reward
                entityType: contest
                entityId: <contestId>
                rewardRank:
                  - 1
                rewardName: My first reward
                value: 1
                rewardType: <rewardTypeId>
                description: My first reward description
                delay: 0
                memberAcknowledgmentRequired: false
                metadata: []
                accountId: <accountId>
                period: 0
                created: '2021-09-11T09:48:19.291+0000'
                id: <rewardId>
                translations: {}
                rewardTypeObject:
                  jsonClass: RewardType
                  name: My first reward type
                  key: my-first-reward-type-key
                  description: My first reward type
                  accountId: <accountId>
                  system: false
                  unitOfMeasureType: Other
                  metadata: []
                  created: '2021-09-03T11:52:56.691+0000'
                  id: <rewardTypeId>
              claimed: true
              entityType: Contest
              entityId: <entityId>
              period: 0
              created: '2021-09-21T09:00:05.688+0000'
              id: <awardId>
            status: New
            created: '2021-09-21T09:00:05.690+0000'
            metadata:
              -
                jsonClass: Metadata
                key: icon
                value: ''
            id: <messageId>
        errors:
          -
            message: 'No account found for space name - [test]'
            code: 1007
            status: 404
    MemberAchievement:
      description: ''
      type: object
      properties:
        memberId:
          description: ''
          type: string
        achievementId:
          description: ''
          type: string
        goalPercentageComplete:
          format: double
          description: ''
          type: number
        issued:
          format: int32
          description: ''
          type: integer
      example:
        memberId: <memberId>
        achievementId: <achievementId>
        goalPercentageComplete: 68.55
        issued: 77
    MemberAchievementResponse:
      description: '        '
      required: []
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/ResponseMeta'
          description: ''
        data:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/MemberAchievement'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        meta:
          time: '2021-10-03T19:27:15.326Z'
          totalRecordsFound: 6
          skip: 0
          limit: 1
        data:
          -
            memberId: <memberId>
            achievementId: <achievementId>
            goalPercentageComplete: 68.55
            issued: 77
        errors:
          -
            message: 'No account found for space name - [test]'
            code: 1007
            status: 404
    AchievementIssuedCount:
      description: ''
      type: object
      properties:
        value:
          description: ''
          type: string
        count:
          format: int32
          description: ''
          type: integer
      example:
        value: <achievementId>
        count: 1
    AchievementAggregations:
      description: ''
      type: object
      properties:
        items:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/AchievementIssuedCount'
      example:
        items:
          -
            value: <achievementId>
            count: 76
          -
            value: <achievementId>
            count: 81
    AchievementIssuedResponse:
      description: '        '
      required: []
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/ResponseMeta'
          description: ''
        aggregations:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/AchievementAggregations'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        meta:
          time: '2021-10-18T14:59:47.148Z'
        aggregations:
          -
            items:
              -
                value: <achievementId>
                count: 23
              -
                value: <achievementId>
                count: 79
        errors:
          -
            message: 'No account found for space name - [test]'
            code: 1007
            status: 404
    MemberCompetitionResponse:
      description: ''
      required: []
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/ResponseMeta'
          description: ''
        data:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/MemberCompetition'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        meta:
          time: '2021-10-18T14:59:47.148Z'
          totalRecordsFound: 73
          skip: 10
          limit: 2
        data:
          -
            statusCode: 7
            actualStart: '2018-05-03T14:03:06.884+00:00'
            actualEnd: '2018-05-11T19:00:00.859+00:00'
            numberOfRounds: 1
            description: |-
              T&C:
              1. Lorem ipsum dolor sit amet
              2. consectetur adipiscing elit
              3. sed do eiusmod tempor incididunt ut labore et dolore magna aliqua
            optinRequired: false
            label: All For One And One For All!
            scheduledStart: '2018-05-03T16:00:00.000+00:00'
            id: <competitionId>
            termsConditions: ''
            status: Finished
            scheduledEnd: '2018-05-11T19:00:00.000+00:00'
            optin: false
          -
            statusCode: 3
            actualStart: '2018-06-03T14:03:06.884+00:00'
            actualEnd: '2018-06-11T19:00:00.859+00:00'
            numberOfRounds: 1
            description: |-
              T&C:
              1. Lorem ipsum dolor sit amet
              2. consectetur adipiscing elit
              3. sed do eiusmod tempor incididunt ut labore et dolore magna aliqua
            optinRequired: false
            label: Fruits - All For One And One For All!
            scheduledStart: '2018-06-03T16:00:00.000+00:00'
            id: <competitionId>
            termsConditions: ''
            status: Ready
            scheduledEnd: '2018-06-11T19:00:00.000+00:00'
            optin: false
        errors:
          -
            message: 'No account found for space name - [test]'
            code: 1007
            status: 404
    MemberCompetition:
      description: ''
      type: object
      allOf:
        -
          required: []
          type: object
          properties:
            optin:
              description: ''
              type: boolean
        -
          $ref: '#/components/schemas/Competition'
      example:
        statusCode: 7
        actualStart: '2018-05-03T14:03:06.884+00:00'
        actualEnd: '2018-05-11T19:00:00.859+00:00'
        numberOfRounds: 1
        description: |-
          T&C:
          1. Lorem ipsum dolor sit amet
          2. consectetur adipiscing elit
          3. sed do eiusmod tempor incididunt ut labore et dolore magna aliqua
        optinRequired: false
        label: All For One And One For All!
        scheduledStart: '2018-05-03T16:00:00.000+00:00'
        id: <competitionId>
        termsConditions: ''
        status: Finished
        scheduledEnd: '2018-05-11T19:00:00.000+00:00'
        optin: false
    MemberOptin:
      description: ''
      type: object
      properties:
        accountId:
          description: ''
          type: string
        memberId:
          description: ''
          type: string
        participationId:
          description: ''
          type: string
        value:
          format: double
          description: ''
          type: number
        bestScores:
          description: ''
          type: array
          items:
            format: double
            type: number
        timestamp:
          format: int64
          description: ''
          type: integer
        updateCount:
          format: int32
          description: ''
          type: integer
        markerTimeStamp:
          format: int64
          description: ''
          type: integer
        goalReached:
          description: ''
          type: boolean
        statusCode:
          format: int32
          description: ''
          type: integer
      example:
        accountId: <accountId>
        memberId: <memberId>
        participationId: <contestId>
        value: 0
        bestScores: []
        timestamp: 0
        updateCount: 0
        markerTimeStamp: 0
        goalReached: false
        statusCode: -1
    MemberOptinResponse:
      description: '        '
      required: []
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/ResponseMeta'
          description: ''
        data:
          $ref: '#/components/schemas/MemberOptin'
          description: ''
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        meta:
          time: '2021-10-03T19:13:41.171Z'
        data:
          accountId: <accountId>
          memberId: <memberId>
          participationId: <contestId>
          value: 0
          bestScores: []
          timestamp: 0
          updateCount: 0
          markerTimeStamp: 0
          goalReached: false
          statusCode: -1
        errors:
          -
            message: 'No account found for space name - [test]'
            code: 1007
            status: 404
    MemberAwardByIdResponse:
      description: ''
      required: []
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Award'
          description: ''
        time:
          format: date-time
          description: ''
          type: string
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        time: '2021-10-19T16:03:19.816Z'
        data:
          accountId: <accountId>
          memberId: <memberId>
          reward:
            jsonClass: Reward
            entityType: achievement
            entityId: <achievementId>
            rewardRank: ''
            rewardName: 30 spins on XYZ
            value: 30
            rewardType: <rewardTypeId>
            description: 30 spins on XYZ
            delay: 0
            memberAcknowledgmentRequired: false
            metadata: []
            accountId: <accountId>
            created: '2021-09-10T15:03:05.080+0000'
            id: <rewardId>
            translations: {}
          claimed: true
          entityType: Achievement
          entityId: <achievementId>
          created: '2021-09-10T15:08:31.300+0000'
          id: <awardId>
        errors:
          -
            message: 'No account found for space name - [test]'
            code: 1007
            status: 404
    Scheduling:
      description: ''
      type: object
      properties:
        scheduleType:
          description: ''
          type: string
        scheduleOccurrencesLimit:
          format: int32
          description: ''
          type: integer
        every:
          description: ''
          type: array
          items:
            type: string
        startDate:
          format: date-time
          description: ''
          type: string
        endDate:
          format: date-time
          description: ''
          type: string
        onlyAggregateOnActiveDays:
          description: ''
          type: boolean
      example:
        scheduleType: Once
        scheduleOccurrencesLimit: 1
        every: []
        startDate: '2021-09-15T00:01:00.000+0000'
        endDate: '2021-09-15T23:59:00.000+0000'
        onlyAggregateOnActiveDays: false
    SubRule:
      description: ''
      type: object
      properties:
        jsonClass:
          description: ''
          type: string
        fact:
          description: ''
          type: string
        operator:
          description: ''
          type: string
        constant:
          description: ''
          type: string
      example:
        jsonClass: SubRule
        fact: event.action.type
        operator: ==
        constant: bet
    SubConditionSet:
      description: ''
      type: object
      properties:
        jsonClass:
          description: ''
          type: string
        matchCondition:
          description: ''
          type: string
        mustEvaluateTo:
          description: ''
          type: boolean
        subRules:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/SubRule'
      example:
        jsonClass: SubConditionSet
        matchCondition: All
        mustEvaluateTo: true
        subRules:
          -
            jsonClass: SubRule
            fact: event.action.type
            operator: ==
            constant: bet
    DependantOn:
      description: ''
      type: object
      properties:
        must:
          description: ''
          type: string
    Achievement:
      description: ''
      type: object
      properties:
        name:
          description: ''
          type: string
        scheduling:
          $ref: '#/components/schemas/Scheduling'
          description: ''
        dependantOn:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/DependantOn'
        description:
          description: ''
          type: string
        icon:
          description: ''
          type: string
        rewards:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Reward'
        deprecated:
          description: ''
          type: boolean
        products:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Product'
        ruleSets:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/RuleSet'
        achievementLiveStatus:
          description: ''
          type: string
        initialState:
          format: int32
          description: ''
          type: integer
        id:
          description: ''
          type: string
        category:
          description: ''
          type: array
          items:
            type: string
        metadata:
          description: ''
          type: array
          items: {}
      example:
        name: my first achievement
        scheduling:
          scheduleType: Once
          scheduleOccurrencesLimit: 1
          every: []
          startDate: '2021-09-15T00:01:00.000+0000'
          endDate: '2021-09-15T23:59:00.000+0000'
          onlyAggregateOnActiveDays: false
        dependantOn: []
        description: my first description
        icon: <fileId>
        rewards:
          -
            jsonClass: Reward
            entityType: contest
            entityId: <contestId>
            rewardRank:
              - 1
            rewardName: My first reward
            value: 1
            rewardType: <rewardTypeId>
            description: My first reward description
            delay: 0
            memberAcknowledgmentRequired: false
            metadata: []
            accountId: <accountId>
            period: 0
            created: '2021-09-11T09:48:19.291+0000'
            id: <rewardId>
            translations: {}
            rewardTypeObject:
              jsonClass: RewardType
              name: My first reward type
              key: my-first-reward-type-key
              description: My first reward type
              accountId: <accountId>
              system: false
              unitOfMeasureType: Other
              metadata: []
              created: '2021-09-03T11:52:56.691+0000'
              id: <rewardTypeId>
        deprecated: false
        products: []
        ruleSets:
          -
            jsonClass: RuleSet
            priority: 1
            scope: achievement
            action: member.achievement
            conditions:
              -
                jsonClass: MainConditionSet
                matchCondition: All
                mustEvaluateTo: true
                rules:
                  -
                    jsonClass: MainRule
                    fact: sum.event.source.value
                    operator: '>='
                    constant: '20'
                    subConditions:
                      -
                        jsonClass: SubConditionSet
                        matchCondition: All
                        mustEvaluateTo: true
                        subRules:
                          -
                            jsonClass: SubRule
                            fact: event.action.type
                            operator: ==
                            constant: win
        achievementLiveStatus: Live
        initialState: 0
        id: <achievementId>
        category: []
        metadata: []
    Product:
      description: ''
      type: object
      properties:
        name:
          description: ''
          type: string
    MainConditionSet:
      description: ''
      type: object
      properties:
        jsonClass:
          description: ''
          type: string
        matchCondition:
          description: ''
          type: string
        mustEvaluateTo:
          description: ''
          type: boolean
        rules:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/MainRule'
      example:
        jsonClass: MainConditionSet
        matchCondition: All
        mustEvaluateTo: true
        rules:
          -
            jsonClass: MainRule
            fact: sum.event.source.value
            operator: '>='
            constant: '20'
            subConditions:
              -
                jsonClass: SubConditionSet
                matchCondition: All
                mustEvaluateTo: true
                subRules:
                  -
                    jsonClass: SubRule
                    fact: event.action.type
                    operator: ==
                    constant: win
    MainRule:
      description: ''
      type: object
      properties:
        jsonClass:
          description: ''
          type: string
        fact:
          description: ''
          type: string
        operator:
          description: ''
          type: string
        constant:
          description: ''
          type: string
        subConditions:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/SubConditionSet'
      example:
        jsonClass: MainRule
        fact: sum.event.source.value
        operator: '>='
        constant: '20'
        subConditions:
          -
            jsonClass: SubConditionSet
            matchCondition: All
            mustEvaluateTo: true
            subRules:
              -
                jsonClass: SubRule
                fact: event.action.type
                operator: ==
                constant: bet
    RuleSet:
      description: ''
      type: object
      properties:
        jsonClass:
          description: ''
          type: string
        priority:
          format: int32
          description: ''
          type: integer
        scope:
          description: ''
          type: boolean
        action:
          description: ''
          type: string
        conditions:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/MainConditionSet'
      example:
        jsonClass: RuleSet
        priority: 1
        scope: achievement
        action: member.achievement
        conditions:
          -
            jsonClass: MainConditionSet
            matchCondition: All
            mustEvaluateTo: true
            rules:
              -
                jsonClass: MainRule
                fact: sum.event.source.value
                operator: '>='
                constant: '20'
                subConditions:
                  -
                    jsonClass: SubConditionSet
                    matchCondition: All
                    mustEvaluateTo: true
                    subRules:
                      -
                        jsonClass: SubRule
                        fact: event.action.type
                        operator: ==
                        constant: win
    AchievementResponse:
      description: ''
      required: []
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/ResponseMeta'
          description: ''
        data:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Achievement'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        meta:
          time: '2021-10-03T16:32:53.296Z'
          totalRecordsFound: 253
          skip: 0
          limit: 1
        data:
          -
            name: my first achievement
            scheduling:
              scheduleType: Once
              scheduleOccurrencesLimit: 1
              every: []
              startDate: '2021-09-15T00:01:00.000+0000'
              endDate: '2021-09-15T23:59:00.000+0000'
              onlyAggregateOnActiveDays: false
            dependantOn: []
            description: my first description
            icon: <fileId>
            rewards:
              -
                jsonClass: Reward
                entityType: contest
                entityId: <contestId>
                rewardRank:
                  - 1
                rewardName: My first reward
                value: 1
                rewardType: <rewardTypeId>
                description: My first reward description
                delay: 0
                memberAcknowledgmentRequired: false
                metadata: []
                accountId: <accountId>
                period: 0
                created: '2021-09-11T09:48:19.291+0000'
                id: <rewardId>
                translations: {}
                rewardTypeObject:
                  jsonClass: RewardType
                  name: My first reward type
                  key: my-first-reward-type-key
                  description: My first reward type
                  accountId: <accountId>
                  system: false
                  unitOfMeasureType: Other
                  metadata: []
                  created: '2021-09-03T11:52:56.691+0000'
                  id: <rewardTypeId>
            deprecated: false
            products: []
            ruleSets:
              -
                jsonClass: RuleSet
                priority: 1
                scope: achievement
                action: member.achievement
                conditions:
                  -
                    jsonClass: MainConditionSet
                    matchCondition: All
                    mustEvaluateTo: true
                    rules:
                      -
                        jsonClass: MainRule
                        fact: sum.event.source.value
                        operator: '>='
                        constant: '20'
                        subConditions:
                          -
                            jsonClass: SubConditionSet
                            matchCondition: All
                            mustEvaluateTo: true
                            subRules:
                              -
                                jsonClass: SubRule
                                fact: event.action.type
                                operator: ==
                                constant: win
            achievementLiveStatus: Live
            initialState: 0
            id: <achievementId>
            category: []
            metadata: []
        errors:
          -
            message: 'No account found for space name - [test]'
            code: 1007
            status: 404
    AchievementByIdResponse:
      description: ''
      required: []
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Achievement'
          description: ''
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        data:
          name: my first achievement
          scheduling:
            scheduleType: Once
            scheduleOccurrencesLimit: 1
            every: []
            startDate: '2021-09-15T00:01:00.000+0000'
            endDate: '2021-09-15T23:59:00.000+0000'
            onlyAggregateOnActiveDays: false
          dependantOn: []
          description: my first description
          icon: <fileId>
          rewards:
            -
              jsonClass: Reward
              entityType: contest
              entityId: <contestId>
              rewardRank:
                - 1
              rewardName: My first reward
              value: 1
              rewardType: <rewardTypeId>
              description: My first reward description
              delay: 0
              memberAcknowledgmentRequired: false
              metadata: []
              accountId: <accountId>
              period: 0
              created: '2021-09-11T09:48:19.291+0000'
              id: <rewardId>
              translations: {}
              rewardTypeObject:
                jsonClass: RewardType
                name: My first reward type
                key: my-first-reward-type-key
                description: My first reward type
                accountId: <accountId>
                system: false
                unitOfMeasureType: Other
                metadata: []
                created: '2021-09-03T11:52:56.691+0000'
                id: <rewardTypeId>
          deprecated: false
          products: []
          ruleSets:
            -
              jsonClass: RuleSet
              priority: 1
              scope: achievement
              action: member.achievement
              conditions:
                -
                  jsonClass: MainConditionSet
                  matchCondition: All
                  mustEvaluateTo: true
                  rules:
                    -
                      jsonClass: MainRule
                      fact: sum.event.source.value
                      operator: '>='
                      constant: '20'
                      subConditions:
                        -
                          jsonClass: SubConditionSet
                          matchCondition: All
                          mustEvaluateTo: true
                          subRules:
                            -
                              jsonClass: SubRule
                              fact: event.action.type
                              operator: ==
                              constant: win
          achievementLiveStatus: Live
          initialState: 0
          id: <achievementId>
          category: []
          metadata: []
        errors:
          -
            message: 'No account found for space name - [test]'
            code: 1007
            status: 404
    Widget:
      description: ''
      type: object
      properties:
        jsonClass:
          description: ''
          type: string
        name:
          description: ''
          type: string
        description:
          description: ''
          type: string
        accountId:
          description: ''
          type: string
        referenceIdList:
          $ref: '#/components/schemas/WidgetReference'
          description: ''
        category:
          description: ''
          type: array
          items:
            type: string
        themeName:
          description: ''
          type: string
        widgetType:
          description: ''
          type: string
        includeDependencies:
          description: ''
          type: boolean
        deprecated:
          description: ''
          type: boolean
        created:
          format: date-time
          description: ''
          type: string
        id:
          description: ''
          type: string
      example:
        jsonClass: Widget
        name: Some name
        description: Some description
        accountId: <accountId>
        referenceIdList:
          -
            jsonClass: WidgetReference
            key: id
            value: widget-ref-id
            orderNumber: 2
        category: []
        themeName: default
        widgetType: Achievement
        includeDependencies: false
        deprecated: false
        created: '2020-08-11T08:54:29.287+0000'
        id: <widgetId>
    WidgetReference:
      description: ''
      type: object
      properties:
        jsonClass:
          description: ''
          type: string
        key:
          description: ''
          type: string
        value:
          description: ''
          type: string
        orderNumber:
          format: int32
          description: ''
          type: integer
      example:
        jsonClass: WidgetReference
        key: id
        value: widget-ref-id
        orderNumber: 2
    WidgetResponse:
      description: ''
      required: []
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/ResponseMeta'
          description: ''
        data:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Widget'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        meta:
          time: '2021-10-03T16:32:53.296Z'
          totalRecordsFound: 15
          skip: 0
          limit: 1
        data:
          -
            jsonClass: Widget
            name: Some name
            description: Some description
            accountId: <accountId>
            referenceIdList:
              -
                jsonClass: WidgetReference
                key: id
                value: widget-ref-id
                orderNumber: 2
            category: []
            themeName: default
            widgetType: Achievement
            includeDependencies: false
            deprecated: false
            created: '2020-08-11T08:54:29.287+0000'
            id: <widgetId>
        errors:
          -
            message: 'No account found for space name - [test]'
            code: 1007
            status: 404
    WidgetByIdResponse:
      description: ''
      required: []
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Widget'
          description: ''
        time:
          format: date-time
          description: ''
          type: string
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        time: '2021-10-02T13:21:47.630Z'
        data:
          -
            jsonClass: Widget
            name: Some name
            description: Some description
            accountId: <accountId>
            referenceIdList:
              -
                jsonClass: WidgetReference
                key: id
                value: widget-ref-id
                orderNumber: 2
            category: []
            themeName: default
            widgetType: Achievement
            includeDependencies: false
            deprecated: false
            created: '2020-08-11T08:54:29.287+0000'
            id: <widgetId>
        errors:
          -
            message: 'No account found for space name - [test]'
            code: 1007
            status: 404
    SseMemberMessage:
      description: ''
      type: object
      properties:
        nodeId:
          description: ''
          type: string
        accountId:
          description: ''
          type: string
        entityId:
          description: ''
          type: string
        messageType:
          description: ''
          type: string
        reason:
          description: ''
          type: string
        memberId:
          description: ''
          type: string
        parentEntityId:
          description: ''
          type: string
        subject:
          description: ''
          type: string
        rank:
          format: int32
          description: ''
          type: integer
  responses:
    CompetitionByIdResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CompetitionByIdResponse'
          examples:
            comp-resp-body:
              value:
                data:
                  statusCode: 7
                  numberOfRounds: 1
                  description: my first desc
                  optinRequired: true
                  label: my first label
                  actualStart: '2021-10-02T00:00:05.666+0000'
                  actualEnd: '2021-10-02T00:59:45.781+0000'
                  contests:
                    -
                      statusCode: 6
                      number: 0
                      actualStart: '2021-10-02T00:00:25.675+0000'
                      actualEnd: '2021-10-02T00:58:25.724+0000'
                      entrantsFromContest: []
                      description: my first desc
                      label: my first label
                      jsonClass: Contest
                      rewards:
                        -
                          jsonClass: Reward
                          entityType: contest
                          entityId: <contestId>
                          rewardRank:
                            - 3
                          rewardName: my first reward name
                          value: 25
                          rewardType: <rewardTypeId>
                          description: my first desc
                          delay: 0
                          memberAcknowledgmentRequired: false
                          metadata: []
                          accountId: <accountId>
                          period: 0
                          created: '2021-10-01T09:48:19.291+0000'
                          id: <rewardId>
                          translations: {}
                          rewardTypeObject:
                            jsonClass: RewardType
                            name: my first reward type
                            key: my-first-reward-type-key
                            description: my first desc
                            accountId: <accountId>
                            system: false
                            unitOfMeasureType: Other
                            metadata: []
                            created: '2021-09-03T11:52:56.691+0000'
                            id: <rewardtypeId>
                      scheduledStart: '2021-10-02T00:00:00.000+0000'
                      id: <contestId>
                      termsConditions: my first terms and conditions
                      status: Finalised
                      scheduledEnd: '2021-10-02T00:59:00.000+0000'
                      round: 1
                      competitionId: <competitionId>
                      roundType: TimeBound
                  scheduledStart: '2021-10-02T00:00:00.000+0000'
                  id: <competitionId>
                  termsConditions: my first terms and conditions
                  status: Finished
                  scheduledEnd: '2021-10-02T00:59:00.000+0000'
                time: '2021-10-02T13:21:47.630Z'
                errors:
                  -
                    message: 'No account found for space name - [test]'
                    code: 1007
                    status: 404
      description: List of competitions
    ContestByIdResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContestByIdResponse'
          examples:
            comp-resp-body:
              value:
                data:
                  statusCode: 6
                  number: 0
                  actualStart: '2021-10-02T00:00:25.675+0000'
                  actualEnd: '2021-10-02T00:58:25.724+0000'
                  entrantsFromContest: []
                  description: my first desc
                  label: my first label
                  jsonClass: Contest
                  rewards:
                    -
                      jsonClass: Reward
                      entityType: contest
                      entityId: <contestId>
                      rewardRank:
                        - 3
                      rewardName: my first reward name
                      value: 3
                      rewardType: <rewardTypeId>
                      description: my first desc
                      delay: 0
                      memberAcknowledgmentRequired: false
                      metadata: []
                      accountId: <accountId>
                      period: 0
                      created: '2021-10-01T09:48:19.291+0000'
                      id: <rewardId>
                      translations: {}
                      rewardTypeObject:
                        jsonClass: RewardType
                        name: my first reward type
                        key: my-first-reward-type-key
                        description: my first desc
                        accountId: <accountId>
                        system: false
                        unitOfMeasureType: Other
                        metadata: []
                        created: '2021-09-03T11:52:56.691+0000'
                        id: <rewardtypeId>
                  scheduledStart: '2021-10-02T00:00:00.000+0000'
                  id: <contestId>
                  termsConditions: my first terms and conditions
                  status: Finalised
                  scheduledEnd: '2021-10-02T00:59:00.000+0000'
                  round: 1
                  competitionId: <competitionId>
                  roundType: TimeBound
                time: '2021-10-02T13:21:47.630Z'
                errors:
                  -
                    message: 'No account found for space name - [test]'
                    code: 1007
                    status: 404
      description: List of competitions
    CompetitionResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CompetitionResponse'
          examples:
            comp-resp-body:
              value:
                meta:
                  totalRecordsFound: 2
                  skip: 0
                  limit: 20
                data:
                  -
                    statusCode: 7
                    actualStart: '2018-05-03T14:03:06.884+00:00'
                    actualEnd: '2018-05-11T19:00:00.859+00:00'
                    numberOfRounds: 1
                    description: >-
                      T&C:

                      1. Lorem ipsum dolor sit amet

                      2. consectetur adipiscing elit

                      3. sed do eiusmod tempor incididunt ut labore et dolore magna
                      aliqua
                    optinRequired: false
                    label: All For One And One For All!
                    scheduledStart: '2018-05-03T16:00:00.000+00:00'
                    id: <competitionId>
                    termsConditions: ''
                    status: Finished
                    scheduledEnd: '2018-05-11T19:00:00.000+00:00'
                  -
                    statusCode: 3
                    actualStart: '2018-06-03T14:03:06.884+00:00'
                    actualEnd: '2018-06-11T19:00:00.859+00:00'
                    numberOfRounds: 1
                    description: >-
                      T&C:

                      1. Lorem ipsum dolor sit amet

                      2. consectetur adipiscing elit

                      3. sed do eiusmod tempor incididunt ut labore et dolore magna
                      aliqua
                    optinRequired: false
                    label: Fruits - All For One And One For All!
                    scheduledStart: '2018-06-03T16:00:00.000+00:00'
                    id: <competitionId>
                    termsConditions: ''
                    status: Ready
                    scheduledEnd: '2018-06-11T19:00:00.000+00:00'
                errors:
                  -
                    message: 'No account found for space name - [test]'
                    code: 1007
                    status: 404
      description: List of competitions
    AchievementIssuedResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AchievementIssuedResponse'
          examples:
            resp-body:
              value:
                meta:
                  time: '2021-10-18T14:59:47.148Z'
                aggregations:
                  -
                    items:
                      -
                        value: <achievementId>
                        count: 23
                      -
                        value: <achievementId>
                        count: 79
                errors:
                  -
                    message: 'No account found for space name - [test]'
                    code: 1007
                    status: 404
      description: ''
    AchievementResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AchievementResponse'
          examples:
            resp-body:
              value:
                meta:
                  time: '2021-10-03T16:32:53.296Z'
                  totalRecordsFound: 253
                  skip: 0
                  limit: 1
                data:
                  -
                    name: my first achievement
                    scheduling:
                      scheduleType: Once
                      scheduleOccurrencesLimit: 1
                      every: []
                      startDate: '2021-09-15T00:01:00.000+0000'
                      endDate: '2021-09-15T23:59:00.000+0000'
                      onlyAggregateOnActiveDays: false
                    dependantOn: []
                    description: my first description
                    icon: <fileId>
                    rewards:
                      -
                        jsonClass: Reward
                        entityType: contest
                        entityId: <contestId>
                        rewardRank:
                          - 1
                        rewardName: My first reward
                        value: 1
                        rewardType: <rewardTypeId>
                        description: My first reward description
                        delay: 0
                        memberAcknowledgmentRequired: false
                        metadata: []
                        accountId: <accountId>
                        period: 0
                        created: '2021-09-11T09:48:19.291+0000'
                        id: <rewardId>
                        translations: {}
                        rewardTypeObject:
                          jsonClass: RewardType
                          name: My first reward type
                          key: my-first-reward-type-key
                          description: My first reward type
                          accountId: <accountId>
                          system: false
                          unitOfMeasureType: Other
                          metadata: []
                          created: '2021-09-03T11:52:56.691+0000'
                          id: <rewardTypeId>
                    deprecated: false
                    products: []
                    ruleSets:
                      -
                        jsonClass: RuleSet
                        priority: 1
                        scope: achievement
                        action: member.achievement
                        conditions:
                          -
                            jsonClass: MainConditionSet
                            matchCondition: All
                            mustEvaluateTo: true
                            rules:
                              -
                                jsonClass: MainRule
                                fact: sum.event.source.value
                                operator: '>='
                                constant: '20'
                                subConditions:
                                  -
                                    jsonClass: SubConditionSet
                                    matchCondition: All
                                    mustEvaluateTo: true
                                    subRules:
                                      -
                                        jsonClass: SubRule
                                        fact: event.action.type
                                        operator: ==
                                        constant: win
                    achievementLiveStatus: Live
                    initialState: 0
                    id: <achievementId>
                    category: []
                    metadata: []
                errors:
                  -
                    message: 'No account found for space name - [test]'
                    code: 1007
                    status: 404
      description: ''
    AchievementByIdResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AchievementByIdResponse'
          examples:
            resp-body:
              value:
                data:
                  name: my first achievement
                  scheduling:
                    scheduleType: Once
                    scheduleOccurrencesLimit: 1
                    every: []
                    startDate: '2021-09-15T00:01:00.000+0000'
                    endDate: '2021-09-15T23:59:00.000+0000'
                    onlyAggregateOnActiveDays: false
                  dependantOn: []
                  description: my first description
                  icon: <fileId>
                  rewards:
                    -
                      jsonClass: Reward
                      entityType: contest
                      entityId: <contestId>
                      rewardRank:
                        - 1
                      rewardName: My first reward
                      value: 1
                      rewardType: <rewardTypeId>
                      description: My first reward description
                      delay: 0
                      memberAcknowledgmentRequired: false
                      metadata: []
                      accountId: <accountId>
                      period: 0
                      created: '2021-09-11T09:48:19.291+0000'
                      id: <rewardId>
                      translations: {}
                      rewardTypeObject:
                        jsonClass: RewardType
                        name: My first reward type
                        key: my-first-reward-type-key
                        description: My first reward type
                        accountId: <accountId>
                        system: false
                        unitOfMeasureType: Other
                        metadata: []
                        created: '2021-09-03T11:52:56.691+0000'
                        id: <rewardTypeId>
                  deprecated: false
                  products: []
                  ruleSets:
                    -
                      jsonClass: RuleSet
                      priority: 1
                      scope: achievement
                      action: member.achievement
                      conditions:
                        -
                          jsonClass: MainConditionSet
                          matchCondition: All
                          mustEvaluateTo: true
                          rules:
                            -
                              jsonClass: MainRule
                              fact: sum.event.source.value
                              operator: '>='
                              constant: '20'
                              subConditions:
                                -
                                  jsonClass: SubConditionSet
                                  matchCondition: All
                                  mustEvaluateTo: true
                                  subRules:
                                    -
                                      jsonClass: SubRule
                                      fact: event.action.type
                                      operator: ==
                                      constant: win
                  achievementLiveStatus: Live
                  initialState: 0
                  id: <achievementId>
                  category: []
                  metadata: []
                errors:
                  -
                    message: 'No account found for space name - [test]'
                    code: 1007
                    status: 404
      description: ''
    SseMemberMessageResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SseMemberMessage'
      description: List of competitions
    ContestResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContestResponse'
          examples:
            resp-body:
              value:
                meta:
                  time: '2021-10-03T16:32:53.296Z'
                  totalRecordsFound: 253
                  skip: 0
                  limit: 2
                data:
                  -
                    statusCode: 6
                    number: 0
                    actualStart: '2021-10-02T00:00:25.675+0000'
                    actualEnd: '2021-10-02T00:58:25.724+0000'
                    entrantsFromContest: []
                    description: my first desc
                    label: my first label
                    jsonClass: Contest
                    rewards:
                      -
                        jsonClass: Reward
                        entityType: contest
                        entityId: <contestId>
                        rewardRank:
                          - 3
                        rewardName: my first reward name
                        value: 3
                        rewardType: <rewardTypeId>
                        description: my first desc
                        delay: 0
                        memberAcknowledgmentRequired: false
                        metadata: []
                        accountId: <accountId>
                        period: 0
                        created: '2021-10-01T09:48:19.291+0000'
                        id: <rewardId>
                        translations: {}
                        rewardTypeObject:
                          jsonClass: RewardType
                          name: my first reward type
                          key: my-first-reward-type-key
                          description: my first desc
                          accountId: <accountId>
                          system: false
                          unitOfMeasureType: Other
                          metadata: []
                          created: '2021-09-03T11:52:56.691+0000'
                          id: <rewardtypeId>
                    scheduledStart: '2021-10-02T00:00:00.000+0000'
                    id: <contestId>
                    termsConditions: my first terms and conditions
                    status: Finalised
                    scheduledEnd: '2021-10-02T00:59:00.000+0000'
                    round: 1
                    competitionId: <competitionId>
                    roundType: TimeBound
                  -
                    statusCode: 6
                    number: 0
                    actualStart: '2021-10-02T00:00:25.675+0000'
                    actualEnd: '2021-10-02T00:58:25.724+0000'
                    entrantsFromContest: []
                    description: my first desc
                    label: my first label
                    jsonClass: Contest
                    rewards:
                      -
                        jsonClass: Reward
                        entityType: contest
                        entityId: <contestId>
                        rewardRank:
                          - 3
                        rewardName: my first reward name
                        value: 3
                        rewardType: <rewardTypeId>
                        description: my first desc
                        delay: 0
                        memberAcknowledgmentRequired: false
                        metadata: []
                        accountId: <accountId>
                        period: 0
                        created: '2021-10-01T09:48:19.291+0000'
                        id: <rewardId>
                        translations: {}
                        rewardTypeObject:
                          jsonClass: RewardType
                          name: my first reward type
                          key: my-first-reward-type-key
                          description: my first desc
                          accountId: <accountId>
                          system: false
                          unitOfMeasureType: Other
                          metadata: []
                          created: '2021-09-03T11:52:56.691+0000'
                          id: <rewardtypeId>
                    scheduledStart: '2021-10-02T00:00:00.000+0000'
                    id: <contestId>
                    termsConditions: my first terms and conditions
                    status: Finalised
                    scheduledEnd: '2021-10-02T00:59:00.000+0000'
                    round: 1
                    competitionId: <competitionId>
                    roundType: TimeBound
                errors:
                  -
                    message: 'No account found for space name - [test]'
                    code: 1007
                    status: 404
      description: List of contest
    LeaderboardResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LeaderboardResponse'
          examples:
            resp-body:
              value:
                meta:
                  time: '2021-10-03T16:32:53.296Z'
                  totalRecordsFound: 253
                  skip: 0
                  limit: 2
                data:
                  -
                    statusCode: 6
                    number: 0
                    actualStart: '2021-10-02T00:00:25.675+0000'
                    actualEnd: '2021-10-02T00:58:25.724+0000'
                    entrantsFromContest: []
                    description: my first desc
                    label: my first label
                    jsonClass: Contest
                    rewards:
                      -
                        jsonClass: Reward
                        entityType: contest
                        entityId: <contestId>
                        rewardRank:
                          - 3
                        rewardName: my first reward name
                        value: 3
                        rewardType: <rewardTypeId>
                        description: my first desc
                        delay: 0
                        memberAcknowledgmentRequired: false
                        metadata: []
                        accountId: <accountId>
                        period: 0
                        created: '2021-10-01T09:48:19.291+0000'
                        id: <rewardId>
                        translations: {}
                        rewardTypeObject:
                          jsonClass: RewardType
                          name: my first reward type
                          key: my-first-reward-type-key
                          description: my first desc
                          accountId: <accountId>
                          system: false
                          unitOfMeasureType: Other
                          metadata: []
                          created: '2021-09-03T11:52:56.691+0000'
                          id: <rewardtypeId>
                    scheduledStart: '2021-10-02T00:00:00.000+0000'
                    id: <contestId>
                    termsConditions: my first terms and conditions
                    status: Finalised
                    scheduledEnd: '2021-10-02T00:59:00.000+0000'
                    round: 1
                    competitionId: <competitionId>
                    roundType: TimeBound
                  -
                    statusCode: 6
                    number: 0
                    actualStart: '2021-10-02T00:00:25.675+0000'
                    actualEnd: '2021-10-02T00:58:25.724+0000'
                    entrantsFromContest: []
                    description: my first desc
                    label: my first label
                    jsonClass: Contest
                    rewards:
                      -
                        jsonClass: Reward
                        entityType: contest
                        entityId: <contestId>
                        rewardRank:
                          - 3
                        rewardName: my first reward name
                        value: 3
                        rewardType: <rewardTypeId>
                        description: my first desc
                        delay: 0
                        memberAcknowledgmentRequired: false
                        metadata: []
                        accountId: <accountId>
                        period: 0
                        created: '2021-10-01T09:48:19.291+0000'
                        id: <rewardId>
                        translations: {}
                        rewardTypeObject:
                          jsonClass: RewardType
                          name: my first reward type
                          key: my-first-reward-type-key
                          description: my first desc
                          accountId: <accountId>
                          system: false
                          unitOfMeasureType: Other
                          metadata: []
                          created: '2021-09-03T11:52:56.691+0000'
                          id: <rewardtypeId>
                    scheduledStart: '2021-10-02T00:00:00.000+0000'
                    id: <contestId>
                    termsConditions: my first terms and conditions
                    status: Finalised
                    scheduledEnd: '2021-10-02T00:59:00.000+0000'
                    round: 1
                    competitionId: <competitionId>
                    roundType: TimeBound
                errors:
                  -
                    message: 'No account found for space name - [test]'
                    code: 1007
                    status: 404
      description: Leaderboard entries
    MemberAchievementResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MemberAchievementResponse'
          examples:
            resp-body:
              value:
                meta:
                  time: '2021-10-03T19:27:15.326Z'
                  totalRecordsFound: 6
                  skip: 0
                  limit: 1
                data:
                  -
                    memberId: <memberId>
                    achievementId: <achievementId>
                    goalPercentageComplete: 68.55
                    issued: 77
                errors:
                  -
                    message: 'No account found for space name - [test]'
                    code: 1007
                    status: 404
      description: Member Achievements
    MemberAwardByIdResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MemberAwardByIdResponse'
          examples:
            comp-resp-body:
              value:
                time: '2021-10-19T16:03:19.816Z'
                data:
                  accountId: <accountId>
                  memberId: <memberId>
                  reward:
                    jsonClass: Reward
                    entityType: achievement
                    entityId: <achievementId>
                    rewardRank: ''
                    rewardName: 30 spins on XYZ
                    value: 30
                    rewardType: <rewardTypeId>
                    description: 30 spins on XYZ
                    delay: 0
                    memberAcknowledgmentRequired: false
                    metadata: []
                    accountId: <accountId>
                    created: '2021-09-10T15:03:05.080+0000'
                    id: <rewardId>
                    translations: {}
                  claimed: true
                  entityType: Achievement
                  entityId: <achievementId>
                  created: '2021-09-10T15:08:31.300+0000'
                  id: <awardId>
                errors:
                  -
                    message: 'No account found for space name - [test]'
                    code: 1007
                    status: 404
      description: Award by id
    MemberCompetitionResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MemberCompetitionResponse'
          examples:
            comp-resp-body:
              value:
                meta:
                  time: '2021-10-18T14:59:47.148Z'
                  totalRecordsFound: 73
                  skip: 10
                  limit: 2
                data:
                  -
                    statusCode: 7
                    actualStart: '2018-05-03T14:03:06.884+00:00'
                    actualEnd: '2018-05-11T19:00:00.859+00:00'
                    numberOfRounds: 1
                    description: >-
                      T&C:

                      1. Lorem ipsum dolor sit amet

                      2. consectetur adipiscing elit

                      3. sed do eiusmod tempor incididunt ut labore et dolore magna
                      aliqua
                    optinRequired: false
                    label: All For One And One For All!
                    scheduledStart: '2018-05-03T16:00:00.000+00:00'
                    id: <competitionId>
                    termsConditions: ''
                    status: Finished
                    scheduledEnd: '2018-05-11T19:00:00.000+00:00'
                    optin: false
                  -
                    statusCode: 3
                    actualStart: '2018-06-03T14:03:06.884+00:00'
                    actualEnd: '2018-06-11T19:00:00.859+00:00'
                    numberOfRounds: 1
                    description: >-
                      T&C:

                      1. Lorem ipsum dolor sit amet

                      2. consectetur adipiscing elit

                      3. sed do eiusmod tempor incididunt ut labore et dolore magna
                      aliqua
                    optinRequired: false
                    label: Fruits - All For One And One For All!
                    scheduledStart: '2018-06-03T16:00:00.000+00:00'
                    id: <competitionId>
                    termsConditions: ''
                    status: Ready
                    scheduledEnd: '2018-06-11T19:00:00.000+00:00'
                    optin: false
                errors:
                  -
                    message: 'No account found for space name - [test]'
                    code: 1007
                    status: 404
      description: List of competitions for a member
    MemberMessageResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MemberMessageResponse'
          examples:
            resp-body:
              value:
                meta:
                  time: '2021-10-03T19:27:15.326Z'
                  totalRecordsFound: 6
                  skip: 0
                  limit: 1
                data:
                  -
                    jsonClass: MemberMessage
                    accountId: <accountId>
                    memberId: <memberId>
                    eventRefType: ContestType
                    eventReferenceId: <eventRefId>
                    messageType: Reward
                    subject: my first subject
                    body: my first message body
                    prize:
                      accountId: <accountId>
                      memberId: <memberId>
                      reward:
                        jsonClass: Reward
                        entityType: contest
                        entityId: <contestId>
                        rewardRank:
                          - 1
                        rewardName: My first reward
                        value: 1
                        rewardType: <rewardTypeId>
                        description: My first reward description
                        delay: 0
                        memberAcknowledgmentRequired: false
                        metadata: []
                        accountId: <accountId>
                        period: 0
                        created: '2021-09-11T09:48:19.291+0000'
                        id: <rewardId>
                        translations: {}
                        rewardTypeObject:
                          jsonClass: RewardType
                          name: My first reward type
                          key: my-first-reward-type-key
                          description: My first reward type
                          accountId: <accountId>
                          system: false
                          unitOfMeasureType: Other
                          metadata: []
                          created: '2021-09-03T11:52:56.691+0000'
                          id: <rewardTypeId>
                      claimed: true
                      entityType: Contest
                      entityId: <entityId>
                      period: 0
                      created: '2021-09-21T09:00:05.688+0000'
                      id: <awardId>
                    status: New
                    created: '2021-09-21T09:00:05.690+0000'
                    metadata:
                      -
                        jsonClass: Metadata
                        key: icon
                        value: ''
                    id: <messageId>
                errors:
                  -
                    message: 'No account found for space name - [test]'
                    code: 1007
                    status: 404
      description: Member message
    MemberOptinResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MemberOptinResponse'
          examples:
            resp-body:
              value:
                meta:
                  time: '2021-10-03T19:13:41.171Z'
                data:
                  accountId: <accountId>
                  memberId: <memberId>
                  participationId: <contestId>
                  value: 0
                  bestScores: []
                  timestamp: 0
                  updateCount: 0
                  markerTimeStamp: 0
                  goalReached: false
                  statusCode: -1
                errors:
                  -
                    message: 'No account found for space name - [test]'
                    code: 1007
                    status: 404
      description: Member optin response
    MemberResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MemberResponse'
          examples:
            resp-body:
              value:
                meta:
                  time: '2021-10-03T19:13:41.171Z'
                data:
                  jsonClass: Member
                  accountId: <account-id>
                  memberType: Individual
                  name: my first name
                  memberRefId: my-first-member-ref-id
                  groups:
                    - group1
                    - group2
                  created: '2021-09-08T15:39:53.891+0000'
                  id: <member-id>
                errors:
                  -
                    message: 'No account found for space name - [test]'
                    code: 1007
                    status: 404
      description: Member message response
    WidgetByIdResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WidgetByIdResponse'
          examples:
            resp-body:
              value:
                time: '2021-10-02T13:21:47.630Z'
                data:
                  -
                    jsonClass: Widget
                    name: Some name
                    description: Some description
                    accountId: <accountId>
                    referenceIdList:
                      -
                        jsonClass: WidgetReference
                        key: id
                        value: widget-ref-id
                        orderNumber: 2
                    category: []
                    themeName: default
                    widgetType: Achievement
                    includeDependencies: false
                    deprecated: false
                    created: '2020-08-11T08:54:29.287+0000'
                    id: <widgetId>
                errors:
                  -
                    message: 'No account found for space name - [test]'
                    code: 1007
                    status: 404
      description: Widgets response
    WidgetResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WidgetResponse'
          examples:
            resp-body:
              value:
                meta:
                  time: '2021-10-03T16:32:53.296Z'
                  totalRecordsFound: 15
                  skip: 0
                  limit: 1
                data:
                  -
                    jsonClass: Widget
                    name: Some name
                    description: Some description
                    accountId: <accountId>
                    referenceIdList:
                      -
                        jsonClass: WidgetReference
                        key: id
                        value: widget-ref-id
                        orderNumber: 2
                    category: []
                    themeName: default
                    widgetType: Achievement
                    includeDependencies: false
                    deprecated: false
                    created: '2020-08-11T08:54:29.287+0000'
                    id: <widgetId>
                errors:
                  -
                    message: 'No account found for space name - [test]'
                    code: 1007
                    status: 404
      description: Widget response
  parameters:
    xApiKey:
      name: X-API-KEY
      description: Your unique API key
      schema:
        type: string
      in: header
      required: true
    spaceName:
      examples:
        space-name:
          value: myFirstSpace
      name: spaceName
      description: This is the space name which is linked to the account
      schema:
        type: string
      in: path
      required: true
    idAsPathVariable:
      examples:
        id-as-path-var:
          value: geyhMXwBDhJLemKG3d8J
      name: id
      description: Unique identifier of the resource
      schema:
        type: string
      in: path
      required: true
    idsAsQueryVariable:
      examples:
        ids-as-query-var:
          value: 'geyhMXwBDhJLemKG3d8J, geYhMXwBDhJLemKG3d9J'
      name: id
      description: The unique identifiers of the resources
      schema:
        type: array
        items:
          type: string
      in: query
    limit:
      examples:
        limit-var:
          value: '5'
      name: _limit
      description: >-
        Used for pagination. Setting the limit value will cause the system to limit the number of
        records returned to the specified number.
      schema:
        type: integer
      in: query
    skip:
      examples:
        skip-var:
          value: '10'
      name: _skip
      description: >-
        Used for pagination. Setting the skip value will cause the system to return records from the
        specified position onwards.


        EXAMPLE below returns the results for requested resource without skipping any records


        <url>?_limit=5&_skip=0


        EXAMPLE below returns the results for requested resource after skipping the first 10 records


        `<url>?_limit=5&_skip=10`
      schema:
        type: integer
      in: query
    sortByFields:
      examples:
        sorting-var:
          value: 'transactionTimestamp:desc,created:asc'
      name: _sortByFields
      description: |-
        Enables sorting of results based on fields and order specified.

        Supported ordering

        `asc, desc`


        Usage syntax

        `_sortByFields=<field-to-sort-on>:<order>`


        EXAMPLE The query will return data sorted by transactionTimestamp in descending order

        `<url>?_sortByFields=transactionTimestamp:desc,created:asc`
      schema:
        type: string
      in: query
    includeFields:
      examples:
        get-products-only:
          value: products
        get-metadata-only:
          value: metadata
        get-products-and-metada-together:
          value: 'metadata,products'
      name: _include
      description: Allows you to add the products and metadata objects to the response. Case sensitive
      schema:
        type: string
      in: query
    lang:
      examples:
        language-key-spanish:
          value: es
        language-key-italian:
          value: it
      name: _lang
      description: >-
        Allows you to preview the label, description and terms and conditions of the competition in a
        requested language. Case sensitive
      schema:
        type: string
      in: query
    unitsOfMeasureKey:
      examples:
        exmp-1:
          value: usd
      name: _uomKey
      description: >-
        Adding a `?_uomKey` will give you the value of rewards converted to the specific Units Of
        Measure multiplier

        Case sensitive

        * The unit of measure type of currency provided has to be the same as the rewards. Otherwise,
        the value will remain the same.


        Usage syntax:


        `?_uomKey=search_word`
      schema:
        type: string
      in: query
    equalTo:
      name: =
      description: >-
        Single `=` sign usage will work as a `should/OR` action and `==` will work as a `must/AND`
        action


        Single equals sign usage has two types of applications in formulating API queries -

        * assigning values to predefined/reserved parameters like _skip, _limit, _lang, _sortByFields,
        _uomKey, _include

        * assigning values to model based parameters (Example name, transactionTimestamp,
        options.limitEntrantsTo etc.)


        EXAMPLE below returns all competitions in "Ready" or "Active" state that have either a group1
        or group2 entrant limitation


        `<url>/competitions?_skip=0&_limit=100&status=Ready,Active&options.limitEntrantsTo=group1,group2`
      schema:
        type: string
      in: query
    doubleEqualTo:
      name: ==
      description: >-
        Single `=` sign usage will work as a `should/OR` action and `==` will work as a `must/AND`
        action


        Single equals sign usage has two types of applications in formulating API queries -

        * assigning values to predefined/reserved parameters like _skip, _limit, _lang, _sortByFields,
        _uomKey, _include

        * assigning values to model based parameters (Example name, transactionTimestamp,
        options.limitEntrantsTo etc.)


        EXAMPLE below returns all competitions in "Ready" state only that have either a group1 or
        group2 entrant limitation


        `<url>/competitions?_skip=0&_limit=100&status==Ready&options.limitEntrantsTo=group1,group2`
      schema:
        type: string
      in: query
    lessThanEqualTo:
      examples:
        less-than-equal-var:
          value: 'transactionTimestamp<=2016-02-09T17:38:08.328'
      name: <=
      description: >-
        Single `=` sign usage will work as a `should/OR` action and `==` will work as a `must/AND`
        action


        The less than equal filter can be used on fields with a data type of integer, long, double,
        float, date, time or date-time. The filter will return all matching records that are equal to
        or less than the specified field value.


        EXAMPLE below returns all the data which was uploaded before 17:38 9th of February 2021
        (defaults to 20 results).


        `<url>events?transactionTimestamp<=2021-02-09T17:38:08.328`
      schema:
        type: string
      in: query
    lessThanDoubleEqualTo:
      name: <==
      description: >-
        Single `=` sign usage will work as a `should/OR` action and `==` will work as a `must/AND`
        action


        The less than equal filter can be used on fields with a data type of integer, long, double,
        float, date, time or date-time. The filter will return all matching records that are equal to
        or less than the specified field value.


        EXAMPLE below returns all the data which were uploaded before 17:38 9th of February 2021
        (defaults to 20 results).


        `<url>events?transactionTimestamp<==2021-02-09T17:38:08.328`
      schema:
        type: string
      in: query
    greaterThanEqualTo:
      name: =>
      description: >-
        Single `=` sign usage will work as a `should/OR` action and `==` will work as a `must/AND`
        action


        The greater than equal filter can be used on fields with a data type of integer, long, double,
        float, date, time or date-time. The filter will return all matching records that are equal to
        or greater than the specified field value.


        EXAMPLE below returns all the data which were uploaded after 17:38 9th of February 2021
        (defaults to 20 results).


        `<url>events?transactionTimestamp=>2021-02-09T17:38:08.328`
      schema:
        type: string
      in: query
    greaterThanDoubleEqualTo:
      name: ==>
      description: >-
        Single `=` sign usage will work as a `should/OR` action and `==` will work as a `must/AND`
        action


        The greater than equal filter can be used on fields with a data type of integer, long, double,
        float, date, time or date-time. The filter will return all matching records that are equal to
        or greater than the specified field value.


        EXAMPLE below returns all the data which were uploaded after 17:38 9th of February 2021
        (defaults to 20 results).


        `<url>events?transactionTimestamp==>2021-02-09T17:38:08.328`
      schema:
        type: string
      in: query
    hasNoValues:
      examples:
        skip-var:
          value: '_hasNoValuesFor=expiry:must'
      name: _hasNoValuesFor
      description: |-
        Enabled the usage of exists check agains fields Syntax =>

        `_hasNoValuesFor=<field-to-check>:<ternary-operator>`
        Acceptable Ternary Operators =>

        `must, should`
        EXAMPLE Returns all messages for a user that do not have an expiry field

        `<url>/messages?_hasNoValuesFor=expiry:must`
      schema:
        type: string
      in: query
    actualEndDates:
      examples:
        exmp-1:
          value: '"2021-10-01T00:00:00"'
      name: actualEnd
      description: |-
        Start and end time of when it actually ended

        Supported DateTime patterns -
        * String = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        * String = "yyyy-MM-dd'T'HH:mm:ss.SSS"
        * String = "yyyy-MM-dd'T'HH:mm:ssZ"
        * String = "yyyy-MM-dd'T'HH:mm:ss"
        * String = "yyyy-MM-dd'T'HH:mm"
        * String = "yyyy-MM-dd HH:mm:ss"
        * String = "yyyy-MM-dd HH:mm"
        * String = "yyyy/MM/dd HH:mm:ss"
        * String = "yyyy/MM/dd HH:mm"

        `?actualEnd=search_DateTime`
      schema:
        type: string
      in: query
    optionsActualEndDates:
      examples:
        exmp-1:
          value: '"2021-10-01T00:00:00"'
      name: options.actualDates.end
      description: |-
        Start and end time of when it actually ended

        Supported DateTime patterns -
        * String = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        * String = "yyyy-MM-dd'T'HH:mm:ss.SSS"
        * String = "yyyy-MM-dd'T'HH:mm:ssZ"
        * String = "yyyy-MM-dd'T'HH:mm:ss"
        * String = "yyyy-MM-dd'T'HH:mm"
        * String = "yyyy-MM-dd HH:mm:ss"
        * String = "yyyy-MM-dd HH:mm"
        * String = "yyyy/MM/dd HH:mm:ss"
        * String = "yyyy/MM/dd HH:mm"

        `?options.actualDates.end=search_DateTime`
      schema:
        type: string
      in: query
    memberIdAsPathVariable:
      example: adkjaflklafll
      name: memberId
      description: Id of a Member
      schema:
        type: string
      in: path
      required: true
    memberRefIdAsPathVariable:
      example: adkjaflklafll
      name: memberRefId
      description: Reference Id of a Member
      schema:
        type: string
      in: path
      required: true
    awardIdAsPathVariable:
      example: adkjaflklafll
      name: awardId
      description: Id of the award
      schema:
        type: string
      in: path
      required: true
    widgetIdAsPathVariable:
      example: adkjaflklafll
      name: widgetId
      description: Id of the widget
      schema:
        type: string
      in: path
      required: true
    competitionIdAsPathVariable:
      example: adkjaflklafll
      name: competitionId
      description: Id of a competition
      schema:
        type: string
      in: path
      required: true
    achievementIdAsPathVariable:
      example: adkjaflklafll
      name: achievementId
      description: Id of an achievement
      schema:
        type: string
      in: path
      required: true
    memberIdOrRefAsQueryVariable:
      example: adkjaflklafll
      name: memberId
      description: >-
        Member identifier. Can be a Member reference ID or a Ziqni Member ID


        `The response will show the members with a limit of how much you have inserted and it will
        include the member that you are searching in the leaderboard`


        `example - GET
        https://gateway.ziqni.com/api/v1/test_space/contests/TAHz-2wB9hDCDt3Z_ArD/leaderboard?_limit=100&memberId=tester-0sn4DmUBkPH_lz9GgxBM`


        `means that 101 members are shown in the list and the member with the id is included in the
        list as the last member`

        `?memberId=search_word`
      schema:
        type: string
      in: query
      required: true
    productsProductRefId:
      examples:
        product-ref-id:
          value: '"my-first-product"'
      name: products.productRefId
      description: |-
        Search by products reference Id and products metadata. Case sensitive.

        `?products.productRefId=search_word`
      schema:
        type: string
      in: query
    productRefId:
      examples:
        product-ref-id:
          value: '"my-first-product"'
      name: productRefId
      description: |-
        Search by products reference Id and products metadata. Case sensitive.

        `?productRefId=search_word`
      schema:
        type: string
      in: query
    productMetadataKey:
      examples:
        product-ref-id:
          value: '"my-first-meta-key"'
      name: options.products.metadata.key
      description: |-
        Search by products reference Id and products metadata. Case sensitive.

        `?options.products.metadata.key=search_word`
      schema:
        type: string
      in: query
    productsMetadataValue:
      examples:
        product-ref-id:
          value: '"my-first-meta-value"'
      name: options.products.metadata.value
      description: |-
        Search by products reference Id and products metadata. Case sensitive.

        `?options.products.metadata.value=search_word`
      schema:
        type: string
      in: query
    optionsProductRefId:
      examples:
        product-ref-id:
          value: '"my-first-product"'
      name: options.products.productRefId
      description: |-
        Search by products reference Id and products metadata. Case sensitive.

        `?options.products.productRefId=search_word`
      schema:
        type: string
      in: query
    compStatusCode:
      examples:
        status-code-active:
          value: '5'
        status-code-finished:
          value: '7'
      name: statusCode
      description: |
        The status code of the competition. Numbers only.

        Supported values:

        -3 (Unknown)

        -2 (Deleting)

        -1 (Deleted)

        0 (Draft)

        1 (Template)

        2 (Preparing)

        3 (Ready)

        4 (Starting)

        5 (Active)

        6 (Finishing)

        7 (Finished)

        8 (Cancelling)

        9 (Cancelled)
      schema:
        format: int32
        type: integer
      in: query
    compStatusString:
      examples:
        search-word-active:
          value: Active
        search-term-finished:
          value: Finished
      name: status
      description: >-
        The status of the competition. Case sensitive.

        Supported values -

        `Unknown` `Deleting` `Deleted` `Draft` `Template` `Preparing` `Ready` `Starting` `Active`
        `Finishing` `Finished` `Cancelling` `Cancelled`
      schema:
        type: string
      in: query
    optionsLimitEntrantsTo:
      examples:
        limit-entrans-to:
          value: '"GB"'
      name: options.limitEntrantsTo
      description: >-
        The value is the member group that you are searching for that is eligible to participate. Case
        sensitive.


        `?options.limitEntrantsTo=search_word`
      schema:
        type: array
        items:
          type: string
      in: query
    limitEntrantsTo:
      examples:
        product-ref-id:
          value: '"GB,SW"'
      name: limitEntrantsTo
      description: |-
        The value is the member group that you are searching for that is eligible to participate. Case
        sensitive.

        `?limitEntrantsTo=search_word`
      schema:
        type: array
        items:
          type: string
      in: query
    optionsScheduledStartDates:
      examples:
        exmp-1:
          value: '"2021-10-01T00:00:00"'
      name: options.scheduledDates.start
      description: |-
        Start and end time of when it was scheduled

        Supported DateTime patterns -
        * String = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        * String = "yyyy-MM-dd'T'HH:mm:ss.SSS"
        * String = "yyyy-MM-dd'T'HH:mm:ssZ"
        * String = "yyyy-MM-dd'T'HH:mm:ss"
        * String = "yyyy-MM-dd'T'HH:mm"
        * String = "yyyy-MM-dd HH:mm:ss"
        * String = "yyyy-MM-dd HH:mm"
        * String = "yyyy/MM/dd HH:mm:ss"
        * String = "yyyy/MM/dd HH:mm"

        `?options.scheduledDates.start=search_DateTime`
      schema:
        type: string
      in: query
    scheduledStartDates:
      examples:
        exmp-1:
          value: '"2021-10-01T00:00:00"'
      name: scheduledStart
      description: |-
        Start and end time of when it was scheduled

        Supported DateTime patterns -
        * String = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        * String = "yyyy-MM-dd'T'HH:mm:ss.SSS"
        * String = "yyyy-MM-dd'T'HH:mm:ssZ"
        * String = "yyyy-MM-dd'T'HH:mm:ss"
        * String = "yyyy-MM-dd'T'HH:mm"
        * String = "yyyy-MM-dd HH:mm:ss"
        * String = "yyyy-MM-dd HH:mm"
        * String = "yyyy/MM/dd HH:mm:ss"
        * String = "yyyy/MM/dd HH:mm"

        `?scheduledStart=search_DateTime`
      schema:
        type: string
      in: query
    optionsScheduledEndDates:
      examples:
        exmp-1:
          value: '"2021-10-01T00:00:00"'
      name: options.scheduledDates.end
      description: |-
        Start and end time of when it was scheduled

        Supported DateTime patterns -
        * String = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        * String = "yyyy-MM-dd'T'HH:mm:ss.SSS"
        * String = "yyyy-MM-dd'T'HH:mm:ssZ"
        * String = "yyyy-MM-dd'T'HH:mm:ss"
        * String = "yyyy-MM-dd'T'HH:mm"
        * String = "yyyy-MM-dd HH:mm:ss"
        * String = "yyyy-MM-dd HH:mm"
        * String = "yyyy/MM/dd HH:mm:ss"
        * String = "yyyy/MM/dd HH:mm"

        `?options.scheduledDates.end=search_DateTime`
      schema:
        type: string
      in: query
    scheduledEndDates:
      examples:
        exmp-1:
          value: '"2021-10-01T00:00:00"'
      name: scheduledEnd
      description: |-
        Start and end time of when it was scheduled

        Supported DateTime patterns -
        * String = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        * String = "yyyy-MM-dd'T'HH:mm:ss.SSS"
        * String = "yyyy-MM-dd'T'HH:mm:ssZ"
        * String = "yyyy-MM-dd'T'HH:mm:ss"
        * String = "yyyy-MM-dd'T'HH:mm"
        * String = "yyyy-MM-dd HH:mm:ss"
        * String = "yyyy-MM-dd HH:mm"
        * String = "yyyy/MM/dd HH:mm:ss"
        * String = "yyyy/MM/dd HH:mm"

        `?scheduledStart=search_DateTime`
      schema:
        type: string
      in: query
    optionsActualStartDates:
      examples:
        exmp-1:
          value: '"2021-10-01T00:00:00"'
      name: options.actualDates.start
      description: |-
        Start and end time of when it actually started

        Supported DateTime patterns -
        * String = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        * String = "yyyy-MM-dd'T'HH:mm:ss.SSS"
        * String = "yyyy-MM-dd'T'HH:mm:ssZ"
        * String = "yyyy-MM-dd'T'HH:mm:ss"
        * String = "yyyy-MM-dd'T'HH:mm"
        * String = "yyyy-MM-dd HH:mm:ss"
        * String = "yyyy-MM-dd HH:mm"
        * String = "yyyy/MM/dd HH:mm:ss"
        * String = "yyyy/MM/dd HH:mm"

        `?options.actualDates.start=search_DateTime`
      schema:
        type: string
      in: query
    actualStartDates:
      examples:
        exmp-1:
          value: '"2021-10-01T00:00:00"'
      name: actualStart
      description: |-
        Start and end time of when it actually started

        Supported DateTime patterns -
        * String = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        * String = "yyyy-MM-dd'T'HH:mm:ss.SSS"
        * String = "yyyy-MM-dd'T'HH:mm:ssZ"
        * String = "yyyy-MM-dd'T'HH:mm:ss"
        * String = "yyyy-MM-dd'T'HH:mm"
        * String = "yyyy-MM-dd HH:mm:ss"
        * String = "yyyy-MM-dd HH:mm"
        * String = "yyyy/MM/dd HH:mm:ss"
        * String = "yyyy/MM/dd HH:mm"

        `?actualStart=search_DateTime`
      schema:
        type: string
      in: query
    compId:
      examples:
        exmp-1:
          value: kjlakdfljadfljlajfiop
      name: competitionId
      description: |-
        Competition id to query.

        `?competitionId=<competition-id>`
      schema:
        type: array
        items:
          type: string
      in: query
    created:
      examples:
        exmp-1:
          value: '2018-08-23T14:23:09'
      name: created
      description: |-
        Works with simple dates or date and time, eg:


        `?created=<created-date>`
      schema:
        format: date-time
        type: string
      in: query
    contNumber:
      examples:
        exmp-1:
          value: '1'
      name: number
      description: |-
        Contest number to query

        `?number=<contest-number>`
      schema:
        format: int32
        type: integer
      in: query
    contRound:
      examples:
        exmp-1:
          value: '1'
      name: round
      description: |-
        Contest round

        `?round=<round-value>`
      schema:
        format: int32
        type: integer
      in: query
    contOptionsNumberOfEntMax:
      examples:
        exmp-1:
          value: '1000'
      name: options.numberOfEntrants.maximum
      description: |-
        Filter results by maximum number of entrants

        `?options.numberOfEntrants.maximum=search_number`
      schema:
        format: int32
        type: integer
      in: query
    contOptionsNumberOfEntMin:
      examples:
        exmp-1:
          value: '10'
      name: options.numberOfEntrants.minimum
      description: |-
        Filter results by minimum number of entrants

        `?options.numberOfEntrants.minimum=search_number`
      schema:
        format: int32
        type: integer
      in: query
    contOptionsIsPublic:
      examples:
        exmp-1:
          value: 'true'
      name: options.isPublic
      description: |-
        Whether the event is public or private

        `?options.isPublic=<search-boolean>`
      schema:
        type: boolean
      in: query
    contOptionsAutoStart:
      examples:
        exmp-1:
          value: 'true'
      name: options.autoStart
      description: |-
        Whether the event is enable for auto start or not

        `?options.autoStart=search_boolean`
      schema:
        type: boolean
      in: query
    contOptionsAutoStop:
      examples:
        exmp-1:
          value: 'true'
      name: options.autoStop
      description: |-
        Whether the event is enable for auto stop or not

        `?options.autoStop=search_boolean`
      schema:
        type: boolean
      in: query
    contOptRankStratScoresDesc:
      examples:
        exmp-1:
          value: 'true'
      name: options.strategies.rankingStrategy.scoreDesc
      description: |-
        Filter results by ranking strategies

        `?options.strategies.rankingStrategy.scoreDesc=search_boolean`
      schema:
        type: boolean
      in: query
    contOptRankStratTimeDesc:
      examples:
        exmp-1:
          value: 'true'
      name: options.strategies.rankingStrategy.timeDesc
      description: |-
        Filter results by ranking strategies

        `?options.strategies.rankingStrategy.scoreDesc=search_boolean`
      schema:
        type: boolean
      in: query
    contOptRankStratScoreFirst:
      examples:
        exmp-1:
          value: 'true'
      name: options.strategies.rankingStrategy.scoreFirst
      description: |-
        Filter results by ranking strategies

        `?options.strategies.rankingStrategy.scoreFirst=search_boolean`
      schema:
        type: boolean
      in: query
    contOptRankStratIgnoreTime:
      examples:
        exmp-1:
          value: 'true'
      name: options.strategies.rankingStrategy.ignoreTime
      description: |-
        Filter results by ranking strategies

        `?options.strategies.rankingStrategy.ignoreTime=search_boolean`
      schema:
        type: boolean
      in: query
    contOptRankStratIgnoreScore:
      examples:
        exmp-1:
          value: 'true'
      name: options.strategies.rankingStrategy.ignoreScore
      description: |-
        Filter results by ranking strategies

        `?options.strategies.rankingStrategy.ignoreScore=search_boolean`
      schema:
        type: boolean
      in: query
    contOptScoringStratLimitUpdates:
      examples:
        exmp-1:
          value: '5'
      name: options.strategies.scoringStrategy.limitUpdatesTo
      description: |-
        Filter results by scoring strategies

        `?options.strategies.scoringStrategy.limitUpdatesTo=search_number`
      schema:
        format: int32
        type: integer
      in: query
    contOptScoringStratSumBestOf:
      examples:
        exmp-1:
          value: '10.5'
      name: options.strategies.scoringStrategy.sumBestXOf
      description: |-
        Filter results by scoring strategies

        `?options.strategies.scoringStrategy.sumBestXOf=search_number`
      schema:
        format: double
        type: number
      in: query
    contOptScoringStratLastUpdateTs:
      examples:
        exmp-1:
          value: '1633272371'
      name: options.strategies.scoringStrategy.lastUpdateTimeStamp
      description: |-
        Filter results by scoring strategies

        `?options.strategies.scoringStrategy.lastUpdateTimeStamp=search_number`
      schema:
        format: int64
        type: integer
      in: query
    contOptScoringStratRecordTime:
      examples:
        exmp-1:
          value: '10'
      name: options.strategies.scoringStrategy.recordTimeWhenSumReaches
      description: |-
        Filter results by scoring strategies

        `?options.strategies.scoringStrategy.recordTimeWhenSumReaches=search_number`
      schema:
        format: int64
        type: integer
      in: query
    metadataKey:
      examples:
        product-ref-id:
          value: '"my-first-meta-key"'
      name: metadata.key
      description: |-
        Search by metadata key. Case sensitive.

        `?metadata.key=search_word`
      schema:
        type: string
      in: query
    metadataValue:
      examples:
        product-ref-id:
          value: '"my-first-meta-value"'
      name: metadata.value
      description: |-
        Search by metadata value. Case sensitive.

        `?metadata.value=search_word`
      schema:
        type: string
      in: query
    eventRefType:
      examples:
        search-word:
          value: ContestType
      name: eventRefType
      description: |-
        Defines an event type attached to the message. Case sensitive
        Supported values -
        `CompetitionType` `ContestType` `AchievementType`

        `?eventRefType=search_string`
      schema:
        type: string
      in: query
    eventReferenceId:
      examples:
        search-word:
          value: dfadadfadfafaf
      name: eventReferenceId
      description: |-
        The reference ID of the event object. Case sensitive


        `?eventReferenceId=search_string`
      schema:
        type: string
      in: query
    messageType:
      examples:
        search-word:
          value: SumBest
      name: messageType
      description: |-
        The type of message of the member. Case sensitive
        Supported values -
        `Notification` `Achievement` `Reward`

        `?messageType=search_string`
      schema:
        type: string
      in: query
    subject:
      examples:
        search-word:
          value: my first subject
      name: subject
      description: |-
        The title of the message. Case sensitive

        `?subject=search_string`
      schema:
        type: string
      in: query
    messageStatus:
      examples:
        search-word:
          value: Read
      name: status
      description: |-
        The status of the message. Case sensitive

        Supported values -
        `New` `Read` `CollaborationRequest` `Actioned` `Claimed` `Expired` `Canceled` `Deprecated`


        `?status=search_string`
      schema:
        type: string
      in: query
    statregyTypeString:
      examples:
        search-word:
          value: SumBest
      name: options.strategies.strategyType
      description: |-
        The scoring strategy type
        Supported values -
        `TotalCumulative` `SumBest` `LimitedTo` `FirstTo`

        `?options.strategies.strategyType=search_string`
      schema:
        type: string
      in: query
    prizeRewardEntityType:
      examples:
        search-word:
          value: Contest
      name: prize.reward.entityType
      description: |-
        Can be achievement or contest. Case sensitive
        Supported values -
        `Achievement` `Contest`

        `?prize.reward.entityType=search_string`
      schema:
        type: string
      in: query
    prizeRewardEntityId:
      examples:
        search-word:
          value: gsgsggwtwsdvdfadf
      name: prize.reward.entityId
      description: |-
        Achievement id or Contest id. Case sensitive


        `?prize.reward.entityId=search_string`
      schema:
        type: string
      in: query
    prizeRewardRank:
      examples:
        search-word:
          value: '1'
      name: prize.reward.rewardRank
      description: >-
        If used in the context of contest this will associate with the rank of the leaderboard. Case
        sensitive


        `?prize.reward.rewardRank=search_string`
      schema:
        type: string
      in: query
    prizeRewardValue:
      examples:
        search-word:
          value: '1.2'
      name: prize.reward.value
      description: |-
        Numerical value of the reward that will be issued based on the reward type

        `?prize.reward.value=search_double`
      schema:
        format: double
        type: number
      in: query
    prizeRewardType:
      examples:
        search-word:
          value: reward-type-id
      name: prize.reward.rewardType
      description: |-
        Reward type id


        `?prize.reward.rewardType=search_string`
      schema:
        type: string
      in: query
    prizeRewardDelay:
      examples:
        search-word:
          value: '1'
      name: prize.reward.delay
      description: |-
        Delay of issuing a reward in minutes


        `?prize.reward.delay=search_integer`
      schema:
        format: int32
        type: integer
      in: query
    prizeRewardMemAckReqd:
      examples:
        search-word:
          value: 'false'
      name: prize.reward.memberAcknowledgmentRequired
      description: |-
        To claim a reward


        `?prize.reward.memberAcknowledgmentRequired=search_boolean`
      schema:
        type: boolean
      in: query
    prizeRewardCreated:
      examples:
        search-word:
          value: '2018-08-23T14:23:09'
      name: prize.reward.created
      description: |-
        ISO8601 timestamp for when a Reward was created. All records are stored in UTC time zone.


        `?prize.reward.created=search_datetime`
      schema:
        format: date-time
        type: string
      in: query
    prizeRewardMetadataKey:
      examples:
        search-word:
          value: reward-metadata-key
      name: prize.reward.metadata.key
      description: |-
        Search by reward metadata key.


        `?prize.reward.metadata.key=search_word`
      schema:
        type: string
      in: query
    prizeRewardMetadataValue:
      examples:
        search-word:
          value: reward-metadata-value
      name: prize.reward.metadata.value
      description: |-
        Search by reward metadata value.


        `?prize.reward.metadata.value=search_word`
      schema:
        type: string
      in: query
    prizeRewardId:
      examples:
        search-word:
          value: wrwtsdrvxfnjuuu4133
      name: prize.reward.id
      description: |-
        Search by reward id. Case sensitive


        `?prize.reward.id=search_string`
      schema:
        type: string
      in: query
    prizeEntityType:
      examples:
        search-word:
          value: Contest
      name: prize.entityType
      description: |-
        The type of entity this Award relates to. Case sensitive


        Supported values -


        `Contest` `Achievement`


        `?prize.entityType=search_word`
      schema:
        type: string
      in: query
    prizeEntityId:
      examples:
        search-word:
          value: wrwtsdrvxfnjuuu4133
      name: prize.entityId
      description: |-
        The Id of the contest or achievement related to this Award. Case sensitive


        `?prize.entityId=search_string`
      schema:
        type: string
      in: query
    prizeId:
      examples:
        search-word:
          value: wrwtsdrvxfnjuuu4133
      name: prize.id
      description: |-
        Award id. Case sensitive


        `?prize.id=search_word`
      schema:
        type: string
      in: query
    prizeCreated:
      examples:
        search-word:
          value: '2018-08-23T14:23:09'
      name: prize.created
      description: |-
        ISO8601 timestamp for when a Reward was created. All records are stored in UTC time zone.


        `?prize.created=search_datetime`
      schema:
        format: date-time
        type: string
      in: query
    prizeClaimed:
      examples:
        search-word:
          value: 'false'
      name: prize.claimed
      description: |-
        Has the award been claimed or not.


        `?prize.claimed=search_boolean`
      schema:
        type: boolean
      in: query
    achLiveStatus:
      examples:
        search-word:
          value: Live
      name: achievementLiveStatus
      description: |-
        Is the achievement in Live or Draft status

        Supported values:

        `Live` `Draft`

        `?achievementLiveStatus=search_string`
      schema:
        type: string
      in: query
    achDeprecated:
      examples:
        search-word:
          value: 'false'
      name: deprecated
      description: |-
        Is the achievement active or deprecated

        `?deprecated=search_boolean`
      schema:
        type: boolean
      in: query
    achVisibleOrhidden:
      examples:
        search-word:
          value: '1'
      name: initialState
      description: |-
        Is the hidden or visible


        Supported Values:


        `1` and `0`


        `?initialState=search_integer`
      schema:
        format: int32
        type: integer
      in: query
  examples:
    GetApiErrorResponse:
      summary: Example Value
      value:
        meta:
          resultCount: 0
          errorCount: 1
          skip: 0
          limit: 100
        results: []
        errors:
          -
            errorCode: 1007
            message: The error was caused by an invalid ID being submitted
            detail: []
    ApiErrorResponse:
      summary: Example Value
      value:
        meta:
          resultCount: 0
          errorCount: 1
        results: []
        errors:
          -
            errorCode: 1007
            message: The error was caused by an invalid ID being submitted
            detail: []
  securitySchemes:
    apiKey:
      type: apiKey
      description: The API Key generated from Ziqni back-office.
      name: X-API-KEY
      in: header
tags:
  -
    name: competitions
    description: Gateway operations on Competitions
  -
    name: contests
    description: Gateway operations on Contests
  -
    name: members
    description: Gateway operations on Members
  -
    name: member-messages
    description: Gateway operations on Member messages
  -
    name: member-achievements
    description: 'Gateway operations on achievements for a specific member '
  -
    name: member-competitions
    description: Gateway operations on competitions for a specific member
  -
    name: member-awards
    description: Gateway operations on Member awards
  -
    name: achievements
    description: Gateway operations on achievements
  -
    name: widgets
    description: Gateway operations on Widgets
  -
    name: sse
    description: Subscribe to SSE channel
externalDocs:
  description: Find out more about CompetitionLabs
  url: 'https://www.competitionlabs.com'
