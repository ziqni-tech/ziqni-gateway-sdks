/**
 * Ziqni Gateway Services
 * These are the Gateway services to be used by customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiErrorResponse from '../model/ApiErrorResponse';
import ContestByIdResponse from '../model/ContestByIdResponse';
import ContestResponse from '../model/ContestResponse';
import Error from '../model/Error';
import LeaderboardResponse from '../model/LeaderboardResponse';

/**
* Contests service.
* @module api/ContestsApi
* @version 0.0.1
*/
export default class ContestsApi {

    /**
    * Constructs a new ContestsApi. 
    * @alias module:api/ContestsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getContestById operation.
     * @callback module:api/ContestsApi~getContestByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContestByIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the contest by requested id
     * Returns a contest and rewards attached to it by request.  This assumes that a competition and contests have first been created using the web console. Otherwise no data is returned.
     * @param {String} X_API_KEY Your unique API key
     * @param {String} spaceName This is the space name which is linked to the account
     * @param {String} id Unique identifier of the resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Allows you to add the products and metadata objects to the response. Case sensitive
     * @param {String} opts.lang Allows you to preview the label, description and terms and conditions of the competition in a requested language. Case sensitive
     * @param {String} opts.uomKey Adding a `?_uomKey` will give you the value of rewards converted to the specific Units Of Measure multiplier Case sensitive * The unit of measure type of currency provided has to be the same as the rewards. Otherwise, the value will remain the same.  Usage syntax:  `?_uomKey=search_word`
     * @param {module:api/ContestsApi~getContestByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContestByIdResponse}
     */
    getContestById(X_API_KEY, spaceName, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'X_API_KEY' is set
      if (X_API_KEY === undefined || X_API_KEY === null) {
        throw new Error("Missing the required parameter 'X_API_KEY' when calling getContestById");
      }
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling getContestById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getContestById");
      }

      let pathParams = {
        'spaceName': spaceName,
        'id': id
      };
      let queryParams = {
        '_include': opts['include'],
        '_lang': opts['lang'],
        '_uomKey': opts['uomKey']
      };
      let headerParams = {
        'X-API-KEY': X_API_KEY
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContestByIdResponse;
      return this.apiClient.callApi(
        '/api/v1/{spaceName}/contests/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContests operation.
     * @callback module:api/ContestsApi~getContestsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of contests
     * Returns a simplified list of available Contests and rewards attached to it.  * The response of a contest is different than the competitions. While competitions give a response of only Ready, Active and Finished competitions states the contest gives all the contests that are in cancelled state as well.  This assumes that the competitions and contests have first been created using the web console otherwise no data will be returned and the value of the \"totalRecordsFound\" variable in metadata will be 0.  GET responses can be filtered out based on the contests parameters to narrow down the results.
     * @param {String} X_API_KEY Your unique API key
     * @param {String} spaceName This is the space name which is linked to the account
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.id The unique identifiers of the resources
     * @param {Number} opts.limit Used for pagination. Setting the limit value will cause the system to limit the number of records returned to the specified number.
     * @param {Number} opts.skip Used for pagination. Setting the skip value will cause the system to return records from the specified position onwards.  EXAMPLE below returns the results for requested resource without skipping any records  <url>?_limit=5&_skip=0  EXAMPLE below returns the results for requested resource after skipping the first 10 records  `<url>?_limit=5&_skip=10`
     * @param {String} opts.sortByFields Enables sorting of results based on fields and order specified.  Supported ordering  `asc, desc`   Usage syntax  `_sortByFields=<field-to-sort-on>:<order>`   EXAMPLE The query will return data sorted by transactionTimestamp in descending order  `<url>?_sortByFields=transactionTimestamp:desc,created:asc`
     * @param {String} opts.include Allows you to add the products and metadata objects to the response. Case sensitive
     * @param {String} opts.lang Allows you to preview the label, description and terms and conditions of the competition in a requested language. Case sensitive
     * @param {String} opts. Single `=` sign usage will work as a `should/OR` action and `==` will work as a `must/AND` action  Single equals sign usage has two types of applications in formulating API queries - * assigning values to predefined/reserved parameters like _skip, _limit, _lang, _sortByFields, _uomKey, _include * assigning values to model based parameters (Example name, transactionTimestamp, options.limitEntrantsTo etc.)  EXAMPLE below returns all competitions in \"Ready\" or \"Active\" state that have either a group1 or group2 entrant limitation  `<url>/competitions?_skip=0&_limit=100&status=Ready,Active&options.limitEntrantsTo=group1,group2`
     * @param {String} opts.2 Single `=` sign usage will work as a `should/OR` action and `==` will work as a `must/AND` action  Single equals sign usage has two types of applications in formulating API queries - * assigning values to predefined/reserved parameters like _skip, _limit, _lang, _sortByFields, _uomKey, _include * assigning values to model based parameters (Example name, transactionTimestamp, options.limitEntrantsTo etc.)  EXAMPLE below returns all competitions in \"Ready\" state only that have either a group1 or group2 entrant limitation  `<url>/competitions?_skip=0&_limit=100&status==Ready&options.limitEntrantsTo=group1,group2`
     * @param {String} opts.3 Single `=` sign usage will work as a `should/OR` action and `==` will work as a `must/AND` action  The less than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or less than the specified field value.  EXAMPLE below returns all the data which was uploaded before 17:38 9th of February 2021 (defaults to 20 results).  `<url>events?transactionTimestamp<=2021-02-09T17:38:08.328`
     * @param {String} opts.4 Single `=` sign usage will work as a `should/OR` action and `==` will work as a `must/AND` action  The less than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or less than the specified field value.  EXAMPLE below returns all the data which were uploaded before 17:38 9th of February 2021 (defaults to 20 results).  `<url>events?transactionTimestamp<==2021-02-09T17:38:08.328`
     * @param {String} opts.5 Single `=` sign usage will work as a `should/OR` action and `==` will work as a `must/AND` action  The greater than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or greater than the specified field value.  EXAMPLE below returns all the data which were uploaded after 17:38 9th of February 2021 (defaults to 20 results).  `<url>events?transactionTimestamp=>2021-02-09T17:38:08.328`
     * @param {String} opts.6 Single `=` sign usage will work as a `should/OR` action and `==` will work as a `must/AND` action  The greater than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or greater than the specified field value.  EXAMPLE below returns all the data which were uploaded after 17:38 9th of February 2021 (defaults to 20 results).  `<url>events?transactionTimestamp==>2021-02-09T17:38:08.328`
     * @param {String} opts.uomKey Adding a `?_uomKey` will give you the value of rewards converted to the specific Units Of Measure multiplier Case sensitive * The unit of measure type of currency provided has to be the same as the rewards. Otherwise, the value will remain the same.  Usage syntax:  `?_uomKey=search_word`
     * @param {Array.<String>} opts.competitionId Competition id to query.  `?competitionId=<competition-id>`
     * @param {Number} opts.number Contest number to query  `?number=<contest-number>`
     * @param {Number} opts.round Contest round  `?round=<round-value>`
     * @param {Number} opts.optionsNumberOfEntrantsMaximum Filter results by maximum number of entrants  `?options.numberOfEntrants.maximum=search_number`
     * @param {Number} opts.optionsNumberOfEntrantsMinimum Filter results by minimum number of entrants  `?options.numberOfEntrants.minimum=search_number`
     * @param {Boolean} opts.optionsIsPublic Whether the event is public or private  `?options.isPublic=<search-boolean>`
     * @param {Boolean} opts.optionsAutoStart Whether the event is enable for auto start or not  `?options.autoStart=search_boolean`
     * @param {Boolean} opts.optionsAutoStop Whether the event is enable for auto stop or not  `?options.autoStop=search_boolean`
     * @param {String} opts.optionsActualDatesEnd Start and end time of when it actually ended  Supported DateTime patterns - * String = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" * String = \"yyyy-MM-dd'T'HH:mm:ss.SSS\" * String = \"yyyy-MM-dd'T'HH:mm:ssZ\" * String = \"yyyy-MM-dd'T'HH:mm:ss\" * String = \"yyyy-MM-dd'T'HH:mm\" * String = \"yyyy-MM-dd HH:mm:ss\" * String = \"yyyy-MM-dd HH:mm\" * String = \"yyyy/MM/dd HH:mm:ss\" * String = \"yyyy/MM/dd HH:mm\"  `?options.actualDates.end=search_DateTime`
     * @param {String} opts.optionsScheduledDatesStart Start and end time of when it was scheduled  Supported DateTime patterns - * String = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" * String = \"yyyy-MM-dd'T'HH:mm:ss.SSS\" * String = \"yyyy-MM-dd'T'HH:mm:ssZ\" * String = \"yyyy-MM-dd'T'HH:mm:ss\" * String = \"yyyy-MM-dd'T'HH:mm\" * String = \"yyyy-MM-dd HH:mm:ss\" * String = \"yyyy-MM-dd HH:mm\" * String = \"yyyy/MM/dd HH:mm:ss\" * String = \"yyyy/MM/dd HH:mm\"  `?options.scheduledDates.start=search_DateTime`
     * @param {String} opts.optionsScheduledDatesEnd Start and end time of when it was scheduled  Supported DateTime patterns - * String = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" * String = \"yyyy-MM-dd'T'HH:mm:ss.SSS\" * String = \"yyyy-MM-dd'T'HH:mm:ssZ\" * String = \"yyyy-MM-dd'T'HH:mm:ss\" * String = \"yyyy-MM-dd'T'HH:mm\" * String = \"yyyy-MM-dd HH:mm:ss\" * String = \"yyyy-MM-dd HH:mm\" * String = \"yyyy/MM/dd HH:mm:ss\" * String = \"yyyy/MM/dd HH:mm\"  `?options.scheduledDates.end=search_DateTime`
     * @param {String} opts.optionsActualDatesStart Start and end time of when it actually started  Supported DateTime patterns - * String = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" * String = \"yyyy-MM-dd'T'HH:mm:ss.SSS\" * String = \"yyyy-MM-dd'T'HH:mm:ssZ\" * String = \"yyyy-MM-dd'T'HH:mm:ss\" * String = \"yyyy-MM-dd'T'HH:mm\" * String = \"yyyy-MM-dd HH:mm:ss\" * String = \"yyyy-MM-dd HH:mm\" * String = \"yyyy/MM/dd HH:mm:ss\" * String = \"yyyy/MM/dd HH:mm\"  `?options.actualDates.start=search_DateTime`
     * @param {Boolean} opts.optionsStrategiesRankingStrategyScoreDesc Filter results by ranking strategies  `?options.strategies.rankingStrategy.scoreDesc=search_boolean`
     * @param {Boolean} opts.optionsStrategiesRankingStrategyTimeDesc Filter results by ranking strategies  `?options.strategies.rankingStrategy.scoreDesc=search_boolean`
     * @param {Boolean} opts.optionsStrategiesRankingStrategyScoreFirst Filter results by ranking strategies  `?options.strategies.rankingStrategy.scoreFirst=search_boolean`
     * @param {Boolean} opts.optionsStrategiesRankingStrategyIgnoreTime Filter results by ranking strategies  `?options.strategies.rankingStrategy.ignoreTime=search_boolean`
     * @param {Boolean} opts.optionsStrategiesRankingStrategyIgnoreScore Filter results by ranking strategies  `?options.strategies.rankingStrategy.ignoreScore=search_boolean`
     * @param {Number} opts.optionsStrategiesScoringStrategyLimitUpdatesTo Filter results by scoring strategies  `?options.strategies.scoringStrategy.limitUpdatesTo=search_number`
     * @param {Number} opts.optionsStrategiesScoringStrategySumBestXOf Filter results by scoring strategies  `?options.strategies.scoringStrategy.sumBestXOf=search_number`
     * @param {Number} opts.optionsStrategiesScoringStrategyLastUpdateTimeStamp Filter results by scoring strategies  `?options.strategies.scoringStrategy.lastUpdateTimeStamp=search_number`
     * @param {Number} opts.optionsStrategiesScoringStrategyRecordTimeWhenSumReaches Filter results by scoring strategies  `?options.strategies.scoringStrategy.recordTimeWhenSumReaches=search_number`
     * @param {String} opts.optionsStrategiesStrategyType The scoring strategy type Supported values - `TotalCumulative` `SumBest` `LimitedTo` `FirstTo`  `?options.strategies.strategyType=search_string`
     * @param {Date} opts.created Works with simple dates or date and time, eg:   `?created=<created-date>`
     * @param {module:api/ContestsApi~getContestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContestResponse}
     */
    getContests(X_API_KEY, spaceName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'X_API_KEY' is set
      if (X_API_KEY === undefined || X_API_KEY === null) {
        throw new Error("Missing the required parameter 'X_API_KEY' when calling getContests");
      }
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling getContests");
      }

      let pathParams = {
        'spaceName': spaceName
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        '_limit': opts['limit'],
        '_skip': opts['skip'],
        '_sortByFields': opts['sortByFields'],
        '_include': opts['include'],
        '_lang': opts['lang'],
        '&#x3D;': opts[''],
        '&#x3D;&#x3D;': opts['2'],
        '&lt;&#x3D;': opts['3'],
        '&lt;&#x3D;&#x3D;': opts['4'],
        '&#x3D;&gt;': opts['5'],
        '&#x3D;&#x3D;&gt;': opts['6'],
        '_uomKey': opts['uomKey'],
        'competitionId': this.apiClient.buildCollectionParam(opts['competitionId'], 'multi'),
        'number': opts['number'],
        'round': opts['round'],
        'options.numberOfEntrants.maximum': opts['optionsNumberOfEntrantsMaximum'],
        'options.numberOfEntrants.minimum': opts['optionsNumberOfEntrantsMinimum'],
        'options.isPublic': opts['optionsIsPublic'],
        'options.autoStart': opts['optionsAutoStart'],
        'options.autoStop': opts['optionsAutoStop'],
        'options.actualDates.end': opts['optionsActualDatesEnd'],
        'options.scheduledDates.start': opts['optionsScheduledDatesStart'],
        'options.scheduledDates.end': opts['optionsScheduledDatesEnd'],
        'options.actualDates.start': opts['optionsActualDatesStart'],
        'options.strategies.rankingStrategy.scoreDesc': opts['optionsStrategiesRankingStrategyScoreDesc'],
        'options.strategies.rankingStrategy.timeDesc': opts['optionsStrategiesRankingStrategyTimeDesc'],
        'options.strategies.rankingStrategy.scoreFirst': opts['optionsStrategiesRankingStrategyScoreFirst'],
        'options.strategies.rankingStrategy.ignoreTime': opts['optionsStrategiesRankingStrategyIgnoreTime'],
        'options.strategies.rankingStrategy.ignoreScore': opts['optionsStrategiesRankingStrategyIgnoreScore'],
        'options.strategies.scoringStrategy.limitUpdatesTo': opts['optionsStrategiesScoringStrategyLimitUpdatesTo'],
        'options.strategies.scoringStrategy.sumBestXOf': opts['optionsStrategiesScoringStrategySumBestXOf'],
        'options.strategies.scoringStrategy.lastUpdateTimeStamp': opts['optionsStrategiesScoringStrategyLastUpdateTimeStamp'],
        'options.strategies.scoringStrategy.recordTimeWhenSumReaches': opts['optionsStrategiesScoringStrategyRecordTimeWhenSumReaches'],
        'options.strategies.strategyType': opts['optionsStrategiesStrategyType'],
        'created': opts['created']
      };
      let headerParams = {
        'X-API-KEY': X_API_KEY
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContestResponse;
      return this.apiClient.callApi(
        '/api/v1/{spaceName}/contests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLeaderboardByContestId operation.
     * @callback module:api/ContestsApi~getLeaderboardByContestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LeaderboardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the leaderboard for a by contest id
     * Leaderboards, also referred to as score board, give you aggregates of rank and points by member.  Leaderboards are calculated on a near real-time basis. The rate data is received by CompetitionLabs is directly proportional to the update of member positions on the leaderboard.  GET responses can be queried based on generic query parameters (_limit, memberId) to filter results appropriately.
     * @param {String} X_API_KEY Your unique API key
     * @param {String} spaceName This is the space name which is linked to the account
     * @param {String} id Unique identifier of the resource
     * @param {String} memberId Member identifier. Can be a Member reference ID or a Ziqni Member ID  `The response will show the members with a limit of how much you have inserted and it will include the member that you are searching in the leaderboard`  `example - GET https://gateway.ziqni.com/api/v1/test_space/contests/TAHz-2wB9hDCDt3Z_ArD/leaderboard?_limit=100&memberId=tester-0sn4DmUBkPH_lz9GgxBM`  `means that 101 members are shown in the list and the member with the id is included in the list as the last member` `?memberId=search_word`
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Used for pagination. Setting the limit value will cause the system to limit the number of records returned to the specified number.
     * @param {module:api/ContestsApi~getLeaderboardByContestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LeaderboardResponse}
     */
    getLeaderboardByContestId(X_API_KEY, spaceName, id, memberId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'X_API_KEY' is set
      if (X_API_KEY === undefined || X_API_KEY === null) {
        throw new Error("Missing the required parameter 'X_API_KEY' when calling getLeaderboardByContestId");
      }
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling getLeaderboardByContestId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLeaderboardByContestId");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling getLeaderboardByContestId");
      }

      let pathParams = {
        'spaceName': spaceName,
        'id': id
      };
      let queryParams = {
        'memberId': memberId,
        '_limit': opts['limit']
      };
      let headerParams = {
        'X-API-KEY': X_API_KEY
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LeaderboardResponse;
      return this.apiClient.callApi(
        '/api/v1/{spaceName}/contests/{id}/leaderboard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
