/**
 * Ziqni Gateway Services
 * These are the Gateway services to be used by customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiErrorResponse from '../model/ApiErrorResponse';
import Error from '../model/Error';
import MemberAwardByIdResponse from '../model/MemberAwardByIdResponse';

/**
* MemberAwards service.
* @module api/MemberAwardsApi
* @version 0.0.1
*/
export default class MemberAwardsApi {

    /**
    * Constructs a new MemberAwardsApi. 
    * @alias module:api/MemberAwardsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the claimAwardByIdAndMemberId operation.
     * @callback module:api/MemberAwardsApi~claimAwardByIdAndMemberIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberAwardByIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Claim a specific award for a member
     * Claims an Award for a given Member ID. This is only applicable when an award needs to be claimed.  You can retrieve an award id using GET Messages public API endpoint and querying the `prize`.  EXAMPLE  `GET /api/v1/:space/members/:memberId/messages?prize.memberId=:memberId`  The response prize id is the awardId that is needed for the Request URL 
     * @param {String} X_API_KEY Your unique API key
     * @param {String} spaceName This is the space name which is linked to the account
     * @param {String} memberId Id of a Member
     * @param {String} awardId Id of the award
     * @param {module:api/MemberAwardsApi~claimAwardByIdAndMemberIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberAwardByIdResponse}
     */
    claimAwardByIdAndMemberId(X_API_KEY, spaceName, memberId, awardId, callback) {
      let postBody = null;
      // verify the required parameter 'X_API_KEY' is set
      if (X_API_KEY === undefined || X_API_KEY === null) {
        throw new Error("Missing the required parameter 'X_API_KEY' when calling claimAwardByIdAndMemberId");
      }
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling claimAwardByIdAndMemberId");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling claimAwardByIdAndMemberId");
      }
      // verify the required parameter 'awardId' is set
      if (awardId === undefined || awardId === null) {
        throw new Error("Missing the required parameter 'awardId' when calling claimAwardByIdAndMemberId");
      }

      let pathParams = {
        'spaceName': spaceName,
        'memberId': memberId,
        'awardId': awardId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API-KEY': X_API_KEY
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MemberAwardByIdResponse;
      return this.apiClient.callApi(
        '/api/v1/{spaceName}/members/{memberId}/award/{awardId}/award', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the claimAwardByIdAndMemberRefId operation.
     * @callback module:api/MemberAwardsApi~claimAwardByIdAndMemberRefIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberAwardByIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Claim a specific award for a member
     * Claims an Award for a given Member ID. This is only applicable when an award needs to be claimed.  You can retrieve an award id using GET Messages public API endpoint and querying the `prize`.  EXAMPLE  `GET /api/v1/:space/members/:memberId/messages?prize.memberId=:memberId`  The response prize id is the awardId that is needed for the Request URL 
     * @param {String} X_API_KEY Your unique API key
     * @param {String} spaceName This is the space name which is linked to the account
     * @param {String} memberRefId Reference Id of a Member
     * @param {String} awardId Id of the award
     * @param {module:api/MemberAwardsApi~claimAwardByIdAndMemberRefIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberAwardByIdResponse}
     */
    claimAwardByIdAndMemberRefId(X_API_KEY, spaceName, memberRefId, awardId, callback) {
      let postBody = null;
      // verify the required parameter 'X_API_KEY' is set
      if (X_API_KEY === undefined || X_API_KEY === null) {
        throw new Error("Missing the required parameter 'X_API_KEY' when calling claimAwardByIdAndMemberRefId");
      }
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling claimAwardByIdAndMemberRefId");
      }
      // verify the required parameter 'memberRefId' is set
      if (memberRefId === undefined || memberRefId === null) {
        throw new Error("Missing the required parameter 'memberRefId' when calling claimAwardByIdAndMemberRefId");
      }
      // verify the required parameter 'awardId' is set
      if (awardId === undefined || awardId === null) {
        throw new Error("Missing the required parameter 'awardId' when calling claimAwardByIdAndMemberRefId");
      }

      let pathParams = {
        'spaceName': spaceName,
        'memberRefId': memberRefId,
        'awardId': awardId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API-KEY': X_API_KEY
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MemberAwardByIdResponse;
      return this.apiClient.callApi(
        '/api/v1/{spaceName}/members/reference/{memberRefId}/award/{awardId}/award', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAwardByIdAndMemberId operation.
     * @callback module:api/MemberAwardsApi~getAwardByIdAndMemberIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberAwardByIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns specific award for a member
     * Returns the an award for a given member ID  You can retrieve an award id using GET Messages public API endpoint and querying the `prize`.  EXAMPLE  `GET /api/v1/:space/members/:memberId/messages?prize.memberId=:memberId`  The response prize id is the awardId that is needed for the Request URL
     * @param {String} X_API_KEY Your unique API key
     * @param {String} spaceName This is the space name which is linked to the account
     * @param {String} memberId Id of a Member
     * @param {String} awardId Id of the award
     * @param {module:api/MemberAwardsApi~getAwardByIdAndMemberIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberAwardByIdResponse}
     */
    getAwardByIdAndMemberId(X_API_KEY, spaceName, memberId, awardId, callback) {
      let postBody = null;
      // verify the required parameter 'X_API_KEY' is set
      if (X_API_KEY === undefined || X_API_KEY === null) {
        throw new Error("Missing the required parameter 'X_API_KEY' when calling getAwardByIdAndMemberId");
      }
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling getAwardByIdAndMemberId");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling getAwardByIdAndMemberId");
      }
      // verify the required parameter 'awardId' is set
      if (awardId === undefined || awardId === null) {
        throw new Error("Missing the required parameter 'awardId' when calling getAwardByIdAndMemberId");
      }

      let pathParams = {
        'spaceName': spaceName,
        'memberId': memberId,
        'awardId': awardId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API-KEY': X_API_KEY
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MemberAwardByIdResponse;
      return this.apiClient.callApi(
        '/api/v1/{spaceName}/members/{memberId}/award/{awardId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAwardByIdAndMemberRefId operation.
     * @callback module:api/MemberAwardsApi~getAwardByIdAndMemberRefIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberAwardByIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns specific award for a member
     * Returns the an award for a given member ID  You can retrieve an award id using GET Messages public API endpoint and querying the `prize`.  EXAMPLE  `GET /api/v1/:space/members/:memberId/messages?prize.memberId=:memberId`  The response prize id is the awardId that is needed for the Request URL
     * @param {String} X_API_KEY Your unique API key
     * @param {String} spaceName This is the space name which is linked to the account
     * @param {String} memberRefId Reference Id of a Member
     * @param {String} awardId Id of the award
     * @param {module:api/MemberAwardsApi~getAwardByIdAndMemberRefIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberAwardByIdResponse}
     */
    getAwardByIdAndMemberRefId(X_API_KEY, spaceName, memberRefId, awardId, callback) {
      let postBody = null;
      // verify the required parameter 'X_API_KEY' is set
      if (X_API_KEY === undefined || X_API_KEY === null) {
        throw new Error("Missing the required parameter 'X_API_KEY' when calling getAwardByIdAndMemberRefId");
      }
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling getAwardByIdAndMemberRefId");
      }
      // verify the required parameter 'memberRefId' is set
      if (memberRefId === undefined || memberRefId === null) {
        throw new Error("Missing the required parameter 'memberRefId' when calling getAwardByIdAndMemberRefId");
      }
      // verify the required parameter 'awardId' is set
      if (awardId === undefined || awardId === null) {
        throw new Error("Missing the required parameter 'awardId' when calling getAwardByIdAndMemberRefId");
      }

      let pathParams = {
        'spaceName': spaceName,
        'memberRefId': memberRefId,
        'awardId': awardId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API-KEY': X_API_KEY
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MemberAwardByIdResponse;
      return this.apiClient.callApi(
        '/api/v1/{spaceName}/members/reference/{memberRefId}/award/{awardId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
