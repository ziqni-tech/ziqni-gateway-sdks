/**
 * Ziqni Gateway Services
 * These are the Gateway services to be used by customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import ApiErrorResponse from '../model/ApiErrorResponse';
import CompetitionByIdResponse from '../model/CompetitionByIdResponse';
import CompetitionResponse from '../model/CompetitionResponse';
import Error from '../model/Error';
/**
* Competitions service.
* @module api/CompetitionsApi
* @version 0.0.1
*/

export default class CompetitionsApi {
  /**
  * Constructs a new CompetitionsApi. 
  * @alias module:api/CompetitionsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }
  /**
   * Callback function to receive the result of the getCompetitionById operation.
   * @callback module:api/CompetitionsApi~getCompetitionByIdCallback
   * @param {String} error Error message, if any.
   * @param {module:model/CompetitionByIdResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Returns the competition by requested id
   * Returns a competition with a list of all available contests and rewards for that competition.  This assumes that a competition and contests have first been created using the web console. Otherwise, no data is returned.
   * @param {String} X_API_KEY Your unique API key
   * @param {String} spaceName This is the space name which is linked to the account
   * @param {String} id Unique identifier of the resource
   * @param {Object} opts Optional parameters
   * @param {String} opts.include Allows you to add the products and metadata objects to the response. Case sensitive
   * @param {String} opts.lang Allows you to preview the label, description and terms and conditions of the competition in a requested language. Case sensitive
   * @param {String} opts.uomKey Adding a `?_uomKey` will give you the value of rewards converted to the specific Units Of Measure multiplier Case sensitive * The unit of measure type of currency provided has to be the same as the rewards. Otherwise, the value will remain the same.  Usage syntax:  `?_uomKey=search_word`
   * @param {module:api/CompetitionsApi~getCompetitionByIdCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/CompetitionByIdResponse}
   */


  getCompetitionById(X_API_KEY, spaceName, id, opts, callback) {
    opts = opts || {};
    let postBody = null; // verify the required parameter 'X_API_KEY' is set

    if (X_API_KEY === undefined || X_API_KEY === null) {
      throw new Error("Missing the required parameter 'X_API_KEY' when calling getCompetitionById");
    } // verify the required parameter 'spaceName' is set


    if (spaceName === undefined || spaceName === null) {
      throw new Error("Missing the required parameter 'spaceName' when calling getCompetitionById");
    } // verify the required parameter 'id' is set


    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling getCompetitionById");
    }

    let pathParams = {
      'spaceName': spaceName,
      'id': id
    };
    let queryParams = {
      '_include': opts['include'],
      '_lang': opts['lang'],
      '_uomKey': opts['uomKey']
    };
    let headerParams = {
      'X-API-KEY': X_API_KEY
    };
    let formParams = {};
    let authNames = ['apiKey'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = CompetitionByIdResponse;
    return this.apiClient.callApi('/api/v1/{spaceName}/competitions/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }
  /**
   * Callback function to receive the result of the getCompetitions operation.
   * @callback module:api/CompetitionsApi~getCompetitionsCallback
   * @param {String} error Error message, if any.
   * @param {module:model/CompetitionResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Returns a list of competitions
   * Returns a simplified list of available Competitions for ALL.  The default behaviour of a response is that the competitions that are in Ready, Active or Finished state AND are eligible for ALL will be returned unless queried otherwise.  To return eligibility for specific groups you need to send an endpoint for options limitEntrantsTo (the value of \"search_word\" is the member group or multiple groups that you are searching for that is eligible to participate). This filter will check eligibility against 4 types of member group setup: 1. should - if a member part of this group then a competition will be returned 2. must - the competition with this group has to exist 3. must-not - groups that can not participate 4. ALL - by default if any competition is in ALL member group then it will be returned even if the filter is request for must, should or must-not  The response is competitions that are eligible to ALL + limitEntrantsTo  This assumes that competitions have first been created using the web console otherwise no data will be returned and the value of the \"totalRecordsFound\" variable in metadata will be 0.  GET responses can be filtered out based on the competition parameters to narrow down the results.  The denser the queryable URL the more precise the response will be.   Sort by fields is limited to: * created (DateTime of the competition creation) * label (the label of the competition) * scheduled start and end DateTime * actual start and end DateTime * status code that indicates the status of the competition  Example:  ?_sortByFields=created  ?_sortByFields=label  ?_sortByFields=options.scheduledDates.start  ?_sortByFields=options.scheduledDates.end  ?_sortByFields=options.actualDates.start  ?_sortByFields=options.actualDates.end  ?_sortByFields=statusCode
   * @param {String} X_API_KEY Your unique API key
   * @param {String} spaceName This is the space name which is linked to the account
   * @param {Object} opts Optional parameters
   * @param {Array.<String>} opts.id The unique identifiers of the resources
   * @param {Number} opts.limit Used for pagination. Setting the limit value will cause the system to limit the number of records returned to the specified number.
   * @param {Number} opts.skip Used for pagination. Setting the skip value will cause the system to return records from the specified position onwards.  EXAMPLE below returns the results for requested resource without skipping any records  <url>?_limit=5&_skip=0  EXAMPLE below returns the results for requested resource after skipping the first 10 records  `<url>?_limit=5&_skip=10`
   * @param {String} opts.sortByFields Enables sorting of results based on fields and order specified.  Supported ordering  `asc, desc`   Usage syntax  `_sortByFields=<field-to-sort-on>:<order>`   EXAMPLE The query will return data sorted by transactionTimestamp in descending order  `<url>?_sortByFields=transactionTimestamp:desc,created:asc`
   * @param {String} opts.include Allows you to add the products and metadata objects to the response. Case sensitive
   * @param {String} opts.lang Allows you to preview the label, description and terms and conditions of the competition in a requested language. Case sensitive
   * @param {String} opts. Single `=` sign usage will work as a `should/OR` action and `==` will work as a `must/AND` action  Single equals sign usage has two types of applications in formulating API queries - * assigning values to predefined/reserved parameters like _skip, _limit, _lang, _sortByFields, _uomKey, _include * assigning values to model based parameters (Example name, transactionTimestamp, options.limitEntrantsTo etc.)  EXAMPLE below returns all competitions in \"Ready\" or \"Active\" state that have either a group1 or group2 entrant limitation  `<url>/competitions?_skip=0&_limit=100&status=Ready,Active&options.limitEntrantsTo=group1,group2`
   * @param {String} opts.2 Single `=` sign usage will work as a `should/OR` action and `==` will work as a `must/AND` action  Single equals sign usage has two types of applications in formulating API queries - * assigning values to predefined/reserved parameters like _skip, _limit, _lang, _sortByFields, _uomKey, _include * assigning values to model based parameters (Example name, transactionTimestamp, options.limitEntrantsTo etc.)  EXAMPLE below returns all competitions in \"Ready\" state only that have either a group1 or group2 entrant limitation  `<url>/competitions?_skip=0&_limit=100&status==Ready&options.limitEntrantsTo=group1,group2`
   * @param {String} opts.3 Single `=` sign usage will work as a `should/OR` action and `==` will work as a `must/AND` action  The less than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or less than the specified field value.  EXAMPLE below returns all the data which was uploaded before 17:38 9th of February 2021 (defaults to 20 results).  `<url>events?transactionTimestamp<=2021-02-09T17:38:08.328`
   * @param {String} opts.4 Single `=` sign usage will work as a `should/OR` action and `==` will work as a `must/AND` action  The less than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or less than the specified field value.  EXAMPLE below returns all the data which were uploaded before 17:38 9th of February 2021 (defaults to 20 results).  `<url>events?transactionTimestamp<==2021-02-09T17:38:08.328`
   * @param {String} opts.5 Single `=` sign usage will work as a `should/OR` action and `==` will work as a `must/AND` action  The greater than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or greater than the specified field value.  EXAMPLE below returns all the data which were uploaded after 17:38 9th of February 2021 (defaults to 20 results).  `<url>events?transactionTimestamp=>2021-02-09T17:38:08.328`
   * @param {String} opts.6 Single `=` sign usage will work as a `should/OR` action and `==` will work as a `must/AND` action  The greater than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or greater than the specified field value.  EXAMPLE below returns all the data which were uploaded after 17:38 9th of February 2021 (defaults to 20 results).  `<url>events?transactionTimestamp==>2021-02-09T17:38:08.328`
   * @param {String} opts.optionsActualDatesEnd Start and end time of when it actually ended  Supported DateTime patterns - * String = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" * String = \"yyyy-MM-dd'T'HH:mm:ss.SSS\" * String = \"yyyy-MM-dd'T'HH:mm:ssZ\" * String = \"yyyy-MM-dd'T'HH:mm:ss\" * String = \"yyyy-MM-dd'T'HH:mm\" * String = \"yyyy-MM-dd HH:mm:ss\" * String = \"yyyy-MM-dd HH:mm\" * String = \"yyyy/MM/dd HH:mm:ss\" * String = \"yyyy/MM/dd HH:mm\"  `?options.actualDates.end=search_DateTime`
   * @param {String} opts.actualEnd Start and end time of when it actually ended  Supported DateTime patterns - * String = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" * String = \"yyyy-MM-dd'T'HH:mm:ss.SSS\" * String = \"yyyy-MM-dd'T'HH:mm:ssZ\" * String = \"yyyy-MM-dd'T'HH:mm:ss\" * String = \"yyyy-MM-dd'T'HH:mm\" * String = \"yyyy-MM-dd HH:mm:ss\" * String = \"yyyy-MM-dd HH:mm\" * String = \"yyyy/MM/dd HH:mm:ss\" * String = \"yyyy/MM/dd HH:mm\"  `?actualEnd=search_DateTime`
   * @param {String} opts.productsProductRefId Search by products reference Id and products metadata. Case sensitive.  `?products.productRefId=search_word`
   * @param {String} opts.productRefId Search by products reference Id and products metadata. Case sensitive.  `?productRefId=search_word`
   * @param {String} opts.optionsProductsMetadataKey Search by products reference Id and products metadata. Case sensitive.  `?options.products.metadata.key=search_word`
   * @param {String} opts.optionsProductsMetadataValue Search by products reference Id and products metadata. Case sensitive.  `?options.products.metadata.value=search_word`
   * @param {String} opts.optionsProductsProductRefId Search by products reference Id and products metadata. Case sensitive.  `?options.products.productRefId=search_word`
   * @param {String} opts.status The status of the competition. Case sensitive. Supported values - `Unknown` `Deleting` `Deleted` `Draft` `Template` `Preparing` `Ready` `Starting` `Active` `Finishing` `Finished` `Cancelling` `Cancelled`
   * @param {Number} opts.statusCode The status code of the competition. Numbers only.  Supported values:  -3 (Unknown)  -2 (Deleting)  -1 (Deleted)  0 (Draft)  1 (Template)  2 (Preparing)  3 (Ready)  4 (Starting)  5 (Active)  6 (Finishing)  7 (Finished)  8 (Cancelling)  9 (Cancelled) 
   * @param {Array.<String>} opts.optionsLimitEntrantsTo The value is the member group that you are searching for that is eligible to participate. Case sensitive.  `?options.limitEntrantsTo=search_word`
   * @param {Array.<String>} opts.limitEntrantsTo The value is the member group that you are searching for that is eligible to participate. Case sensitive.  `?limitEntrantsTo=search_word`
   * @param {String} opts.optionsScheduledDatesStart Start and end time of when it was scheduled  Supported DateTime patterns - * String = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" * String = \"yyyy-MM-dd'T'HH:mm:ss.SSS\" * String = \"yyyy-MM-dd'T'HH:mm:ssZ\" * String = \"yyyy-MM-dd'T'HH:mm:ss\" * String = \"yyyy-MM-dd'T'HH:mm\" * String = \"yyyy-MM-dd HH:mm:ss\" * String = \"yyyy-MM-dd HH:mm\" * String = \"yyyy/MM/dd HH:mm:ss\" * String = \"yyyy/MM/dd HH:mm\"  `?options.scheduledDates.start=search_DateTime`
   * @param {String} opts.scheduledStart Start and end time of when it was scheduled  Supported DateTime patterns - * String = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" * String = \"yyyy-MM-dd'T'HH:mm:ss.SSS\" * String = \"yyyy-MM-dd'T'HH:mm:ssZ\" * String = \"yyyy-MM-dd'T'HH:mm:ss\" * String = \"yyyy-MM-dd'T'HH:mm\" * String = \"yyyy-MM-dd HH:mm:ss\" * String = \"yyyy-MM-dd HH:mm\" * String = \"yyyy/MM/dd HH:mm:ss\" * String = \"yyyy/MM/dd HH:mm\"  `?scheduledStart=search_DateTime`
   * @param {String} opts.optionsScheduledDatesEnd Start and end time of when it was scheduled  Supported DateTime patterns - * String = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" * String = \"yyyy-MM-dd'T'HH:mm:ss.SSS\" * String = \"yyyy-MM-dd'T'HH:mm:ssZ\" * String = \"yyyy-MM-dd'T'HH:mm:ss\" * String = \"yyyy-MM-dd'T'HH:mm\" * String = \"yyyy-MM-dd HH:mm:ss\" * String = \"yyyy-MM-dd HH:mm\" * String = \"yyyy/MM/dd HH:mm:ss\" * String = \"yyyy/MM/dd HH:mm\"  `?options.scheduledDates.end=search_DateTime`
   * @param {String} opts.scheduledEnd Start and end time of when it was scheduled  Supported DateTime patterns - * String = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" * String = \"yyyy-MM-dd'T'HH:mm:ss.SSS\" * String = \"yyyy-MM-dd'T'HH:mm:ssZ\" * String = \"yyyy-MM-dd'T'HH:mm:ss\" * String = \"yyyy-MM-dd'T'HH:mm\" * String = \"yyyy-MM-dd HH:mm:ss\" * String = \"yyyy-MM-dd HH:mm\" * String = \"yyyy/MM/dd HH:mm:ss\" * String = \"yyyy/MM/dd HH:mm\"  `?scheduledStart=search_DateTime`
   * @param {String} opts.optionsActualDatesStart Start and end time of when it actually started  Supported DateTime patterns - * String = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" * String = \"yyyy-MM-dd'T'HH:mm:ss.SSS\" * String = \"yyyy-MM-dd'T'HH:mm:ssZ\" * String = \"yyyy-MM-dd'T'HH:mm:ss\" * String = \"yyyy-MM-dd'T'HH:mm\" * String = \"yyyy-MM-dd HH:mm:ss\" * String = \"yyyy-MM-dd HH:mm\" * String = \"yyyy/MM/dd HH:mm:ss\" * String = \"yyyy/MM/dd HH:mm\"  `?options.actualDates.start=search_DateTime`
   * @param {String} opts.actualStart Start and end time of when it actually started  Supported DateTime patterns - * String = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" * String = \"yyyy-MM-dd'T'HH:mm:ss.SSS\" * String = \"yyyy-MM-dd'T'HH:mm:ssZ\" * String = \"yyyy-MM-dd'T'HH:mm:ss\" * String = \"yyyy-MM-dd'T'HH:mm\" * String = \"yyyy-MM-dd HH:mm:ss\" * String = \"yyyy-MM-dd HH:mm\" * String = \"yyyy/MM/dd HH:mm:ss\" * String = \"yyyy/MM/dd HH:mm\"  `?actualStart=search_DateTime`
   * @param {module:api/CompetitionsApi~getCompetitionsCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/CompetitionResponse}
   */


  getCompetitions(X_API_KEY, spaceName, opts, callback) {
    opts = opts || {};
    let postBody = null; // verify the required parameter 'X_API_KEY' is set

    if (X_API_KEY === undefined || X_API_KEY === null) {
      throw new Error("Missing the required parameter 'X_API_KEY' when calling getCompetitions");
    } // verify the required parameter 'spaceName' is set


    if (spaceName === undefined || spaceName === null) {
      throw new Error("Missing the required parameter 'spaceName' when calling getCompetitions");
    }

    let pathParams = {
      'spaceName': spaceName
    };
    let queryParams = {
      'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
      '_limit': opts['limit'],
      '_skip': opts['skip'],
      '_sortByFields': opts['sortByFields'],
      '_include': opts['include'],
      '_lang': opts['lang'],
      '&#x3D;': opts[''],
      '&#x3D;&#x3D;': opts['2'],
      '&lt;&#x3D;': opts['3'],
      '&lt;&#x3D;&#x3D;': opts['4'],
      '&#x3D;&gt;': opts['5'],
      '&#x3D;&#x3D;&gt;': opts['6'],
      'options.actualDates.end': opts['optionsActualDatesEnd'],
      'actualEnd': opts['actualEnd'],
      'products.productRefId': opts['productsProductRefId'],
      'productRefId': opts['productRefId'],
      'options.products.metadata.key': opts['optionsProductsMetadataKey'],
      'options.products.metadata.value': opts['optionsProductsMetadataValue'],
      'options.products.productRefId': opts['optionsProductsProductRefId'],
      'status': opts['status'],
      'statusCode': opts['statusCode'],
      'options.limitEntrantsTo': this.apiClient.buildCollectionParam(opts['optionsLimitEntrantsTo'], 'multi'),
      'limitEntrantsTo': this.apiClient.buildCollectionParam(opts['limitEntrantsTo'], 'multi'),
      'options.scheduledDates.start': opts['optionsScheduledDatesStart'],
      'scheduledStart': opts['scheduledStart'],
      'options.scheduledDates.end': opts['optionsScheduledDatesEnd'],
      'scheduledEnd': opts['scheduledEnd'],
      'options.actualDates.start': opts['optionsActualDatesStart'],
      'actualStart': opts['actualStart']
    };
    let headerParams = {
      'X-API-KEY': X_API_KEY
    };
    let formParams = {};
    let authNames = ['apiKey'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = CompetitionResponse;
    return this.apiClient.callApi('/api/v1/{spaceName}/competitions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }

}