/**
 * Ziqni Gateway Services
 * These are the Gateway services to be used by customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import AchievementIssuedResponse from '../model/AchievementIssuedResponse';
import ApiErrorResponse from '../model/ApiErrorResponse';
import Error from '../model/Error';
import MemberAchievementResponse from '../model/MemberAchievementResponse';
/**
* MemberAchievements service.
* @module api/MemberAchievementsApi
* @version 0.0.1
*/

export default class MemberAchievementsApi {
  /**
  * Constructs a new MemberAchievementsApi. 
  * @alias module:api/MemberAchievementsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }
  /**
   * Callback function to receive the result of the getAchievementByIdAndMemberId operation.
   * @callback module:api/MemberAchievementsApi~getAchievementByIdAndMemberIdCallback
   * @param {String} error Error message, if any.
   * @param {module:model/MemberAchievementResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Returns specific achievement for a member
   * Returns a progression list of achieved percentages based on the configured achievements rules for a specified member.  
   * @param {String} X_API_KEY Your unique API key
   * @param {String} spaceName This is the space name which is linked to the account
   * @param {String} memberId Id of a Member
   * @param {String} achievementId Id of an achievement
   * @param {module:api/MemberAchievementsApi~getAchievementByIdAndMemberIdCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/MemberAchievementResponse}
   */


  getAchievementByIdAndMemberId(X_API_KEY, spaceName, memberId, achievementId, callback) {
    let postBody = null; // verify the required parameter 'X_API_KEY' is set

    if (X_API_KEY === undefined || X_API_KEY === null) {
      throw new Error("Missing the required parameter 'X_API_KEY' when calling getAchievementByIdAndMemberId");
    } // verify the required parameter 'spaceName' is set


    if (spaceName === undefined || spaceName === null) {
      throw new Error("Missing the required parameter 'spaceName' when calling getAchievementByIdAndMemberId");
    } // verify the required parameter 'memberId' is set


    if (memberId === undefined || memberId === null) {
      throw new Error("Missing the required parameter 'memberId' when calling getAchievementByIdAndMemberId");
    } // verify the required parameter 'achievementId' is set


    if (achievementId === undefined || achievementId === null) {
      throw new Error("Missing the required parameter 'achievementId' when calling getAchievementByIdAndMemberId");
    }

    let pathParams = {
      'spaceName': spaceName,
      'memberId': memberId,
      'achievementId': achievementId
    };
    let queryParams = {};
    let headerParams = {
      'X-API-KEY': X_API_KEY
    };
    let formParams = {};
    let authNames = ['apiKey'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = MemberAchievementResponse;
    return this.apiClient.callApi('/api/v1/{spaceName}/members/{memberId}/achievements/{achievementId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }
  /**
   * Callback function to receive the result of the getAchievementByIdAndMemberRefId operation.
   * @callback module:api/MemberAchievementsApi~getAchievementByIdAndMemberRefIdCallback
   * @param {String} error Error message, if any.
   * @param {module:model/MemberAchievementResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Returns specific achievement for a member
   * Returns a progression list of achieved percentages based on the configured achievements rules for a specified member.  
   * @param {String} X_API_KEY Your unique API key
   * @param {String} spaceName This is the space name which is linked to the account
   * @param {String} memberRefId Reference Id of a Member
   * @param {String} achievementId Id of an achievement
   * @param {module:api/MemberAchievementsApi~getAchievementByIdAndMemberRefIdCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/MemberAchievementResponse}
   */


  getAchievementByIdAndMemberRefId(X_API_KEY, spaceName, memberRefId, achievementId, callback) {
    let postBody = null; // verify the required parameter 'X_API_KEY' is set

    if (X_API_KEY === undefined || X_API_KEY === null) {
      throw new Error("Missing the required parameter 'X_API_KEY' when calling getAchievementByIdAndMemberRefId");
    } // verify the required parameter 'spaceName' is set


    if (spaceName === undefined || spaceName === null) {
      throw new Error("Missing the required parameter 'spaceName' when calling getAchievementByIdAndMemberRefId");
    } // verify the required parameter 'memberRefId' is set


    if (memberRefId === undefined || memberRefId === null) {
      throw new Error("Missing the required parameter 'memberRefId' when calling getAchievementByIdAndMemberRefId");
    } // verify the required parameter 'achievementId' is set


    if (achievementId === undefined || achievementId === null) {
      throw new Error("Missing the required parameter 'achievementId' when calling getAchievementByIdAndMemberRefId");
    }

    let pathParams = {
      'spaceName': spaceName,
      'memberRefId': memberRefId,
      'achievementId': achievementId
    };
    let queryParams = {};
    let headerParams = {
      'X-API-KEY': X_API_KEY
    };
    let formParams = {};
    let authNames = ['apiKey'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = MemberAchievementResponse;
    return this.apiClient.callApi('/api/v1/{spaceName}/members/reference/{memberRefId}/achievements/{achievementId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }
  /**
   * Callback function to receive the result of the getAchievementsByMemberId operation.
   * @callback module:api/MemberAchievementsApi~getAchievementsByMemberIdCallback
   * @param {String} error Error message, if any.
   * @param {module:model/MemberAchievementResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Returns achievements for a member
   * Returns a progression list of achieved percentages based on the configured achievements rules for a specified member.
   * @param {String} X_API_KEY Your unique API key
   * @param {String} spaceName This is the space name which is linked to the account
   * @param {String} memberId Id of a Member
   * @param {Object} opts Optional parameters
   * @param {Array.<String>} opts.id The unique identifiers of the resources
   * @param {module:api/MemberAchievementsApi~getAchievementsByMemberIdCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/MemberAchievementResponse}
   */


  getAchievementsByMemberId(X_API_KEY, spaceName, memberId, opts, callback) {
    opts = opts || {};
    let postBody = null; // verify the required parameter 'X_API_KEY' is set

    if (X_API_KEY === undefined || X_API_KEY === null) {
      throw new Error("Missing the required parameter 'X_API_KEY' when calling getAchievementsByMemberId");
    } // verify the required parameter 'spaceName' is set


    if (spaceName === undefined || spaceName === null) {
      throw new Error("Missing the required parameter 'spaceName' when calling getAchievementsByMemberId");
    } // verify the required parameter 'memberId' is set


    if (memberId === undefined || memberId === null) {
      throw new Error("Missing the required parameter 'memberId' when calling getAchievementsByMemberId");
    }

    let pathParams = {
      'spaceName': spaceName,
      'memberId': memberId
    };
    let queryParams = {
      'id': this.apiClient.buildCollectionParam(opts['id'], 'multi')
    };
    let headerParams = {
      'X-API-KEY': X_API_KEY
    };
    let formParams = {};
    let authNames = ['apiKey'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = MemberAchievementResponse;
    return this.apiClient.callApi('/api/v1/{spaceName}/members/{memberId}/achievements', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }
  /**
   * Callback function to receive the result of the getAchievementsByMemberRefId operation.
   * @callback module:api/MemberAchievementsApi~getAchievementsByMemberRefIdCallback
   * @param {String} error Error message, if any.
   * @param {module:model/MemberAchievementResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Returns achievements for a member
   * Returns a progression list of achieved percentages based on the configured achievements rules for a specified member.
   * @param {String} X_API_KEY Your unique API key
   * @param {String} spaceName This is the space name which is linked to the account
   * @param {String} memberRefId Reference Id of a Member
   * @param {Object} opts Optional parameters
   * @param {Array.<String>} opts.id The unique identifiers of the resources
   * @param {module:api/MemberAchievementsApi~getAchievementsByMemberRefIdCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/MemberAchievementResponse}
   */


  getAchievementsByMemberRefId(X_API_KEY, spaceName, memberRefId, opts, callback) {
    opts = opts || {};
    let postBody = null; // verify the required parameter 'X_API_KEY' is set

    if (X_API_KEY === undefined || X_API_KEY === null) {
      throw new Error("Missing the required parameter 'X_API_KEY' when calling getAchievementsByMemberRefId");
    } // verify the required parameter 'spaceName' is set


    if (spaceName === undefined || spaceName === null) {
      throw new Error("Missing the required parameter 'spaceName' when calling getAchievementsByMemberRefId");
    } // verify the required parameter 'memberRefId' is set


    if (memberRefId === undefined || memberRefId === null) {
      throw new Error("Missing the required parameter 'memberRefId' when calling getAchievementsByMemberRefId");
    }

    let pathParams = {
      'spaceName': spaceName,
      'memberRefId': memberRefId
    };
    let queryParams = {
      'id': this.apiClient.buildCollectionParam(opts['id'], 'multi')
    };
    let headerParams = {
      'X-API-KEY': X_API_KEY
    };
    let formParams = {};
    let authNames = ['apiKey'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = MemberAchievementResponse;
    return this.apiClient.callApi('/api/v1/{spaceName}/members/reference/{memberRefId}/achievements', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }
  /**
   * Callback function to receive the result of the getIssuedAchievementsByMemberId operation.
   * @callback module:api/MemberAchievementsApi~getIssuedAchievementsByMemberIdCallback
   * @param {String} error Error message, if any.
   * @param {module:model/AchievementIssuedResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Returns achievements issued for a member
   * Returns an aggregated list of achieved achievement IDs for a specified member with a count that indicates the amount of times this achievement was issued for the specified memerId.  If there is no achievement data inside the events stream for a specified user no data returned and the value of the \"totalRecordsFound\" variable in metadata is 0.  `All the achievements, including deprecated/archived ones, that were issued to the member are displayed.`
   * @param {String} X_API_KEY Your unique API key
   * @param {String} spaceName This is the space name which is linked to the account
   * @param {String} memberId Id of a Member
   * @param {module:api/MemberAchievementsApi~getIssuedAchievementsByMemberIdCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/AchievementIssuedResponse}
   */


  getIssuedAchievementsByMemberId(X_API_KEY, spaceName, memberId, callback) {
    let postBody = null; // verify the required parameter 'X_API_KEY' is set

    if (X_API_KEY === undefined || X_API_KEY === null) {
      throw new Error("Missing the required parameter 'X_API_KEY' when calling getIssuedAchievementsByMemberId");
    } // verify the required parameter 'spaceName' is set


    if (spaceName === undefined || spaceName === null) {
      throw new Error("Missing the required parameter 'spaceName' when calling getIssuedAchievementsByMemberId");
    } // verify the required parameter 'memberId' is set


    if (memberId === undefined || memberId === null) {
      throw new Error("Missing the required parameter 'memberId' when calling getIssuedAchievementsByMemberId");
    }

    let pathParams = {
      'spaceName': spaceName,
      'memberId': memberId
    };
    let queryParams = {};
    let headerParams = {
      'X-API-KEY': X_API_KEY
    };
    let formParams = {};
    let authNames = ['apiKey'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = AchievementIssuedResponse;
    return this.apiClient.callApi('/api/v1/{spaceName}/members/{memberId}/achievements/issued', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }
  /**
   * Callback function to receive the result of the getIssuedAchievementsByMemberRefId operation.
   * @callback module:api/MemberAchievementsApi~getIssuedAchievementsByMemberRefIdCallback
   * @param {String} error Error message, if any.
   * @param {module:model/AchievementIssuedResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Returns achievements issued for a member
   * Returns an aggregated list of achieved achievement IDs for a specified member with a count that indicates the amount of times this achievement was issued for the specified memerId.  If there is no achievement data inside the events stream for a specified user no data returned and the value of the \"totalRecordsFound\" variable in metadata is 0.  `All the achievements, including deprecated/archived ones, that were issued to the member are displayed.`
   * @param {String} X_API_KEY Your unique API key
   * @param {String} spaceName This is the space name which is linked to the account
   * @param {String} memberRefId Reference Id of a Member
   * @param {module:api/MemberAchievementsApi~getIssuedAchievementsByMemberRefIdCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/AchievementIssuedResponse}
   */


  getIssuedAchievementsByMemberRefId(X_API_KEY, spaceName, memberRefId, callback) {
    let postBody = null; // verify the required parameter 'X_API_KEY' is set

    if (X_API_KEY === undefined || X_API_KEY === null) {
      throw new Error("Missing the required parameter 'X_API_KEY' when calling getIssuedAchievementsByMemberRefId");
    } // verify the required parameter 'spaceName' is set


    if (spaceName === undefined || spaceName === null) {
      throw new Error("Missing the required parameter 'spaceName' when calling getIssuedAchievementsByMemberRefId");
    } // verify the required parameter 'memberRefId' is set


    if (memberRefId === undefined || memberRefId === null) {
      throw new Error("Missing the required parameter 'memberRefId' when calling getIssuedAchievementsByMemberRefId");
    }

    let pathParams = {
      'spaceName': spaceName,
      'memberRefId': memberRefId
    };
    let queryParams = {};
    let headerParams = {
      'X-API-KEY': X_API_KEY
    };
    let formParams = {};
    let authNames = ['apiKey'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = AchievementIssuedResponse;
    return this.apiClient.callApi('/api/v1/{spaceName}/members/reference/{memberRefId}/achievements/issued', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }

}