/**
 * Ziqni Gateway Services
 * These are the Gateway services to be used by customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import ApiErrorResponse from '../model/ApiErrorResponse';
import Error from '../model/Error';
import MemberMessageResponse from '../model/MemberMessageResponse';
/**
* MemberMessages service.
* @module api/MemberMessagesApi
* @version 0.0.1
*/

export default class MemberMessagesApi {
  /**
  * Constructs a new MemberMessagesApi. 
  * @alias module:api/MemberMessagesApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }
  /**
   * Callback function to receive the result of the getMessageByIdAndMemberId operation.
   * @callback module:api/MemberMessagesApi~getMessageByIdAndMemberIdCallback
   * @param {String} error Error message, if any.
   * @param {module:model/MemberMessageResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Returns messages for a member by requested id
   * Returns member message details for the member and message ID specified. When a message with a status of New is accessed by this endpoint then the status of the message becomes Read automatically.
   * @param {String} X_API_KEY Your unique API key
   * @param {String} spaceName This is the space name which is linked to the account
   * @param {String} memberId Id of a Member
   * @param {String} id Unique identifier of the resource
   * @param {module:api/MemberMessagesApi~getMessageByIdAndMemberIdCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/MemberMessageResponse}
   */


  getMessageByIdAndMemberId(X_API_KEY, spaceName, memberId, id, callback) {
    let postBody = null; // verify the required parameter 'X_API_KEY' is set

    if (X_API_KEY === undefined || X_API_KEY === null) {
      throw new Error("Missing the required parameter 'X_API_KEY' when calling getMessageByIdAndMemberId");
    } // verify the required parameter 'spaceName' is set


    if (spaceName === undefined || spaceName === null) {
      throw new Error("Missing the required parameter 'spaceName' when calling getMessageByIdAndMemberId");
    } // verify the required parameter 'memberId' is set


    if (memberId === undefined || memberId === null) {
      throw new Error("Missing the required parameter 'memberId' when calling getMessageByIdAndMemberId");
    } // verify the required parameter 'id' is set


    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling getMessageByIdAndMemberId");
    }

    let pathParams = {
      'spaceName': spaceName,
      'memberId': memberId,
      'id': id
    };
    let queryParams = {};
    let headerParams = {
      'X-API-KEY': X_API_KEY
    };
    let formParams = {};
    let authNames = ['apiKey'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = MemberMessageResponse;
    return this.apiClient.callApi('/api/v1/{spaceName}/members/{memberId}/messages/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }
  /**
   * Callback function to receive the result of the getMessageByIdAndMemberRefId operation.
   * @callback module:api/MemberMessagesApi~getMessageByIdAndMemberRefIdCallback
   * @param {String} error Error message, if any.
   * @param {module:model/MemberMessageResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Returns messages for a member by requested id
   * Returns member message details for the member and message ID specified. When a message with a status of New is accessed by this endpoint then the status of the message becomes Read automatically.
   * @param {String} X_API_KEY Your unique API key
   * @param {String} spaceName This is the space name which is linked to the account
   * @param {String} memberRefId Reference Id of a Member
   * @param {String} id Unique identifier of the resource
   * @param {module:api/MemberMessagesApi~getMessageByIdAndMemberRefIdCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/MemberMessageResponse}
   */


  getMessageByIdAndMemberRefId(X_API_KEY, spaceName, memberRefId, id, callback) {
    let postBody = null; // verify the required parameter 'X_API_KEY' is set

    if (X_API_KEY === undefined || X_API_KEY === null) {
      throw new Error("Missing the required parameter 'X_API_KEY' when calling getMessageByIdAndMemberRefId");
    } // verify the required parameter 'spaceName' is set


    if (spaceName === undefined || spaceName === null) {
      throw new Error("Missing the required parameter 'spaceName' when calling getMessageByIdAndMemberRefId");
    } // verify the required parameter 'memberRefId' is set


    if (memberRefId === undefined || memberRefId === null) {
      throw new Error("Missing the required parameter 'memberRefId' when calling getMessageByIdAndMemberRefId");
    } // verify the required parameter 'id' is set


    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling getMessageByIdAndMemberRefId");
    }

    let pathParams = {
      'spaceName': spaceName,
      'memberRefId': memberRefId,
      'id': id
    };
    let queryParams = {};
    let headerParams = {
      'X-API-KEY': X_API_KEY
    };
    let formParams = {};
    let authNames = ['apiKey'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = MemberMessageResponse;
    return this.apiClient.callApi('/api/v1/{spaceName}/members/reference/{memberRefId}/messages/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }
  /**
   * Callback function to receive the result of the getMessagesByMemberId operation.
   * @callback module:api/MemberMessagesApi~getMessagesByMemberIdCallback
   * @param {String} error Error message, if any.
   * @param {module:model/MemberMessageResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Returns messages for a member by requested id
   * Returns a list of available messages for the specified memberId.  GET responses can be filtered out based on the member messages parameters to narrow down the results.
   * @param {String} X_API_KEY Your unique API key
   * @param {String} spaceName This is the space name which is linked to the account
   * @param {Object} opts Optional parameters
   * @param {Array.<String>} opts.id The unique identifiers of the resources
   * @param {String} opts.eventRefType Defines an event type attached to the message. Case sensitive Supported values - `CompetitionType` `ContestType` `AchievementType`  `?eventRefType=search_string`
   * @param {String} opts.eventReferenceId The reference ID of the event object. Case sensitive   `?eventReferenceId=search_string`
   * @param {String} opts.messageType The type of message of the member. Case sensitive Supported values - `Notification` `Achievement` `Reward`  `?messageType=search_string`
   * @param {String} opts.subject The title of the message. Case sensitive  `?subject=search_string`
   * @param {String} opts.prizeRewardEntityType Can be achievement or contest. Case sensitive Supported values - `Achievement` `Contest`  `?prize.reward.entityType=search_string`
   * @param {String} opts.prizeRewardEntityId Achievement id or Contest id. Case sensitive   `?prize.reward.entityId=search_string`
   * @param {String} opts.prizeRewardRewardRank If used in the context of contest this will associate with the rank of the leaderboard. Case sensitive  `?prize.reward.rewardRank=search_string`
   * @param {Number} opts.prizeRewardValue Numerical value of the reward that will be issued based on the reward type  `?prize.reward.value=search_double`
   * @param {String} opts.prizeRewardRewardType Reward type id   `?prize.reward.rewardType=search_string`
   * @param {Number} opts.prizeRewardDelay Delay of issuing a reward in minutes   `?prize.reward.delay=search_integer`
   * @param {Boolean} opts.prizeRewardMemberAcknowledgmentRequired To claim a reward   `?prize.reward.memberAcknowledgmentRequired=search_boolean`
   * @param {String} opts.prizeRewardMetadataKey Search by reward metadata key.   `?prize.reward.metadata.key=search_word`
   * @param {String} opts.prizeRewardMetadataValue Search by reward metadata value.   `?prize.reward.metadata.value=search_word`
   * @param {Date} opts.prizeRewardCreated ISO8601 timestamp for when a Reward was created. All records are stored in UTC time zone.   `?prize.reward.created=search_datetime`
   * @param {String} opts.prizeRewardId Search by reward id. Case sensitive   `?prize.reward.id=search_string`
   * @param {Boolean} opts.prizeClaimed Has the award been claimed or not.   `?prize.claimed=search_boolean`
   * @param {String} opts.prizeEntityType The type of entity this Award relates to. Case sensitive   Supported values -   `Contest` `Achievement`   `?prize.entityType=search_word`
   * @param {String} opts.prizeEntityId The Id of the contest or achievement related to this Award. Case sensitive   `?prize.entityId=search_string`
   * @param {Date} opts.prizeCreated ISO8601 timestamp for when a Reward was created. All records are stored in UTC time zone.   `?prize.created=search_datetime`
   * @param {String} opts.prizeId Award id. Case sensitive   `?prize.id=search_word`
   * @param {String} opts.status The status of the message. Case sensitive  Supported values - `New` `Read` `CollaborationRequest` `Actioned` `Claimed` `Expired` `Canceled` `Deprecated`   `?status=search_string`
   * @param {Date} opts.created Works with simple dates or date and time, eg:   `?created=<created-date>`
   * @param {String} opts.metadataKey Search by metadata key. Case sensitive.  `?metadata.key=search_word`
   * @param {String} opts.metadataValue Search by metadata value. Case sensitive.  `?metadata.value=search_word`
   * @param {module:api/MemberMessagesApi~getMessagesByMemberIdCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/MemberMessageResponse}
   */


  getMessagesByMemberId(X_API_KEY, spaceName, opts, callback) {
    opts = opts || {};
    let postBody = null; // verify the required parameter 'X_API_KEY' is set

    if (X_API_KEY === undefined || X_API_KEY === null) {
      throw new Error("Missing the required parameter 'X_API_KEY' when calling getMessagesByMemberId");
    } // verify the required parameter 'spaceName' is set


    if (spaceName === undefined || spaceName === null) {
      throw new Error("Missing the required parameter 'spaceName' when calling getMessagesByMemberId");
    }

    let pathParams = {
      'spaceName': spaceName
    };
    let queryParams = {
      'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
      'eventRefType': opts['eventRefType'],
      'eventReferenceId': opts['eventReferenceId'],
      'messageType': opts['messageType'],
      'subject': opts['subject'],
      'prize.reward.entityType': opts['prizeRewardEntityType'],
      'prize.reward.entityId': opts['prizeRewardEntityId'],
      'prize.reward.rewardRank': opts['prizeRewardRewardRank'],
      'prize.reward.value': opts['prizeRewardValue'],
      'prize.reward.rewardType': opts['prizeRewardRewardType'],
      'prize.reward.delay': opts['prizeRewardDelay'],
      'prize.reward.memberAcknowledgmentRequired': opts['prizeRewardMemberAcknowledgmentRequired'],
      'prize.reward.metadata.key': opts['prizeRewardMetadataKey'],
      'prize.reward.metadata.value': opts['prizeRewardMetadataValue'],
      'prize.reward.created': opts['prizeRewardCreated'],
      'prize.reward.id': opts['prizeRewardId'],
      'prize.claimed': opts['prizeClaimed'],
      'prize.entityType': opts['prizeEntityType'],
      'prize.entityId': opts['prizeEntityId'],
      'prize.created': opts['prizeCreated'],
      'prize.id': opts['prizeId'],
      'status': opts['status'],
      'created': opts['created'],
      'metadata.key': opts['metadataKey'],
      'metadata.value': opts['metadataValue']
    };
    let headerParams = {
      'X-API-KEY': X_API_KEY
    };
    let formParams = {};
    let authNames = ['apiKey'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = MemberMessageResponse;
    return this.apiClient.callApi('/api/v1/{spaceName}/members/{id}/messages', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }
  /**
   * Callback function to receive the result of the getMessagesByMemberRefId operation.
   * @callback module:api/MemberMessagesApi~getMessagesByMemberRefIdCallback
   * @param {String} error Error message, if any.
   * @param {module:model/MemberMessageResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Returns messages for a member by requested reference id
   * Returns a list of available messages for the specified member Reference ID.  GET responses can be filtered out based on the member messages parameters to narrow down the results.
   * @param {String} X_API_KEY Your unique API key
   * @param {String} spaceName This is the space name which is linked to the account
   * @param {String} memberRefId Reference Id of a Member
   * @param {Object} opts Optional parameters
   * @param {String} opts.eventRefType Defines an event type attached to the message. Case sensitive Supported values - `CompetitionType` `ContestType` `AchievementType`  `?eventRefType=search_string`
   * @param {String} opts.eventReferenceId The reference ID of the event object. Case sensitive   `?eventReferenceId=search_string`
   * @param {String} opts.messageType The type of message of the member. Case sensitive Supported values - `Notification` `Achievement` `Reward`  `?messageType=search_string`
   * @param {String} opts.subject The title of the message. Case sensitive  `?subject=search_string`
   * @param {String} opts.prizeRewardEntityType Can be achievement or contest. Case sensitive Supported values - `Achievement` `Contest`  `?prize.reward.entityType=search_string`
   * @param {String} opts.prizeRewardEntityId Achievement id or Contest id. Case sensitive   `?prize.reward.entityId=search_string`
   * @param {String} opts.prizeRewardRewardRank If used in the context of contest this will associate with the rank of the leaderboard. Case sensitive  `?prize.reward.rewardRank=search_string`
   * @param {Number} opts.prizeRewardValue Numerical value of the reward that will be issued based on the reward type  `?prize.reward.value=search_double`
   * @param {String} opts.prizeRewardRewardType Reward type id   `?prize.reward.rewardType=search_string`
   * @param {Number} opts.prizeRewardDelay Delay of issuing a reward in minutes   `?prize.reward.delay=search_integer`
   * @param {Boolean} opts.prizeRewardMemberAcknowledgmentRequired To claim a reward   `?prize.reward.memberAcknowledgmentRequired=search_boolean`
   * @param {String} opts.prizeRewardMetadataKey Search by reward metadata key.   `?prize.reward.metadata.key=search_word`
   * @param {String} opts.prizeRewardMetadataValue Search by reward metadata value.   `?prize.reward.metadata.value=search_word`
   * @param {Date} opts.prizeRewardCreated ISO8601 timestamp for when a Reward was created. All records are stored in UTC time zone.   `?prize.reward.created=search_datetime`
   * @param {String} opts.prizeRewardId Search by reward id. Case sensitive   `?prize.reward.id=search_string`
   * @param {Boolean} opts.prizeClaimed Has the award been claimed or not.   `?prize.claimed=search_boolean`
   * @param {String} opts.prizeEntityType The type of entity this Award relates to. Case sensitive   Supported values -   `Contest` `Achievement`   `?prize.entityType=search_word`
   * @param {String} opts.prizeEntityId The Id of the contest or achievement related to this Award. Case sensitive   `?prize.entityId=search_string`
   * @param {Date} opts.prizeCreated ISO8601 timestamp for when a Reward was created. All records are stored in UTC time zone.   `?prize.created=search_datetime`
   * @param {String} opts.prizeId Award id. Case sensitive   `?prize.id=search_word`
   * @param {String} opts.status The status of the message. Case sensitive  Supported values - `New` `Read` `CollaborationRequest` `Actioned` `Claimed` `Expired` `Canceled` `Deprecated`   `?status=search_string`
   * @param {Date} opts.created Works with simple dates or date and time, eg:   `?created=<created-date>`
   * @param {String} opts.metadataKey Search by metadata key. Case sensitive.  `?metadata.key=search_word`
   * @param {String} opts.metadataValue Search by metadata value. Case sensitive.  `?metadata.value=search_word`
   * @param {Array.<String>} opts.id The unique identifiers of the resources
   * @param {module:api/MemberMessagesApi~getMessagesByMemberRefIdCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/MemberMessageResponse}
   */


  getMessagesByMemberRefId(X_API_KEY, spaceName, memberRefId, opts, callback) {
    opts = opts || {};
    let postBody = null; // verify the required parameter 'X_API_KEY' is set

    if (X_API_KEY === undefined || X_API_KEY === null) {
      throw new Error("Missing the required parameter 'X_API_KEY' when calling getMessagesByMemberRefId");
    } // verify the required parameter 'spaceName' is set


    if (spaceName === undefined || spaceName === null) {
      throw new Error("Missing the required parameter 'spaceName' when calling getMessagesByMemberRefId");
    } // verify the required parameter 'memberRefId' is set


    if (memberRefId === undefined || memberRefId === null) {
      throw new Error("Missing the required parameter 'memberRefId' when calling getMessagesByMemberRefId");
    }

    let pathParams = {
      'spaceName': spaceName,
      'memberRefId': memberRefId
    };
    let queryParams = {
      'eventRefType': opts['eventRefType'],
      'eventReferenceId': opts['eventReferenceId'],
      'messageType': opts['messageType'],
      'subject': opts['subject'],
      'prize.reward.entityType': opts['prizeRewardEntityType'],
      'prize.reward.entityId': opts['prizeRewardEntityId'],
      'prize.reward.rewardRank': opts['prizeRewardRewardRank'],
      'prize.reward.value': opts['prizeRewardValue'],
      'prize.reward.rewardType': opts['prizeRewardRewardType'],
      'prize.reward.delay': opts['prizeRewardDelay'],
      'prize.reward.memberAcknowledgmentRequired': opts['prizeRewardMemberAcknowledgmentRequired'],
      'prize.reward.metadata.key': opts['prizeRewardMetadataKey'],
      'prize.reward.metadata.value': opts['prizeRewardMetadataValue'],
      'prize.reward.created': opts['prizeRewardCreated'],
      'prize.reward.id': opts['prizeRewardId'],
      'prize.claimed': opts['prizeClaimed'],
      'prize.entityType': opts['prizeEntityType'],
      'prize.entityId': opts['prizeEntityId'],
      'prize.created': opts['prizeCreated'],
      'prize.id': opts['prizeId'],
      'status': opts['status'],
      'created': opts['created'],
      'metadata.key': opts['metadataKey'],
      'metadata.value': opts['metadataValue'],
      'id': this.apiClient.buildCollectionParam(opts['id'], 'multi')
    };
    let headerParams = {
      'X-API-KEY': X_API_KEY
    };
    let formParams = {};
    let authNames = ['apiKey'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = MemberMessageResponse;
    return this.apiClient.callApi('/api/v1/{spaceName}/members/reference/{memberRefId}/messages/', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }

}