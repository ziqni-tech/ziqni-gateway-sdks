/**
 * Ziqni Gateway Services
 * These are the Gateway services to be used by customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
import ApiClient from './ApiClient';
import Achievement from './model/Achievement';
import AchievementAggregations from './model/AchievementAggregations';
import AchievementByIdResponse from './model/AchievementByIdResponse';
import AchievementIssuedCount from './model/AchievementIssuedCount';
import AchievementIssuedResponse from './model/AchievementIssuedResponse';
import AchievementResponse from './model/AchievementResponse';
import ApiErrorResponse from './model/ApiErrorResponse';
import Award from './model/Award';
import Competition from './model/Competition';
import CompetitionById from './model/CompetitionById';
import CompetitionByIdResponse from './model/CompetitionByIdResponse';
import CompetitionResponse from './model/CompetitionResponse';
import Contest from './model/Contest';
import ContestByIdResponse from './model/ContestByIdResponse';
import ContestResponse from './model/ContestResponse';
import DependantOn from './model/DependantOn';
import Error from './model/Error';
import Leaderboard from './model/Leaderboard';
import LeaderboardResponse from './model/LeaderboardResponse';
import MainConditionSet from './model/MainConditionSet';
import MainRule from './model/MainRule';
import Member from './model/Member';
import MemberAchievement from './model/MemberAchievement';
import MemberAchievementResponse from './model/MemberAchievementResponse';
import MemberAwardByIdResponse from './model/MemberAwardByIdResponse';
import MemberCompetition from './model/MemberCompetition';
import MemberCompetitionAllOf from './model/MemberCompetitionAllOf';
import MemberCompetitionResponse from './model/MemberCompetitionResponse';
import MemberMessage from './model/MemberMessage';
import MemberMessageResponse from './model/MemberMessageResponse';
import MemberOptin from './model/MemberOptin';
import MemberOptinResponse from './model/MemberOptinResponse';
import MemberResponse from './model/MemberResponse';
import Metadata from './model/Metadata';
import Product from './model/Product';
import ResponseMeta from './model/ResponseMeta';
import Reward from './model/Reward';
import RewardType from './model/RewardType';
import RuleSet from './model/RuleSet';
import Scheduling from './model/Scheduling';
import SseMemberMessage from './model/SseMemberMessage';
import SubConditionSet from './model/SubConditionSet';
import SubRule from './model/SubRule';
import Widget from './model/Widget';
import WidgetByIdResponse from './model/WidgetByIdResponse';
import WidgetReference from './model/WidgetReference';
import WidgetResponse from './model/WidgetResponse';
import AchievementsApi from './api/AchievementsApi';
import CompetitionsApi from './api/CompetitionsApi';
import ContestsApi from './api/ContestsApi';
import MemberAchievementsApi from './api/MemberAchievementsApi';
import MemberAwardsApi from './api/MemberAwardsApi';
import MemberCompetitionsApi from './api/MemberCompetitionsApi';
import MemberMessagesApi from './api/MemberMessagesApi';
import MembersApi from './api/MembersApi';
import SseApi from './api/SseApi';
import WidgetsApi from './api/WidgetsApi';
/**
* Client library for Ziqni Gateway API.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var @ZiqniTechGatewayApiClient = require('index'); // See note below*.
* var xxxSvc = new @ZiqniTechGatewayApiClient.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new @ZiqniTechGatewayApiClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new @ZiqniTechGatewayApiClient.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new @ZiqniTechGatewayApiClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 0.0.1
*/

export {
/**
 * The ApiClient constructor.
 * @property {module:ApiClient}
 */
ApiClient,
/**
 * The Achievement model constructor.
 * @property {module:model/Achievement}
 */
Achievement,
/**
 * The AchievementAggregations model constructor.
 * @property {module:model/AchievementAggregations}
 */
AchievementAggregations,
/**
 * The AchievementByIdResponse model constructor.
 * @property {module:model/AchievementByIdResponse}
 */
AchievementByIdResponse,
/**
 * The AchievementIssuedCount model constructor.
 * @property {module:model/AchievementIssuedCount}
 */
AchievementIssuedCount,
/**
 * The AchievementIssuedResponse model constructor.
 * @property {module:model/AchievementIssuedResponse}
 */
AchievementIssuedResponse,
/**
 * The AchievementResponse model constructor.
 * @property {module:model/AchievementResponse}
 */
AchievementResponse,
/**
 * The ApiErrorResponse model constructor.
 * @property {module:model/ApiErrorResponse}
 */
ApiErrorResponse,
/**
 * The Award model constructor.
 * @property {module:model/Award}
 */
Award,
/**
 * The Competition model constructor.
 * @property {module:model/Competition}
 */
Competition,
/**
 * The CompetitionById model constructor.
 * @property {module:model/CompetitionById}
 */
CompetitionById,
/**
 * The CompetitionByIdResponse model constructor.
 * @property {module:model/CompetitionByIdResponse}
 */
CompetitionByIdResponse,
/**
 * The CompetitionResponse model constructor.
 * @property {module:model/CompetitionResponse}
 */
CompetitionResponse,
/**
 * The Contest model constructor.
 * @property {module:model/Contest}
 */
Contest,
/**
 * The ContestByIdResponse model constructor.
 * @property {module:model/ContestByIdResponse}
 */
ContestByIdResponse,
/**
 * The ContestResponse model constructor.
 * @property {module:model/ContestResponse}
 */
ContestResponse,
/**
 * The DependantOn model constructor.
 * @property {module:model/DependantOn}
 */
DependantOn,
/**
 * The Error model constructor.
 * @property {module:model/Error}
 */
Error,
/**
 * The Leaderboard model constructor.
 * @property {module:model/Leaderboard}
 */
Leaderboard,
/**
 * The LeaderboardResponse model constructor.
 * @property {module:model/LeaderboardResponse}
 */
LeaderboardResponse,
/**
 * The MainConditionSet model constructor.
 * @property {module:model/MainConditionSet}
 */
MainConditionSet,
/**
 * The MainRule model constructor.
 * @property {module:model/MainRule}
 */
MainRule,
/**
 * The Member model constructor.
 * @property {module:model/Member}
 */
Member,
/**
 * The MemberAchievement model constructor.
 * @property {module:model/MemberAchievement}
 */
MemberAchievement,
/**
 * The MemberAchievementResponse model constructor.
 * @property {module:model/MemberAchievementResponse}
 */
MemberAchievementResponse,
/**
 * The MemberAwardByIdResponse model constructor.
 * @property {module:model/MemberAwardByIdResponse}
 */
MemberAwardByIdResponse,
/**
 * The MemberCompetition model constructor.
 * @property {module:model/MemberCompetition}
 */
MemberCompetition,
/**
 * The MemberCompetitionAllOf model constructor.
 * @property {module:model/MemberCompetitionAllOf}
 */
MemberCompetitionAllOf,
/**
 * The MemberCompetitionResponse model constructor.
 * @property {module:model/MemberCompetitionResponse}
 */
MemberCompetitionResponse,
/**
 * The MemberMessage model constructor.
 * @property {module:model/MemberMessage}
 */
MemberMessage,
/**
 * The MemberMessageResponse model constructor.
 * @property {module:model/MemberMessageResponse}
 */
MemberMessageResponse,
/**
 * The MemberOptin model constructor.
 * @property {module:model/MemberOptin}
 */
MemberOptin,
/**
 * The MemberOptinResponse model constructor.
 * @property {module:model/MemberOptinResponse}
 */
MemberOptinResponse,
/**
 * The MemberResponse model constructor.
 * @property {module:model/MemberResponse}
 */
MemberResponse,
/**
 * The Metadata model constructor.
 * @property {module:model/Metadata}
 */
Metadata,
/**
 * The Product model constructor.
 * @property {module:model/Product}
 */
Product,
/**
 * The ResponseMeta model constructor.
 * @property {module:model/ResponseMeta}
 */
ResponseMeta,
/**
 * The Reward model constructor.
 * @property {module:model/Reward}
 */
Reward,
/**
 * The RewardType model constructor.
 * @property {module:model/RewardType}
 */
RewardType,
/**
 * The RuleSet model constructor.
 * @property {module:model/RuleSet}
 */
RuleSet,
/**
 * The Scheduling model constructor.
 * @property {module:model/Scheduling}
 */
Scheduling,
/**
 * The SseMemberMessage model constructor.
 * @property {module:model/SseMemberMessage}
 */
SseMemberMessage,
/**
 * The SubConditionSet model constructor.
 * @property {module:model/SubConditionSet}
 */
SubConditionSet,
/**
 * The SubRule model constructor.
 * @property {module:model/SubRule}
 */
SubRule,
/**
 * The Widget model constructor.
 * @property {module:model/Widget}
 */
Widget,
/**
 * The WidgetByIdResponse model constructor.
 * @property {module:model/WidgetByIdResponse}
 */
WidgetByIdResponse,
/**
 * The WidgetReference model constructor.
 * @property {module:model/WidgetReference}
 */
WidgetReference,
/**
 * The WidgetResponse model constructor.
 * @property {module:model/WidgetResponse}
 */
WidgetResponse,
/**
* The AchievementsApi service constructor.
* @property {module:api/AchievementsApi}
*/
AchievementsApi,
/**
* The CompetitionsApi service constructor.
* @property {module:api/CompetitionsApi}
*/
CompetitionsApi,
/**
* The ContestsApi service constructor.
* @property {module:api/ContestsApi}
*/
ContestsApi,
/**
* The MemberAchievementsApi service constructor.
* @property {module:api/MemberAchievementsApi}
*/
MemberAchievementsApi,
/**
* The MemberAwardsApi service constructor.
* @property {module:api/MemberAwardsApi}
*/
MemberAwardsApi,
/**
* The MemberCompetitionsApi service constructor.
* @property {module:api/MemberCompetitionsApi}
*/
MemberCompetitionsApi,
/**
* The MemberMessagesApi service constructor.
* @property {module:api/MemberMessagesApi}
*/
MemberMessagesApi,
/**
* The MembersApi service constructor.
* @property {module:api/MembersApi}
*/
MembersApi,
/**
* The SseApi service constructor.
* @property {module:api/SseApi}
*/
SseApi,
/**
* The WidgetsApi service constructor.
* @property {module:api/WidgetsApi}
*/
WidgetsApi };