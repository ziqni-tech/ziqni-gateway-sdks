/**
 * Ziqni Gateway Services
 * These are the Gateway services to be used by customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';
import Reward from './Reward';
/**
 * The Contest model module.
 * @module model/Contest
 * @version 0.0.1
 */

class Contest {
  /**
   * Constructs a new <code>Contest</code>.
   * @alias module:model/Contest
   */
  constructor() {
    Contest.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  static initialize(obj) {}
  /**
   * Constructs a <code>Contest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Contest} obj Optional instance to populate.
   * @return {module:model/Contest} The populated <code>Contest</code> instance.
   */


  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Contest();

      if (data.hasOwnProperty('statusCode')) {
        obj['statusCode'] = ApiClient.convertToType(data['statusCode'], 'Number');
      }

      if (data.hasOwnProperty('number')) {
        obj['number'] = ApiClient.convertToType(data['number'], 'Number');
      }

      if (data.hasOwnProperty('actualStart')) {
        obj['actualStart'] = ApiClient.convertToType(data['actualStart'], 'Date');
      }

      if (data.hasOwnProperty('actualEnd')) {
        obj['actualEnd'] = ApiClient.convertToType(data['actualEnd'], 'Date');
      }

      if (data.hasOwnProperty('entransFromContest')) {
        obj['entransFromContest'] = ApiClient.convertToType(data['entransFromContest'], ['String']);
      }

      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }

      if (data.hasOwnProperty('label')) {
        obj['label'] = ApiClient.convertToType(data['label'], 'String');
      }

      if (data.hasOwnProperty('jsonClass')) {
        obj['jsonClass'] = ApiClient.convertToType(data['jsonClass'], 'String');
      }

      if (data.hasOwnProperty('rewards')) {
        obj['rewards'] = ApiClient.convertToType(data['rewards'], [Reward]);
      }

      if (data.hasOwnProperty('scheduledStart')) {
        obj['scheduledStart'] = ApiClient.convertToType(data['scheduledStart'], 'Date');
      }

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }

      if (data.hasOwnProperty('termsConditions')) {
        obj['termsConditions'] = ApiClient.convertToType(data['termsConditions'], 'String');
      }

      if (data.hasOwnProperty('status')) {
        obj['status'] = ApiClient.convertToType(data['status'], 'String');
      }

      if (data.hasOwnProperty('scheduledEnd')) {
        obj['scheduledEnd'] = ApiClient.convertToType(data['scheduledEnd'], 'Date');
      }

      if (data.hasOwnProperty('round')) {
        obj['round'] = ApiClient.convertToType(data['round'], 'Number');
      }

      if (data.hasOwnProperty('competitionId')) {
        obj['competitionId'] = ApiClient.convertToType(data['competitionId'], 'String');
      }

      if (data.hasOwnProperty('roundType')) {
        obj['roundType'] = ApiClient.convertToType(data['roundType'], 'String');
      }
    }

    return obj;
  }

}
/**
 * @member {Number} statusCode
 */


Contest.prototype['statusCode'] = undefined;
/**
 * @member {Number} number
 */

Contest.prototype['number'] = undefined;
/**
 * @member {Date} actualStart
 */

Contest.prototype['actualStart'] = undefined;
/**
 * @member {Date} actualEnd
 */

Contest.prototype['actualEnd'] = undefined;
/**
 * @member {Array.<String>} entransFromContest
 */

Contest.prototype['entransFromContest'] = undefined;
/**
 * @member {String} description
 */

Contest.prototype['description'] = undefined;
/**
 * @member {String} label
 */

Contest.prototype['label'] = undefined;
/**
 * @member {String} jsonClass
 */

Contest.prototype['jsonClass'] = undefined;
/**
 * @member {Array.<module:model/Reward>} rewards
 */

Contest.prototype['rewards'] = undefined;
/**
 * @member {Date} scheduledStart
 */

Contest.prototype['scheduledStart'] = undefined;
/**
 * @member {String} id
 */

Contest.prototype['id'] = undefined;
/**
 * @member {String} termsConditions
 */

Contest.prototype['termsConditions'] = undefined;
/**
 * @member {String} status
 */

Contest.prototype['status'] = undefined;
/**
 * @member {Date} scheduledEnd
 */

Contest.prototype['scheduledEnd'] = undefined;
/**
 * @member {Number} round
 */

Contest.prototype['round'] = undefined;
/**
 * @member {String} competitionId
 */

Contest.prototype['competitionId'] = undefined;
/**
 * @member {String} roundType
 */

Contest.prototype['roundType'] = undefined;
export default Contest;