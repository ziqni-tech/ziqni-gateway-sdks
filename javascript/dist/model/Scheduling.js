/**
 * Ziqni Gateway Services
 * These are the Gateway services to be used by customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';
/**
 * The Scheduling model module.
 * @module model/Scheduling
 * @version 0.0.1
 */

class Scheduling {
  /**
   * Constructs a new <code>Scheduling</code>.
   * @alias module:model/Scheduling
   */
  constructor() {
    Scheduling.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  static initialize(obj) {}
  /**
   * Constructs a <code>Scheduling</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Scheduling} obj Optional instance to populate.
   * @return {module:model/Scheduling} The populated <code>Scheduling</code> instance.
   */


  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Scheduling();

      if (data.hasOwnProperty('scheduleType')) {
        obj['scheduleType'] = ApiClient.convertToType(data['scheduleType'], 'String');
      }

      if (data.hasOwnProperty('scheduleOccurrencesLimit')) {
        obj['scheduleOccurrencesLimit'] = ApiClient.convertToType(data['scheduleOccurrencesLimit'], 'Number');
      }

      if (data.hasOwnProperty('every')) {
        obj['every'] = ApiClient.convertToType(data['every'], ['String']);
      }

      if (data.hasOwnProperty('startDate')) {
        obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
      }

      if (data.hasOwnProperty('endDate')) {
        obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
      }

      if (data.hasOwnProperty('onlyAggregateOnActiveDays')) {
        obj['onlyAggregateOnActiveDays'] = ApiClient.convertToType(data['onlyAggregateOnActiveDays'], 'Boolean');
      }
    }

    return obj;
  }

}
/**
 * @member {String} scheduleType
 */


Scheduling.prototype['scheduleType'] = undefined;
/**
 * @member {Number} scheduleOccurrencesLimit
 */

Scheduling.prototype['scheduleOccurrencesLimit'] = undefined;
/**
 * @member {Array.<String>} every
 */

Scheduling.prototype['every'] = undefined;
/**
 * @member {Date} startDate
 */

Scheduling.prototype['startDate'] = undefined;
/**
 * @member {Date} endDate
 */

Scheduling.prototype['endDate'] = undefined;
/**
 * @member {Boolean} onlyAggregateOnActiveDays
 */

Scheduling.prototype['onlyAggregateOnActiveDays'] = undefined;
export default Scheduling;