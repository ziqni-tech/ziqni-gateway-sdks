/*
 * Copyright (c) 2022. ZIQNI LTD registered in England and Wales, company registration number-09693684
 */

/*
 * Ziqni Gateway Services
 * These are the Gateway services to be used by customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.gateway.client.api;

import com.ziqni.gateway.client.ApiException;
import com.ziqni.gateway.client.api.MemberCompetitionsApi;
import com.ziqni.gateway.client.model.ApiErrorResponse;
import com.ziqni.gateway.client.model.Error;
import com.ziqni.gateway.client.model.MemberCompetitionResponse;
import com.ziqni.gateway.client.model.MemberOptinResponse;
import com.ziqni.gateway.client.model.MemberResponse;
import org.junit.jupiter.api.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;

/**
 * API tests for MemberCompetitionsApi
 */
public class MemberCompetitionsApiTest {

    private final MemberCompetitionsApi api = new MemberCompetitionsApi();

    
    /**
     * Returns details if the member has opted in
     *
     * Check if a member is opted into a Competition using a Member Id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkMemberOptinStatusTest() throws ApiException {
        String X_API_KEY = null;
        String spaceName = null;
        String memberId = null;
        String competitionId = null;
        CompletableFuture<MemberResponse> response = 
        api.checkMemberOptinStatus(X_API_KEY, spaceName, memberId, competitionId);
        
        // TODO: test validations
    }
    
    /**
     * Returns details if the member has opted in
     *
     * Check if a member is opted into a Competition using a Member Id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkMemberOptinStatusByRefIdTest() throws ApiException {
        String X_API_KEY = null;
        String spaceName = null;
        String memberRefId = null;
        String competitionId = null;
        CompletableFuture<MemberResponse> response = 
        api.checkMemberOptinStatusByRefId(X_API_KEY, spaceName, memberRefId, competitionId);
        
        // TODO: test validations
    }
    
    /**
     * Returns a list of competitions for a specific member
     *
     * Returns a list of competitions that the member can participate in (filtering will be done automatically for member group eligibility).  &#x60;The default behaviour of a response is that the competitions that are in Ready, Active or Finished state AND are eligible for ALL and eligible for the member Id requested will be returned unless queried otherwise.&#x60;  This assumes that competitions have first been created using the web console otherwise no data will be returned and the value of the \&quot;totalRecordsFound\&quot; variable in metadata will be 0.  GET responses can be filtered out based on the competition parameters to narrow down the results.  The denser the queryable URL the more precise the response will be.   Sort by fields is limited to: * created (DateTime of the competition creation) * label (the label of the competition) * scheduled start and end DateTime * actual start and end DateTime * status code that indicates the status of the competition  Example:  ?_sortByFields&#x3D;created  ?_sortByFields&#x3D;label  ?_sortByFields&#x3D;options.scheduledDates.start  ?_sortByFields&#x3D;options.scheduledDates.end  ?_sortByFields&#x3D;options.actualDates.start  ?_sortByFields&#x3D;options.actualDates.end  ?_sortByFields&#x3D;statusCode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCompetitionsByMemberRefIdTest() throws ApiException {
        String X_API_KEY = null;
        String spaceName = null;
        String memberRefId = null;
        List<String> id = null;
        Integer limit = null;
        Integer skip = null;
        String sortByFields = null;
        String include = null;
        String lang = null;
        String equal = null;
        String equalEqual = null;
        String lessThanEqual = null;
        String lessThanEqualEqual = null;
        String equalGreaterThan = null;
        String equalEqualGreaterThan = null;
        String optionsActualDatesEnd = null;
        String actualEnd = null;
        String productsProductRefId = null;
        String productRefId = null;
        String optionsProductsMetadataKey = null;
        String optionsProductsMetadataValue = null;
        String optionsProductsProductRefId = null;
        String status = null;
        Integer statusCode = null;
        List<String> optionsLimitEntrantsTo = null;
        List<String> limitEntrantsTo = null;
        String optionsScheduledDatesStart = null;
        String scheduledStart = null;
        String optionsScheduledDatesEnd = null;
        String scheduledEnd = null;
        String optionsActualDatesStart = null;
        String actualStart = null;
        CompletableFuture<MemberCompetitionResponse> response = 
        api.getCompetitionsByMemberRefId(X_API_KEY, spaceName, memberRefId, id, limit, skip, sortByFields, include, lang, equal, equalEqual, lessThanEqual, lessThanEqualEqual, equalGreaterThan, equalEqualGreaterThan, optionsActualDatesEnd, actualEnd, productsProductRefId, productRefId, optionsProductsMetadataKey, optionsProductsMetadataValue, optionsProductsProductRefId, status, statusCode, optionsLimitEntrantsTo, limitEntrantsTo, optionsScheduledDatesStart, scheduledStart, optionsScheduledDatesEnd, scheduledEnd, optionsActualDatesStart, actualStart);
        
        // TODO: test validations
    }
    
    /**
     * Returns a list of competitions for a specific member
     *
     * Returns a list of competitions that the member can participate in (filtering will be done automatically for member group eligibility).  &#x60;The default behaviour of a response is that the competitions that are in Ready, Active or Finished state AND are eligible for ALL and eligible for the member Id requested will be returned unless queried otherwise.&#x60;  This assumes that competitions have first been created using the web console otherwise no data will be returned and the value of the \&quot;totalRecordsFound\&quot; variable in metadata will be 0.  GET responses can be filtered out based on the competition parameters to narrow down the results.  The denser the queryable URL the more precise the response will be.   Sort by fields is limited to: * created (DateTime of the competition creation) * label (the label of the competition) * scheduled start and end DateTime * actual start and end DateTime * status code that indicates the status of the competition  Example:  ?_sortByFields&#x3D;created  ?_sortByFields&#x3D;label  ?_sortByFields&#x3D;options.scheduledDates.start  ?_sortByFields&#x3D;options.scheduledDates.end  ?_sortByFields&#x3D;options.actualDates.start  ?_sortByFields&#x3D;options.actualDates.end  ?_sortByFields&#x3D;statusCode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMemberCompetitionsTest() throws ApiException {
        String X_API_KEY = null;
        String spaceName = null;
        String memberId = null;
        List<String> id = null;
        Integer limit = null;
        Integer skip = null;
        String sortByFields = null;
        String include = null;
        String lang = null;
        String equal = null;
        String equalEqual = null;
        String lessThanEqual = null;
        String lessThanEqualEqual = null;
        String equalGreaterThan = null;
        String equalEqualGreaterThan = null;
        String optionsActualDatesEnd = null;
        String actualEnd = null;
        String productsProductRefId = null;
        String productRefId = null;
        String optionsProductsMetadataKey = null;
        String optionsProductsMetadataValue = null;
        String optionsProductsProductRefId = null;
        String status = null;
        Integer statusCode = null;
        List<String> optionsLimitEntrantsTo = null;
        List<String> limitEntrantsTo = null;
        String optionsScheduledDatesStart = null;
        String scheduledStart = null;
        String optionsScheduledDatesEnd = null;
        String scheduledEnd = null;
        String optionsActualDatesStart = null;
        String actualStart = null;
        CompletableFuture<MemberCompetitionResponse> response = 
        api.getMemberCompetitions(X_API_KEY, spaceName, memberId, id, limit, skip, sortByFields, include, lang, equal, equalEqual, lessThanEqual, lessThanEqualEqual, equalGreaterThan, equalEqualGreaterThan, optionsActualDatesEnd, actualEnd, productsProductRefId, productRefId, optionsProductsMetadataKey, optionsProductsMetadataValue, optionsProductsProductRefId, status, statusCode, optionsLimitEntrantsTo, limitEntrantsTo, optionsScheduledDatesStart, scheduledStart, optionsScheduledDatesEnd, scheduledEnd, optionsActualDatesStart, actualStart);
        
        // TODO: test validations
    }
    
    /**
     * Opt in a member in a competition
     *
     * Allows a member to opt-in into an existing Competition using an existing Member Id.  Use &#x60;/api/v1/:space/members/:memberId/competition/:competitionId/entrants&#x60; or &#x60;/api/v1/:space/members/reference/:memberRefId/competition/:competitionId/entrants&#x60;  API endpoint to determine if a Member is already Opted in to a Competition.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void optinMemberToCompetitionTest() throws ApiException {
        String X_API_KEY = null;
        String spaceName = null;
        String memberId = null;
        String competitionId = null;
        CompletableFuture<MemberOptinResponse> response = 
        api.optinMemberToCompetition(X_API_KEY, spaceName, memberId, competitionId);
        
        // TODO: test validations
    }
    
    /**
     * Opt in a member in a competition
     *
     * Allows a member to opt-in into an existing Competition using an existing Member Id.  Use &#x60;/api/v1/:space/members/:memberId/competition/:competitionId/entrants&#x60; or &#x60;/api/v1/:space/members/reference/:memberRefId/competition/:competitionId/entrants&#x60;  API endpoint to determine if a Member is already Opted in to a Competition.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void optinMemberToCompetitionByRefIdTest() throws ApiException {
        String X_API_KEY = null;
        String spaceName = null;
        String memberRefId = null;
        String competitionId = null;
        CompletableFuture<MemberOptinResponse> response = 
        api.optinMemberToCompetitionByRefId(X_API_KEY, spaceName, memberRefId, competitionId);
        
        // TODO: test validations
    }
    
}
