/*
 * Copyright (c) 2022. ZIQNI LTD registered in England and Wales, company registration number-09693684
 */

/*
 * Ziqni Gateway Services
 * These are the Gateway services to be used by customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.gateway.client.api;

import com.ziqni.gateway.client.ApiException;
import com.ziqni.gateway.client.api.MemberAchievementsApi;
import com.ziqni.gateway.client.model.AchievementIssuedResponse;
import com.ziqni.gateway.client.model.ApiErrorResponse;
import com.ziqni.gateway.client.model.Error;
import com.ziqni.gateway.client.model.MemberAchievementResponse;
import org.junit.jupiter.api.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;

/**
 * API tests for MemberAchievementsApi
 */

public class MemberAchievementsApiTest {

    private final MemberAchievementsApi api = new MemberAchievementsApi();

    
    /**
     * Returns specific achievement for a member
     *
     * Returns a progression list of achieved percentages based on the configured achievements rules for a specified member.  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAchievementByIdAndMemberIdTest() throws ApiException {
        String X_API_KEY = null;
        String spaceName = null;
        String memberId = null;
        String achievementId = null;
        CompletableFuture<MemberAchievementResponse> response = 
        api.getAchievementByIdAndMemberId(X_API_KEY, spaceName, memberId, achievementId);
        
        // TODO: test validations
    }
    
    /**
     * Returns specific achievement for a member
     *
     * Returns a progression list of achieved percentages based on the configured achievements rules for a specified member.  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAchievementByIdAndMemberRefIdTest() throws ApiException {
        String X_API_KEY = null;
        String spaceName = null;
        String memberRefId = null;
        String achievementId = null;
        CompletableFuture<MemberAchievementResponse> response = 
        api.getAchievementByIdAndMemberRefId(X_API_KEY, spaceName, memberRefId, achievementId);
        
        // TODO: test validations
    }
    
    /**
     * Returns achievements for a member
     *
     * Returns a progression list of achieved percentages based on the configured achievements rules for a specified member.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAchievementsByMemberIdTest() throws ApiException {
        String X_API_KEY = null;
        String spaceName = null;
        String memberId = null;
        List<String> id = null;
        CompletableFuture<MemberAchievementResponse> response = 
        api.getAchievementsByMemberId(X_API_KEY, spaceName, memberId, id);
        
        // TODO: test validations
    }
    
    /**
     * Returns achievements for a member
     *
     * Returns a progression list of achieved percentages based on the configured achievements rules for a specified member.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAchievementsByMemberRefIdTest() throws ApiException {
        String X_API_KEY = null;
        String spaceName = null;
        String memberRefId = null;
        List<String> id = null;
        CompletableFuture<MemberAchievementResponse> response = 
        api.getAchievementsByMemberRefId(X_API_KEY, spaceName, memberRefId, id);
        
        // TODO: test validations
    }
    
    /**
     * Returns achievements issued for a member
     *
     * Returns an aggregated list of achieved achievement IDs for a specified member with a count that indicates the amount of times this achievement was issued for the specified memerId.  If there is no achievement data inside the events stream for a specified user no data returned and the value of the \&quot;totalRecordsFound\&quot; variable in metadata is 0.  &#x60;All the achievements, including deprecated/archived ones, that were issued to the member are displayed.&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIssuedAchievementsByMemberIdTest() throws ApiException {
        String X_API_KEY = null;
        String spaceName = null;
        String memberId = null;
        CompletableFuture<AchievementIssuedResponse> response = 
        api.getIssuedAchievementsByMemberId(X_API_KEY, spaceName, memberId);
        
        // TODO: test validations
    }
    
    /**
     * Returns achievements issued for a member
     *
     * Returns an aggregated list of achieved achievement IDs for a specified member with a count that indicates the amount of times this achievement was issued for the specified memerId.  If there is no achievement data inside the events stream for a specified user no data returned and the value of the \&quot;totalRecordsFound\&quot; variable in metadata is 0.  &#x60;All the achievements, including deprecated/archived ones, that were issued to the member are displayed.&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIssuedAchievementsByMemberRefIdTest() throws ApiException {
        String X_API_KEY = null;
        String spaceName = null;
        String memberRefId = null;
        CompletableFuture<AchievementIssuedResponse> response = 
        api.getIssuedAchievementsByMemberRefId(X_API_KEY, spaceName, memberRefId);
        
        // TODO: test validations
    }
    
}
