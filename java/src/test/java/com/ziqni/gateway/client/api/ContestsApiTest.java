/*
 * Copyright (c) 2022. ZIQNI LTD registered in England and Wales, company registration number-09693684
 */

/*
 * Ziqni Gateway Services
 * These are the Gateway services to be used by customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.gateway.client.api;

import com.ziqni.gateway.client.ApiException;
import com.ziqni.gateway.client.api.ContestsApi;
import com.ziqni.gateway.client.model.ApiErrorResponse;
import com.ziqni.gateway.client.model.ContestByIdResponse;
import com.ziqni.gateway.client.model.ContestResponse;
import com.ziqni.gateway.client.model.Error;
import com.ziqni.gateway.client.model.LeaderboardResponse;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;

/**
 * API tests for ContestsApi
 */
public class ContestsApiTest {

    private final ContestsApi api = new ContestsApi();

    
    /**
     * Returns the contest by requested id
     *
     * Returns a contest and rewards attached to it by request.  This assumes that a competition and contests have first been created using the web console. Otherwise no data is returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContestByIdTest() throws ApiException {
        String X_API_KEY = null;
        String spaceName = null;
        String id = null;
        String include = null;
        String lang = null;
        String uomKey = null;
        CompletableFuture<ContestByIdResponse> response = 
        api.getContestById(X_API_KEY, spaceName, id, include, lang, uomKey);
        
        // TODO: test validations
    }
    
    /**
     * Returns a list of contests
     *
     * Returns a simplified list of available Contests and rewards attached to it.  * The response of a contest is different than the competitions. While competitions give a response of only Ready, Active and Finished competitions states the contest gives all the contests that are in cancelled state as well.  This assumes that the competitions and contests have first been created using the web console otherwise no data will be returned and the value of the \&quot;totalRecordsFound\&quot; variable in metadata will be 0.  GET responses can be filtered out based on the contests parameters to narrow down the results.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContestsTest() throws ApiException {
        String X_API_KEY = null;
        String spaceName = null;
        List<String> id = null;
        Integer limit = null;
        Integer skip = null;
        String sortByFields = null;
        String include = null;
        String lang = null;
        String equal = null;
        String equalEqual = null;
        String lessThanEqual = null;
        String lessThanEqualEqual = null;
        String equalGreaterThan = null;
        String equalEqualGreaterThan = null;
        String uomKey = null;
        List<String> competitionId = null;
        Integer number = null;
        Integer round = null;
        Integer optionsNumberOfEntrantsMaximum = null;
        Integer optionsNumberOfEntrantsMinimum = null;
        Boolean optionsIsPublic = null;
        Boolean optionsAutoStart = null;
        Boolean optionsAutoStop = null;
        String optionsActualDatesEnd = null;
        String optionsScheduledDatesStart = null;
        String optionsScheduledDatesEnd = null;
        String optionsActualDatesStart = null;
        Boolean optionsStrategiesRankingStrategyScoreDesc = null;
        Boolean optionsStrategiesRankingStrategyTimeDesc = null;
        Boolean optionsStrategiesRankingStrategyScoreFirst = null;
        Boolean optionsStrategiesRankingStrategyIgnoreTime = null;
        Boolean optionsStrategiesRankingStrategyIgnoreScore = null;
        Integer optionsStrategiesScoringStrategyLimitUpdatesTo = null;
        Double optionsStrategiesScoringStrategySumBestXOf = null;
        Long optionsStrategiesScoringStrategyLastUpdateTimeStamp = null;
        Long optionsStrategiesScoringStrategyRecordTimeWhenSumReaches = null;
        String optionsStrategiesStrategyType = null;
        OffsetDateTime created = null;
        CompletableFuture<ContestResponse> response = 
        api.getContests(X_API_KEY, spaceName, id, limit, skip, sortByFields, include, lang, equal, equalEqual, lessThanEqual, lessThanEqualEqual, equalGreaterThan, equalEqualGreaterThan, uomKey, competitionId, number, round, optionsNumberOfEntrantsMaximum, optionsNumberOfEntrantsMinimum, optionsIsPublic, optionsAutoStart, optionsAutoStop, optionsActualDatesEnd, optionsScheduledDatesStart, optionsScheduledDatesEnd, optionsActualDatesStart, optionsStrategiesRankingStrategyScoreDesc, optionsStrategiesRankingStrategyTimeDesc, optionsStrategiesRankingStrategyScoreFirst, optionsStrategiesRankingStrategyIgnoreTime, optionsStrategiesRankingStrategyIgnoreScore, optionsStrategiesScoringStrategyLimitUpdatesTo, optionsStrategiesScoringStrategySumBestXOf, optionsStrategiesScoringStrategyLastUpdateTimeStamp, optionsStrategiesScoringStrategyRecordTimeWhenSumReaches, optionsStrategiesStrategyType, created);
        
        // TODO: test validations
    }
    
    /**
     * Returns the leaderboard for a by contest id
     *
     * Leaderboards, also referred to as score board, give you aggregates of rank and points by member.  Leaderboards are calculated on a near real-time basis. The rate data is received by CompetitionLabs is directly proportional to the update of member positions on the leaderboard.  GET responses can be queried based on generic query parameters (_limit, memberId) to filter results appropriately.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLeaderboardByContestIdTest() throws ApiException {
        String X_API_KEY = null;
        String spaceName = null;
        String id = null;
        String memberId = null;
        Integer limit = null;
        CompletableFuture<LeaderboardResponse> response = 
        api.getLeaderboardByContestId(X_API_KEY, spaceName, id, memberId, limit);
        
        // TODO: test validations
    }
    
}
