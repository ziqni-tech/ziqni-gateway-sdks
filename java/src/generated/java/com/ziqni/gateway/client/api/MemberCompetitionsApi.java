/*
 * Ziqni Gateway Services
 * These are the Gateway services to be used by customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ziqni.gateway.client.api;

import com.ziqni.gateway.client.ApiClient;
import com.ziqni.gateway.client.ApiException;
import com.ziqni.gateway.client.ApiResponse;
import com.ziqni.gateway.client.Pair;

import com.ziqni.gateway.client.model.ApiErrorResponse;
import com.ziqni.gateway.client.model.Error;
import com.ziqni.gateway.client.model.MemberCompetitionResponse;
import com.ziqni.gateway.client.model.MemberOptinResponse;
import com.ziqni.gateway.client.model.MemberResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MemberCompetitionsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;

  public MemberCompetitionsApi() {
    this(new ApiClient());
  }

  public MemberCompetitionsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  private ApiException getApiException(String operationId, HttpResponse<String> response) {
    String message = formatExceptionMessage(operationId, response.statusCode(), response.body());
    return new ApiException(response.statusCode(), message, response.headers(), response.body());
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Returns details if the member has opted in
   * Check if a member is opted into a Competition using a Member Id.
   * @param X_API_KEY Your unique API key (required)
   * @param spaceName This is the space name which is linked to the account (required)
   * @param memberId Id of a Member (required)
   * @param competitionId Id of a competition (required)
   * @return CompletableFuture&lt;MemberResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<MemberResponse> checkMemberOptinStatus(String X_API_KEY, String spaceName, String memberId, String competitionId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = checkMemberOptinStatusRequestBuilder(X_API_KEY, spaceName, memberId, competitionId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("checkMemberOptinStatus", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MemberResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns details if the member has opted in
   * Check if a member is opted into a Competition using a Member Id.
   * @param X_API_KEY Your unique API key (required)
   * @param spaceName This is the space name which is linked to the account (required)
   * @param memberId Id of a Member (required)
   * @param competitionId Id of a competition (required)
   * @return CompletableFuture&lt;ApiResponse&lt;MemberResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<MemberResponse>> checkMemberOptinStatusWithHttpInfo(String X_API_KEY, String spaceName, String memberId, String competitionId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = checkMemberOptinStatusRequestBuilder(X_API_KEY, spaceName, memberId, competitionId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("checkMemberOptinStatus", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<MemberResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MemberResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder checkMemberOptinStatusRequestBuilder(String X_API_KEY, String spaceName, String memberId, String competitionId) throws ApiException {
    // verify the required parameter 'X_API_KEY' is set
    if (X_API_KEY == null) {
      throw new ApiException(400, "Missing the required parameter 'X_API_KEY' when calling checkMemberOptinStatus");
    }
    // verify the required parameter 'spaceName' is set
    if (spaceName == null) {
      throw new ApiException(400, "Missing the required parameter 'spaceName' when calling checkMemberOptinStatus");
    }
    // verify the required parameter 'memberId' is set
    if (memberId == null) {
      throw new ApiException(400, "Missing the required parameter 'memberId' when calling checkMemberOptinStatus");
    }
    // verify the required parameter 'competitionId' is set
    if (competitionId == null) {
      throw new ApiException(400, "Missing the required parameter 'competitionId' when calling checkMemberOptinStatus");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/{spaceName}/members/{memberId}/competitions/{competitionId}/entrants"
        .replace("{spaceName}", ApiClient.urlEncode(spaceName.toString()))
        .replace("{memberId}", ApiClient.urlEncode(memberId.toString()))
        .replace("{competitionId}", ApiClient.urlEncode(competitionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (X_API_KEY != null) {
      localVarRequestBuilder.header("X-API-KEY", X_API_KEY.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns details if the member has opted in
   * Check if a member is opted into a Competition using a Member Id.
   * @param X_API_KEY Your unique API key (required)
   * @param spaceName This is the space name which is linked to the account (required)
   * @param memberRefId Reference Id of a Member (required)
   * @param competitionId Id of a competition (required)
   * @return CompletableFuture&lt;MemberResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<MemberResponse> checkMemberOptinStatusByRefId(String X_API_KEY, String spaceName, String memberRefId, String competitionId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = checkMemberOptinStatusByRefIdRequestBuilder(X_API_KEY, spaceName, memberRefId, competitionId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("checkMemberOptinStatusByRefId", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MemberResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns details if the member has opted in
   * Check if a member is opted into a Competition using a Member Id.
   * @param X_API_KEY Your unique API key (required)
   * @param spaceName This is the space name which is linked to the account (required)
   * @param memberRefId Reference Id of a Member (required)
   * @param competitionId Id of a competition (required)
   * @return CompletableFuture&lt;ApiResponse&lt;MemberResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<MemberResponse>> checkMemberOptinStatusByRefIdWithHttpInfo(String X_API_KEY, String spaceName, String memberRefId, String competitionId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = checkMemberOptinStatusByRefIdRequestBuilder(X_API_KEY, spaceName, memberRefId, competitionId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("checkMemberOptinStatusByRefId", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<MemberResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MemberResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder checkMemberOptinStatusByRefIdRequestBuilder(String X_API_KEY, String spaceName, String memberRefId, String competitionId) throws ApiException {
    // verify the required parameter 'X_API_KEY' is set
    if (X_API_KEY == null) {
      throw new ApiException(400, "Missing the required parameter 'X_API_KEY' when calling checkMemberOptinStatusByRefId");
    }
    // verify the required parameter 'spaceName' is set
    if (spaceName == null) {
      throw new ApiException(400, "Missing the required parameter 'spaceName' when calling checkMemberOptinStatusByRefId");
    }
    // verify the required parameter 'memberRefId' is set
    if (memberRefId == null) {
      throw new ApiException(400, "Missing the required parameter 'memberRefId' when calling checkMemberOptinStatusByRefId");
    }
    // verify the required parameter 'competitionId' is set
    if (competitionId == null) {
      throw new ApiException(400, "Missing the required parameter 'competitionId' when calling checkMemberOptinStatusByRefId");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/{spaceName}/members/reference/{memberRefId}/competitions/{competitionId}/entrants"
        .replace("{spaceName}", ApiClient.urlEncode(spaceName.toString()))
        .replace("{memberRefId}", ApiClient.urlEncode(memberRefId.toString()))
        .replace("{competitionId}", ApiClient.urlEncode(competitionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (X_API_KEY != null) {
      localVarRequestBuilder.header("X-API-KEY", X_API_KEY.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of competitions for a specific member
   * Returns a list of competitions that the member can participate in (filtering will be done automatically for member group eligibility).  &#x60;The default behaviour of a response is that the competitions that are in Ready, Active or Finished state AND are eligible for ALL and eligible for the member Id requested will be returned unless queried otherwise.&#x60;  This assumes that competitions have first been created using the web console otherwise no data will be returned and the value of the \&quot;totalRecordsFound\&quot; variable in metadata will be 0.  GET responses can be filtered out based on the competition parameters to narrow down the results.  The denser the queryable URL the more precise the response will be.   Sort by fields is limited to: * created (DateTime of the competition creation) * label (the label of the competition) * scheduled start and end DateTime * actual start and end DateTime * status code that indicates the status of the competition  Example:  ?_sortByFields&#x3D;created  ?_sortByFields&#x3D;label  ?_sortByFields&#x3D;options.scheduledDates.start  ?_sortByFields&#x3D;options.scheduledDates.end  ?_sortByFields&#x3D;options.actualDates.start  ?_sortByFields&#x3D;options.actualDates.end  ?_sortByFields&#x3D;statusCode
   * @param X_API_KEY Your unique API key (required)
   * @param spaceName This is the space name which is linked to the account (required)
   * @param memberRefId Reference Id of a Member (required)
   * @param id The unique identifiers of the resources (optional
   * @param limit Used for pagination. Setting the limit value will cause the system to limit the number of records returned to the specified number. (optional)
   * @param skip Used for pagination. Setting the skip value will cause the system to return records from the specified position onwards.  EXAMPLE below returns the results for requested resource without skipping any records  &lt;url&gt;?_limit&#x3D;5&amp;_skip&#x3D;0  EXAMPLE below returns the results for requested resource after skipping the first 10 records  &#x60;&lt;url&gt;?_limit&#x3D;5&amp;_skip&#x3D;10&#x60; (optional)
   * @param sortByFields Enables sorting of results based on fields and order specified.  Supported ordering  &#x60;asc, desc&#x60;   Usage syntax  &#x60;_sortByFields&#x3D;&lt;field-to-sort-on&gt;:&lt;order&gt;&#x60;   EXAMPLE The query will return data sorted by transactionTimestamp in descending order  &#x60;&lt;url&gt;?_sortByFields&#x3D;transactionTimestamp:desc,created:asc&#x60; (optional)
   * @param include Allows you to add the products and metadata objects to the response. Case sensitive (optional)
   * @param lang Allows you to preview the label, description and terms and conditions of the competition in a requested language. Case sensitive (optional)
   * @param equal Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  Single equals sign usage has two types of applications in formulating API queries - * assigning values to predefined/reserved parameters like _skip, _limit, _lang, _sortByFields, _uomKey, _include * assigning values to model based parameters (Example name, transactionTimestamp, options.limitEntrantsTo etc.)  EXAMPLE below returns all competitions in \&quot;Ready\&quot; or \&quot;Active\&quot; state that have either a group1 or group2 entrant limitation  &#x60;&lt;url&gt;/competitions?_skip&#x3D;0&amp;_limit&#x3D;100&amp;status&#x3D;Ready,Active&amp;options.limitEntrantsTo&#x3D;group1,group2&#x60; (optional)
   * @param equalEqual Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  Single equals sign usage has two types of applications in formulating API queries - * assigning values to predefined/reserved parameters like _skip, _limit, _lang, _sortByFields, _uomKey, _include * assigning values to model based parameters (Example name, transactionTimestamp, options.limitEntrantsTo etc.)  EXAMPLE below returns all competitions in \&quot;Ready\&quot; state only that have either a group1 or group2 entrant limitation  &#x60;&lt;url&gt;/competitions?_skip&#x3D;0&amp;_limit&#x3D;100&amp;status&#x3D;&#x3D;Ready&amp;options.limitEntrantsTo&#x3D;group1,group2&#x60; (optional)
   * @param lessThanEqual Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  The less than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or less than the specified field value.  EXAMPLE below returns all the data which was uploaded before 17:38 9th of February 2021 (defaults to 20 results).  &#x60;&lt;url&gt;events?transactionTimestamp&lt;&#x3D;2021-02-09T17:38:08.328&#x60; (optional)
   * @param lessThanEqualEqual Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  The less than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or less than the specified field value.  EXAMPLE below returns all the data which were uploaded before 17:38 9th of February 2021 (defaults to 20 results).  &#x60;&lt;url&gt;events?transactionTimestamp&lt;&#x3D;&#x3D;2021-02-09T17:38:08.328&#x60; (optional)
   * @param equalGreaterThan Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  The greater than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or greater than the specified field value.  EXAMPLE below returns all the data which were uploaded after 17:38 9th of February 2021 (defaults to 20 results).  &#x60;&lt;url&gt;events?transactionTimestamp&#x3D;&gt;2021-02-09T17:38:08.328&#x60; (optional)
   * @param equalEqualGreaterThan Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  The greater than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or greater than the specified field value.  EXAMPLE below returns all the data which were uploaded after 17:38 9th of February 2021 (defaults to 20 results).  &#x60;&lt;url&gt;events?transactionTimestamp&#x3D;&#x3D;&gt;2021-02-09T17:38:08.328&#x60; (optional)
   * @param optionsActualDatesEnd Start and end time of when it actually ended  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?options.actualDates.end&#x3D;search_DateTime&#x60; (optional)
   * @param actualEnd Start and end time of when it actually ended  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?actualEnd&#x3D;search_DateTime&#x60; (optional)
   * @param productsProductRefId Search by products reference Id and products metadata. Case sensitive.  &#x60;?products.productRefId&#x3D;search_word&#x60; (optional)
   * @param productRefId Search by products reference Id and products metadata. Case sensitive.  &#x60;?productRefId&#x3D;search_word&#x60; (optional)
   * @param optionsProductsMetadataKey Search by products reference Id and products metadata. Case sensitive.  &#x60;?options.products.metadata.key&#x3D;search_word&#x60; (optional)
   * @param optionsProductsMetadataValue Search by products reference Id and products metadata. Case sensitive.  &#x60;?options.products.metadata.value&#x3D;search_word&#x60; (optional)
   * @param optionsProductsProductRefId Search by products reference Id and products metadata. Case sensitive.  &#x60;?options.products.productRefId&#x3D;search_word&#x60; (optional)
   * @param status The status of the competition. Case sensitive. Supported values - &#x60;Unknown&#x60; &#x60;Deleting&#x60; &#x60;Deleted&#x60; &#x60;Draft&#x60; &#x60;Template&#x60; &#x60;Preparing&#x60; &#x60;Ready&#x60; &#x60;Starting&#x60; &#x60;Active&#x60; &#x60;Finishing&#x60; &#x60;Finished&#x60; &#x60;Cancelling&#x60; &#x60;Cancelled&#x60; (optional)
   * @param statusCode The status code of the competition. Numbers only.  Supported values:  -3 (Unknown)  -2 (Deleting)  -1 (Deleted)  0 (Draft)  1 (Template)  2 (Preparing)  3 (Ready)  4 (Starting)  5 (Active)  6 (Finishing)  7 (Finished)  8 (Cancelling)  9 (Cancelled)  (optional)
   * @param optionsLimitEntrantsTo The value is the member group that you are searching for that is eligible to participate. Case sensitive.  &#x60;?options.limitEntrantsTo&#x3D;search_word&#x60; (optional
   * @param limitEntrantsTo The value is the member group that you are searching for that is eligible to participate. Case sensitive.  &#x60;?limitEntrantsTo&#x3D;search_word&#x60; (optional
   * @param optionsScheduledDatesStart Start and end time of when it was scheduled  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?options.scheduledDates.start&#x3D;search_DateTime&#x60; (optional)
   * @param scheduledStart Start and end time of when it was scheduled  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?scheduledStart&#x3D;search_DateTime&#x60; (optional)
   * @param optionsScheduledDatesEnd Start and end time of when it was scheduled  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?options.scheduledDates.end&#x3D;search_DateTime&#x60; (optional)
   * @param scheduledEnd Start and end time of when it was scheduled  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?scheduledStart&#x3D;search_DateTime&#x60; (optional)
   * @param optionsActualDatesStart Start and end time of when it actually started  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?options.actualDates.start&#x3D;search_DateTime&#x60; (optional)
   * @param actualStart Start and end time of when it actually started  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?actualStart&#x3D;search_DateTime&#x60; (optional)
   * @return CompletableFuture&lt;MemberCompetitionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<MemberCompetitionResponse> getCompetitionsByMemberRefId(String X_API_KEY, String spaceName, String memberRefId, List<String> id, Integer limit, Integer skip, String sortByFields, String include, String lang, String equal, String equalEqual, String lessThanEqual, String lessThanEqualEqual, String equalGreaterThan, String equalEqualGreaterThan, String optionsActualDatesEnd, String actualEnd, String productsProductRefId, String productRefId, String optionsProductsMetadataKey, String optionsProductsMetadataValue, String optionsProductsProductRefId, String status, Integer statusCode, List<String> optionsLimitEntrantsTo, List<String> limitEntrantsTo, String optionsScheduledDatesStart, String scheduledStart, String optionsScheduledDatesEnd, String scheduledEnd, String optionsActualDatesStart, String actualStart) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = getCompetitionsByMemberRefIdRequestBuilder(X_API_KEY, spaceName, memberRefId, id, limit, skip, sortByFields, include, lang, equal, equalEqual, lessThanEqual, lessThanEqualEqual, equalGreaterThan, equalEqualGreaterThan, optionsActualDatesEnd, actualEnd, productsProductRefId, productRefId, optionsProductsMetadataKey, optionsProductsMetadataValue, optionsProductsProductRefId, status, statusCode, optionsLimitEntrantsTo, limitEntrantsTo, optionsScheduledDatesStart, scheduledStart, optionsScheduledDatesEnd, scheduledEnd, optionsActualDatesStart, actualStart);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("getCompetitionsByMemberRefId", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MemberCompetitionResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of competitions for a specific member
   * Returns a list of competitions that the member can participate in (filtering will be done automatically for member group eligibility).  &#x60;The default behaviour of a response is that the competitions that are in Ready, Active or Finished state AND are eligible for ALL and eligible for the member Id requested will be returned unless queried otherwise.&#x60;  This assumes that competitions have first been created using the web console otherwise no data will be returned and the value of the \&quot;totalRecordsFound\&quot; variable in metadata will be 0.  GET responses can be filtered out based on the competition parameters to narrow down the results.  The denser the queryable URL the more precise the response will be.   Sort by fields is limited to: * created (DateTime of the competition creation) * label (the label of the competition) * scheduled start and end DateTime * actual start and end DateTime * status code that indicates the status of the competition  Example:  ?_sortByFields&#x3D;created  ?_sortByFields&#x3D;label  ?_sortByFields&#x3D;options.scheduledDates.start  ?_sortByFields&#x3D;options.scheduledDates.end  ?_sortByFields&#x3D;options.actualDates.start  ?_sortByFields&#x3D;options.actualDates.end  ?_sortByFields&#x3D;statusCode
   * @param X_API_KEY Your unique API key (required)
   * @param spaceName This is the space name which is linked to the account (required)
   * @param memberRefId Reference Id of a Member (required)
   * @param id The unique identifiers of the resources (optional
   * @param limit Used for pagination. Setting the limit value will cause the system to limit the number of records returned to the specified number. (optional)
   * @param skip Used for pagination. Setting the skip value will cause the system to return records from the specified position onwards.  EXAMPLE below returns the results for requested resource without skipping any records  &lt;url&gt;?_limit&#x3D;5&amp;_skip&#x3D;0  EXAMPLE below returns the results for requested resource after skipping the first 10 records  &#x60;&lt;url&gt;?_limit&#x3D;5&amp;_skip&#x3D;10&#x60; (optional)
   * @param sortByFields Enables sorting of results based on fields and order specified.  Supported ordering  &#x60;asc, desc&#x60;   Usage syntax  &#x60;_sortByFields&#x3D;&lt;field-to-sort-on&gt;:&lt;order&gt;&#x60;   EXAMPLE The query will return data sorted by transactionTimestamp in descending order  &#x60;&lt;url&gt;?_sortByFields&#x3D;transactionTimestamp:desc,created:asc&#x60; (optional)
   * @param include Allows you to add the products and metadata objects to the response. Case sensitive (optional)
   * @param lang Allows you to preview the label, description and terms and conditions of the competition in a requested language. Case sensitive (optional)
   * @param equal Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  Single equals sign usage has two types of applications in formulating API queries - * assigning values to predefined/reserved parameters like _skip, _limit, _lang, _sortByFields, _uomKey, _include * assigning values to model based parameters (Example name, transactionTimestamp, options.limitEntrantsTo etc.)  EXAMPLE below returns all competitions in \&quot;Ready\&quot; or \&quot;Active\&quot; state that have either a group1 or group2 entrant limitation  &#x60;&lt;url&gt;/competitions?_skip&#x3D;0&amp;_limit&#x3D;100&amp;status&#x3D;Ready,Active&amp;options.limitEntrantsTo&#x3D;group1,group2&#x60; (optional)
   * @param equalEqual Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  Single equals sign usage has two types of applications in formulating API queries - * assigning values to predefined/reserved parameters like _skip, _limit, _lang, _sortByFields, _uomKey, _include * assigning values to model based parameters (Example name, transactionTimestamp, options.limitEntrantsTo etc.)  EXAMPLE below returns all competitions in \&quot;Ready\&quot; state only that have either a group1 or group2 entrant limitation  &#x60;&lt;url&gt;/competitions?_skip&#x3D;0&amp;_limit&#x3D;100&amp;status&#x3D;&#x3D;Ready&amp;options.limitEntrantsTo&#x3D;group1,group2&#x60; (optional)
   * @param lessThanEqual Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  The less than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or less than the specified field value.  EXAMPLE below returns all the data which was uploaded before 17:38 9th of February 2021 (defaults to 20 results).  &#x60;&lt;url&gt;events?transactionTimestamp&lt;&#x3D;2021-02-09T17:38:08.328&#x60; (optional)
   * @param lessThanEqualEqual Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  The less than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or less than the specified field value.  EXAMPLE below returns all the data which were uploaded before 17:38 9th of February 2021 (defaults to 20 results).  &#x60;&lt;url&gt;events?transactionTimestamp&lt;&#x3D;&#x3D;2021-02-09T17:38:08.328&#x60; (optional)
   * @param equalGreaterThan Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  The greater than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or greater than the specified field value.  EXAMPLE below returns all the data which were uploaded after 17:38 9th of February 2021 (defaults to 20 results).  &#x60;&lt;url&gt;events?transactionTimestamp&#x3D;&gt;2021-02-09T17:38:08.328&#x60; (optional)
   * @param equalEqualGreaterThan Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  The greater than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or greater than the specified field value.  EXAMPLE below returns all the data which were uploaded after 17:38 9th of February 2021 (defaults to 20 results).  &#x60;&lt;url&gt;events?transactionTimestamp&#x3D;&#x3D;&gt;2021-02-09T17:38:08.328&#x60; (optional)
   * @param optionsActualDatesEnd Start and end time of when it actually ended  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?options.actualDates.end&#x3D;search_DateTime&#x60; (optional)
   * @param actualEnd Start and end time of when it actually ended  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?actualEnd&#x3D;search_DateTime&#x60; (optional)
   * @param productsProductRefId Search by products reference Id and products metadata. Case sensitive.  &#x60;?products.productRefId&#x3D;search_word&#x60; (optional)
   * @param productRefId Search by products reference Id and products metadata. Case sensitive.  &#x60;?productRefId&#x3D;search_word&#x60; (optional)
   * @param optionsProductsMetadataKey Search by products reference Id and products metadata. Case sensitive.  &#x60;?options.products.metadata.key&#x3D;search_word&#x60; (optional)
   * @param optionsProductsMetadataValue Search by products reference Id and products metadata. Case sensitive.  &#x60;?options.products.metadata.value&#x3D;search_word&#x60; (optional)
   * @param optionsProductsProductRefId Search by products reference Id and products metadata. Case sensitive.  &#x60;?options.products.productRefId&#x3D;search_word&#x60; (optional)
   * @param status The status of the competition. Case sensitive. Supported values - &#x60;Unknown&#x60; &#x60;Deleting&#x60; &#x60;Deleted&#x60; &#x60;Draft&#x60; &#x60;Template&#x60; &#x60;Preparing&#x60; &#x60;Ready&#x60; &#x60;Starting&#x60; &#x60;Active&#x60; &#x60;Finishing&#x60; &#x60;Finished&#x60; &#x60;Cancelling&#x60; &#x60;Cancelled&#x60; (optional)
   * @param statusCode The status code of the competition. Numbers only.  Supported values:  -3 (Unknown)  -2 (Deleting)  -1 (Deleted)  0 (Draft)  1 (Template)  2 (Preparing)  3 (Ready)  4 (Starting)  5 (Active)  6 (Finishing)  7 (Finished)  8 (Cancelling)  9 (Cancelled)  (optional)
   * @param optionsLimitEntrantsTo The value is the member group that you are searching for that is eligible to participate. Case sensitive.  &#x60;?options.limitEntrantsTo&#x3D;search_word&#x60; (optional
   * @param limitEntrantsTo The value is the member group that you are searching for that is eligible to participate. Case sensitive.  &#x60;?limitEntrantsTo&#x3D;search_word&#x60; (optional
   * @param optionsScheduledDatesStart Start and end time of when it was scheduled  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?options.scheduledDates.start&#x3D;search_DateTime&#x60; (optional)
   * @param scheduledStart Start and end time of when it was scheduled  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?scheduledStart&#x3D;search_DateTime&#x60; (optional)
   * @param optionsScheduledDatesEnd Start and end time of when it was scheduled  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?options.scheduledDates.end&#x3D;search_DateTime&#x60; (optional)
   * @param scheduledEnd Start and end time of when it was scheduled  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?scheduledStart&#x3D;search_DateTime&#x60; (optional)
   * @param optionsActualDatesStart Start and end time of when it actually started  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?options.actualDates.start&#x3D;search_DateTime&#x60; (optional)
   * @param actualStart Start and end time of when it actually started  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?actualStart&#x3D;search_DateTime&#x60; (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;MemberCompetitionResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<MemberCompetitionResponse>> getCompetitionsByMemberRefIdWithHttpInfo(String X_API_KEY, String spaceName, String memberRefId, List<String> id, Integer limit, Integer skip, String sortByFields, String include, String lang, String equal, String equalEqual, String lessThanEqual, String lessThanEqualEqual, String equalGreaterThan, String equalEqualGreaterThan, String optionsActualDatesEnd, String actualEnd, String productsProductRefId, String productRefId, String optionsProductsMetadataKey, String optionsProductsMetadataValue, String optionsProductsProductRefId, String status, Integer statusCode, List<String> optionsLimitEntrantsTo, List<String> limitEntrantsTo, String optionsScheduledDatesStart, String scheduledStart, String optionsScheduledDatesEnd, String scheduledEnd, String optionsActualDatesStart, String actualStart) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = getCompetitionsByMemberRefIdRequestBuilder(X_API_KEY, spaceName, memberRefId, id, limit, skip, sortByFields, include, lang, equal, equalEqual, lessThanEqual, lessThanEqualEqual, equalGreaterThan, equalEqualGreaterThan, optionsActualDatesEnd, actualEnd, productsProductRefId, productRefId, optionsProductsMetadataKey, optionsProductsMetadataValue, optionsProductsProductRefId, status, statusCode, optionsLimitEntrantsTo, limitEntrantsTo, optionsScheduledDatesStart, scheduledStart, optionsScheduledDatesEnd, scheduledEnd, optionsActualDatesStart, actualStart);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("getCompetitionsByMemberRefId", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<MemberCompetitionResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MemberCompetitionResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder getCompetitionsByMemberRefIdRequestBuilder(String X_API_KEY, String spaceName, String memberRefId, List<String> id, Integer limit, Integer skip, String sortByFields, String include, String lang, String equal, String equalEqual, String lessThanEqual, String lessThanEqualEqual, String equalGreaterThan, String equalEqualGreaterThan, String optionsActualDatesEnd, String actualEnd, String productsProductRefId, String productRefId, String optionsProductsMetadataKey, String optionsProductsMetadataValue, String optionsProductsProductRefId, String status, Integer statusCode, List<String> optionsLimitEntrantsTo, List<String> limitEntrantsTo, String optionsScheduledDatesStart, String scheduledStart, String optionsScheduledDatesEnd, String scheduledEnd, String optionsActualDatesStart, String actualStart) throws ApiException {
    // verify the required parameter 'X_API_KEY' is set
    if (X_API_KEY == null) {
      throw new ApiException(400, "Missing the required parameter 'X_API_KEY' when calling getCompetitionsByMemberRefId");
    }
    // verify the required parameter 'spaceName' is set
    if (spaceName == null) {
      throw new ApiException(400, "Missing the required parameter 'spaceName' when calling getCompetitionsByMemberRefId");
    }
    // verify the required parameter 'memberRefId' is set
    if (memberRefId == null) {
      throw new ApiException(400, "Missing the required parameter 'memberRefId' when calling getCompetitionsByMemberRefId");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/{spaceName}/members/reference/{memberRefId}/competitions"
        .replace("{spaceName}", ApiClient.urlEncode(spaceName.toString()))
        .replace("{memberRefId}", ApiClient.urlEncode(memberRefId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_skip", skip));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_sortByFields", sortByFields));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_include", include));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_lang", lang));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("&#x3D;", equal));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("&#x3D;&#x3D;", equalEqual));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("&lt;&#x3D;", lessThanEqual));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("&lt;&#x3D;&#x3D;", lessThanEqualEqual));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("&#x3D;&gt;", equalGreaterThan));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("&#x3D;&#x3D;&gt;", equalEqualGreaterThan));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.actualDates.end", optionsActualDatesEnd));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("actualEnd", actualEnd));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("products.productRefId", productsProductRefId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("productRefId", productRefId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.products.metadata.key", optionsProductsMetadataKey));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.products.metadata.value", optionsProductsMetadataValue));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.products.productRefId", optionsProductsProductRefId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status", status));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("statusCode", statusCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "options.limitEntrantsTo", optionsLimitEntrantsTo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "limitEntrantsTo", limitEntrantsTo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.scheduledDates.start", optionsScheduledDatesStart));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("scheduledStart", scheduledStart));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.scheduledDates.end", optionsScheduledDatesEnd));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("scheduledEnd", scheduledEnd));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.actualDates.start", optionsActualDatesStart));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("actualStart", actualStart));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    if (X_API_KEY != null) {
      localVarRequestBuilder.header("X-API-KEY", X_API_KEY.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of competitions for a specific member
   * Returns a list of competitions that the member can participate in (filtering will be done automatically for member group eligibility).  &#x60;The default behaviour of a response is that the competitions that are in Ready, Active or Finished state AND are eligible for ALL and eligible for the member Id requested will be returned unless queried otherwise.&#x60;  This assumes that competitions have first been created using the web console otherwise no data will be returned and the value of the \&quot;totalRecordsFound\&quot; variable in metadata will be 0.  GET responses can be filtered out based on the competition parameters to narrow down the results.  The denser the queryable URL the more precise the response will be.   Sort by fields is limited to: * created (DateTime of the competition creation) * label (the label of the competition) * scheduled start and end DateTime * actual start and end DateTime * status code that indicates the status of the competition  Example:  ?_sortByFields&#x3D;created  ?_sortByFields&#x3D;label  ?_sortByFields&#x3D;options.scheduledDates.start  ?_sortByFields&#x3D;options.scheduledDates.end  ?_sortByFields&#x3D;options.actualDates.start  ?_sortByFields&#x3D;options.actualDates.end  ?_sortByFields&#x3D;statusCode
   * @param X_API_KEY Your unique API key (required)
   * @param spaceName This is the space name which is linked to the account (required)
   * @param memberId Id of a Member (required)
   * @param id The unique identifiers of the resources (optional
   * @param limit Used for pagination. Setting the limit value will cause the system to limit the number of records returned to the specified number. (optional)
   * @param skip Used for pagination. Setting the skip value will cause the system to return records from the specified position onwards.  EXAMPLE below returns the results for requested resource without skipping any records  &lt;url&gt;?_limit&#x3D;5&amp;_skip&#x3D;0  EXAMPLE below returns the results for requested resource after skipping the first 10 records  &#x60;&lt;url&gt;?_limit&#x3D;5&amp;_skip&#x3D;10&#x60; (optional)
   * @param sortByFields Enables sorting of results based on fields and order specified.  Supported ordering  &#x60;asc, desc&#x60;   Usage syntax  &#x60;_sortByFields&#x3D;&lt;field-to-sort-on&gt;:&lt;order&gt;&#x60;   EXAMPLE The query will return data sorted by transactionTimestamp in descending order  &#x60;&lt;url&gt;?_sortByFields&#x3D;transactionTimestamp:desc,created:asc&#x60; (optional)
   * @param include Allows you to add the products and metadata objects to the response. Case sensitive (optional)
   * @param lang Allows you to preview the label, description and terms and conditions of the competition in a requested language. Case sensitive (optional)
   * @param equal Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  Single equals sign usage has two types of applications in formulating API queries - * assigning values to predefined/reserved parameters like _skip, _limit, _lang, _sortByFields, _uomKey, _include * assigning values to model based parameters (Example name, transactionTimestamp, options.limitEntrantsTo etc.)  EXAMPLE below returns all competitions in \&quot;Ready\&quot; or \&quot;Active\&quot; state that have either a group1 or group2 entrant limitation  &#x60;&lt;url&gt;/competitions?_skip&#x3D;0&amp;_limit&#x3D;100&amp;status&#x3D;Ready,Active&amp;options.limitEntrantsTo&#x3D;group1,group2&#x60; (optional)
   * @param equalEqual Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  Single equals sign usage has two types of applications in formulating API queries - * assigning values to predefined/reserved parameters like _skip, _limit, _lang, _sortByFields, _uomKey, _include * assigning values to model based parameters (Example name, transactionTimestamp, options.limitEntrantsTo etc.)  EXAMPLE below returns all competitions in \&quot;Ready\&quot; state only that have either a group1 or group2 entrant limitation  &#x60;&lt;url&gt;/competitions?_skip&#x3D;0&amp;_limit&#x3D;100&amp;status&#x3D;&#x3D;Ready&amp;options.limitEntrantsTo&#x3D;group1,group2&#x60; (optional)
   * @param lessThanEqual Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  The less than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or less than the specified field value.  EXAMPLE below returns all the data which was uploaded before 17:38 9th of February 2021 (defaults to 20 results).  &#x60;&lt;url&gt;events?transactionTimestamp&lt;&#x3D;2021-02-09T17:38:08.328&#x60; (optional)
   * @param lessThanEqualEqual Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  The less than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or less than the specified field value.  EXAMPLE below returns all the data which were uploaded before 17:38 9th of February 2021 (defaults to 20 results).  &#x60;&lt;url&gt;events?transactionTimestamp&lt;&#x3D;&#x3D;2021-02-09T17:38:08.328&#x60; (optional)
   * @param equalGreaterThan Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  The greater than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or greater than the specified field value.  EXAMPLE below returns all the data which were uploaded after 17:38 9th of February 2021 (defaults to 20 results).  &#x60;&lt;url&gt;events?transactionTimestamp&#x3D;&gt;2021-02-09T17:38:08.328&#x60; (optional)
   * @param equalEqualGreaterThan Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  The greater than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or greater than the specified field value.  EXAMPLE below returns all the data which were uploaded after 17:38 9th of February 2021 (defaults to 20 results).  &#x60;&lt;url&gt;events?transactionTimestamp&#x3D;&#x3D;&gt;2021-02-09T17:38:08.328&#x60; (optional)
   * @param optionsActualDatesEnd Start and end time of when it actually ended  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?options.actualDates.end&#x3D;search_DateTime&#x60; (optional)
   * @param actualEnd Start and end time of when it actually ended  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?actualEnd&#x3D;search_DateTime&#x60; (optional)
   * @param productsProductRefId Search by products reference Id and products metadata. Case sensitive.  &#x60;?products.productRefId&#x3D;search_word&#x60; (optional)
   * @param productRefId Search by products reference Id and products metadata. Case sensitive.  &#x60;?productRefId&#x3D;search_word&#x60; (optional)
   * @param optionsProductsMetadataKey Search by products reference Id and products metadata. Case sensitive.  &#x60;?options.products.metadata.key&#x3D;search_word&#x60; (optional)
   * @param optionsProductsMetadataValue Search by products reference Id and products metadata. Case sensitive.  &#x60;?options.products.metadata.value&#x3D;search_word&#x60; (optional)
   * @param optionsProductsProductRefId Search by products reference Id and products metadata. Case sensitive.  &#x60;?options.products.productRefId&#x3D;search_word&#x60; (optional)
   * @param status The status of the competition. Case sensitive. Supported values - &#x60;Unknown&#x60; &#x60;Deleting&#x60; &#x60;Deleted&#x60; &#x60;Draft&#x60; &#x60;Template&#x60; &#x60;Preparing&#x60; &#x60;Ready&#x60; &#x60;Starting&#x60; &#x60;Active&#x60; &#x60;Finishing&#x60; &#x60;Finished&#x60; &#x60;Cancelling&#x60; &#x60;Cancelled&#x60; (optional)
   * @param statusCode The status code of the competition. Numbers only.  Supported values:  -3 (Unknown)  -2 (Deleting)  -1 (Deleted)  0 (Draft)  1 (Template)  2 (Preparing)  3 (Ready)  4 (Starting)  5 (Active)  6 (Finishing)  7 (Finished)  8 (Cancelling)  9 (Cancelled)  (optional)
   * @param optionsLimitEntrantsTo The value is the member group that you are searching for that is eligible to participate. Case sensitive.  &#x60;?options.limitEntrantsTo&#x3D;search_word&#x60; (optional
   * @param limitEntrantsTo The value is the member group that you are searching for that is eligible to participate. Case sensitive.  &#x60;?limitEntrantsTo&#x3D;search_word&#x60; (optional
   * @param optionsScheduledDatesStart Start and end time of when it was scheduled  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?options.scheduledDates.start&#x3D;search_DateTime&#x60; (optional)
   * @param scheduledStart Start and end time of when it was scheduled  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?scheduledStart&#x3D;search_DateTime&#x60; (optional)
   * @param optionsScheduledDatesEnd Start and end time of when it was scheduled  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?options.scheduledDates.end&#x3D;search_DateTime&#x60; (optional)
   * @param scheduledEnd Start and end time of when it was scheduled  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?scheduledStart&#x3D;search_DateTime&#x60; (optional)
   * @param optionsActualDatesStart Start and end time of when it actually started  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?options.actualDates.start&#x3D;search_DateTime&#x60; (optional)
   * @param actualStart Start and end time of when it actually started  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?actualStart&#x3D;search_DateTime&#x60; (optional)
   * @return CompletableFuture&lt;MemberCompetitionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<MemberCompetitionResponse> getMemberCompetitions(String X_API_KEY, String spaceName, String memberId, List<String> id, Integer limit, Integer skip, String sortByFields, String include, String lang, String equal, String equalEqual, String lessThanEqual, String lessThanEqualEqual, String equalGreaterThan, String equalEqualGreaterThan, String optionsActualDatesEnd, String actualEnd, String productsProductRefId, String productRefId, String optionsProductsMetadataKey, String optionsProductsMetadataValue, String optionsProductsProductRefId, String status, Integer statusCode, List<String> optionsLimitEntrantsTo, List<String> limitEntrantsTo, String optionsScheduledDatesStart, String scheduledStart, String optionsScheduledDatesEnd, String scheduledEnd, String optionsActualDatesStart, String actualStart) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = getMemberCompetitionsRequestBuilder(X_API_KEY, spaceName, memberId, id, limit, skip, sortByFields, include, lang, equal, equalEqual, lessThanEqual, lessThanEqualEqual, equalGreaterThan, equalEqualGreaterThan, optionsActualDatesEnd, actualEnd, productsProductRefId, productRefId, optionsProductsMetadataKey, optionsProductsMetadataValue, optionsProductsProductRefId, status, statusCode, optionsLimitEntrantsTo, limitEntrantsTo, optionsScheduledDatesStart, scheduledStart, optionsScheduledDatesEnd, scheduledEnd, optionsActualDatesStart, actualStart);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("getMemberCompetitions", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MemberCompetitionResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of competitions for a specific member
   * Returns a list of competitions that the member can participate in (filtering will be done automatically for member group eligibility).  &#x60;The default behaviour of a response is that the competitions that are in Ready, Active or Finished state AND are eligible for ALL and eligible for the member Id requested will be returned unless queried otherwise.&#x60;  This assumes that competitions have first been created using the web console otherwise no data will be returned and the value of the \&quot;totalRecordsFound\&quot; variable in metadata will be 0.  GET responses can be filtered out based on the competition parameters to narrow down the results.  The denser the queryable URL the more precise the response will be.   Sort by fields is limited to: * created (DateTime of the competition creation) * label (the label of the competition) * scheduled start and end DateTime * actual start and end DateTime * status code that indicates the status of the competition  Example:  ?_sortByFields&#x3D;created  ?_sortByFields&#x3D;label  ?_sortByFields&#x3D;options.scheduledDates.start  ?_sortByFields&#x3D;options.scheduledDates.end  ?_sortByFields&#x3D;options.actualDates.start  ?_sortByFields&#x3D;options.actualDates.end  ?_sortByFields&#x3D;statusCode
   * @param X_API_KEY Your unique API key (required)
   * @param spaceName This is the space name which is linked to the account (required)
   * @param memberId Id of a Member (required)
   * @param id The unique identifiers of the resources (optional
   * @param limit Used for pagination. Setting the limit value will cause the system to limit the number of records returned to the specified number. (optional)
   * @param skip Used for pagination. Setting the skip value will cause the system to return records from the specified position onwards.  EXAMPLE below returns the results for requested resource without skipping any records  &lt;url&gt;?_limit&#x3D;5&amp;_skip&#x3D;0  EXAMPLE below returns the results for requested resource after skipping the first 10 records  &#x60;&lt;url&gt;?_limit&#x3D;5&amp;_skip&#x3D;10&#x60; (optional)
   * @param sortByFields Enables sorting of results based on fields and order specified.  Supported ordering  &#x60;asc, desc&#x60;   Usage syntax  &#x60;_sortByFields&#x3D;&lt;field-to-sort-on&gt;:&lt;order&gt;&#x60;   EXAMPLE The query will return data sorted by transactionTimestamp in descending order  &#x60;&lt;url&gt;?_sortByFields&#x3D;transactionTimestamp:desc,created:asc&#x60; (optional)
   * @param include Allows you to add the products and metadata objects to the response. Case sensitive (optional)
   * @param lang Allows you to preview the label, description and terms and conditions of the competition in a requested language. Case sensitive (optional)
   * @param equal Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  Single equals sign usage has two types of applications in formulating API queries - * assigning values to predefined/reserved parameters like _skip, _limit, _lang, _sortByFields, _uomKey, _include * assigning values to model based parameters (Example name, transactionTimestamp, options.limitEntrantsTo etc.)  EXAMPLE below returns all competitions in \&quot;Ready\&quot; or \&quot;Active\&quot; state that have either a group1 or group2 entrant limitation  &#x60;&lt;url&gt;/competitions?_skip&#x3D;0&amp;_limit&#x3D;100&amp;status&#x3D;Ready,Active&amp;options.limitEntrantsTo&#x3D;group1,group2&#x60; (optional)
   * @param equalEqual Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  Single equals sign usage has two types of applications in formulating API queries - * assigning values to predefined/reserved parameters like _skip, _limit, _lang, _sortByFields, _uomKey, _include * assigning values to model based parameters (Example name, transactionTimestamp, options.limitEntrantsTo etc.)  EXAMPLE below returns all competitions in \&quot;Ready\&quot; state only that have either a group1 or group2 entrant limitation  &#x60;&lt;url&gt;/competitions?_skip&#x3D;0&amp;_limit&#x3D;100&amp;status&#x3D;&#x3D;Ready&amp;options.limitEntrantsTo&#x3D;group1,group2&#x60; (optional)
   * @param lessThanEqual Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  The less than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or less than the specified field value.  EXAMPLE below returns all the data which was uploaded before 17:38 9th of February 2021 (defaults to 20 results).  &#x60;&lt;url&gt;events?transactionTimestamp&lt;&#x3D;2021-02-09T17:38:08.328&#x60; (optional)
   * @param lessThanEqualEqual Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  The less than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or less than the specified field value.  EXAMPLE below returns all the data which were uploaded before 17:38 9th of February 2021 (defaults to 20 results).  &#x60;&lt;url&gt;events?transactionTimestamp&lt;&#x3D;&#x3D;2021-02-09T17:38:08.328&#x60; (optional)
   * @param equalGreaterThan Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  The greater than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or greater than the specified field value.  EXAMPLE below returns all the data which were uploaded after 17:38 9th of February 2021 (defaults to 20 results).  &#x60;&lt;url&gt;events?transactionTimestamp&#x3D;&gt;2021-02-09T17:38:08.328&#x60; (optional)
   * @param equalEqualGreaterThan Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  The greater than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or greater than the specified field value.  EXAMPLE below returns all the data which were uploaded after 17:38 9th of February 2021 (defaults to 20 results).  &#x60;&lt;url&gt;events?transactionTimestamp&#x3D;&#x3D;&gt;2021-02-09T17:38:08.328&#x60; (optional)
   * @param optionsActualDatesEnd Start and end time of when it actually ended  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?options.actualDates.end&#x3D;search_DateTime&#x60; (optional)
   * @param actualEnd Start and end time of when it actually ended  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?actualEnd&#x3D;search_DateTime&#x60; (optional)
   * @param productsProductRefId Search by products reference Id and products metadata. Case sensitive.  &#x60;?products.productRefId&#x3D;search_word&#x60; (optional)
   * @param productRefId Search by products reference Id and products metadata. Case sensitive.  &#x60;?productRefId&#x3D;search_word&#x60; (optional)
   * @param optionsProductsMetadataKey Search by products reference Id and products metadata. Case sensitive.  &#x60;?options.products.metadata.key&#x3D;search_word&#x60; (optional)
   * @param optionsProductsMetadataValue Search by products reference Id and products metadata. Case sensitive.  &#x60;?options.products.metadata.value&#x3D;search_word&#x60; (optional)
   * @param optionsProductsProductRefId Search by products reference Id and products metadata. Case sensitive.  &#x60;?options.products.productRefId&#x3D;search_word&#x60; (optional)
   * @param status The status of the competition. Case sensitive. Supported values - &#x60;Unknown&#x60; &#x60;Deleting&#x60; &#x60;Deleted&#x60; &#x60;Draft&#x60; &#x60;Template&#x60; &#x60;Preparing&#x60; &#x60;Ready&#x60; &#x60;Starting&#x60; &#x60;Active&#x60; &#x60;Finishing&#x60; &#x60;Finished&#x60; &#x60;Cancelling&#x60; &#x60;Cancelled&#x60; (optional)
   * @param statusCode The status code of the competition. Numbers only.  Supported values:  -3 (Unknown)  -2 (Deleting)  -1 (Deleted)  0 (Draft)  1 (Template)  2 (Preparing)  3 (Ready)  4 (Starting)  5 (Active)  6 (Finishing)  7 (Finished)  8 (Cancelling)  9 (Cancelled)  (optional)
   * @param optionsLimitEntrantsTo The value is the member group that you are searching for that is eligible to participate. Case sensitive.  &#x60;?options.limitEntrantsTo&#x3D;search_word&#x60; (optional
   * @param limitEntrantsTo The value is the member group that you are searching for that is eligible to participate. Case sensitive.  &#x60;?limitEntrantsTo&#x3D;search_word&#x60; (optional
   * @param optionsScheduledDatesStart Start and end time of when it was scheduled  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?options.scheduledDates.start&#x3D;search_DateTime&#x60; (optional)
   * @param scheduledStart Start and end time of when it was scheduled  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?scheduledStart&#x3D;search_DateTime&#x60; (optional)
   * @param optionsScheduledDatesEnd Start and end time of when it was scheduled  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?options.scheduledDates.end&#x3D;search_DateTime&#x60; (optional)
   * @param scheduledEnd Start and end time of when it was scheduled  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?scheduledStart&#x3D;search_DateTime&#x60; (optional)
   * @param optionsActualDatesStart Start and end time of when it actually started  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?options.actualDates.start&#x3D;search_DateTime&#x60; (optional)
   * @param actualStart Start and end time of when it actually started  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?actualStart&#x3D;search_DateTime&#x60; (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;MemberCompetitionResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<MemberCompetitionResponse>> getMemberCompetitionsWithHttpInfo(String X_API_KEY, String spaceName, String memberId, List<String> id, Integer limit, Integer skip, String sortByFields, String include, String lang, String equal, String equalEqual, String lessThanEqual, String lessThanEqualEqual, String equalGreaterThan, String equalEqualGreaterThan, String optionsActualDatesEnd, String actualEnd, String productsProductRefId, String productRefId, String optionsProductsMetadataKey, String optionsProductsMetadataValue, String optionsProductsProductRefId, String status, Integer statusCode, List<String> optionsLimitEntrantsTo, List<String> limitEntrantsTo, String optionsScheduledDatesStart, String scheduledStart, String optionsScheduledDatesEnd, String scheduledEnd, String optionsActualDatesStart, String actualStart) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = getMemberCompetitionsRequestBuilder(X_API_KEY, spaceName, memberId, id, limit, skip, sortByFields, include, lang, equal, equalEqual, lessThanEqual, lessThanEqualEqual, equalGreaterThan, equalEqualGreaterThan, optionsActualDatesEnd, actualEnd, productsProductRefId, productRefId, optionsProductsMetadataKey, optionsProductsMetadataValue, optionsProductsProductRefId, status, statusCode, optionsLimitEntrantsTo, limitEntrantsTo, optionsScheduledDatesStart, scheduledStart, optionsScheduledDatesEnd, scheduledEnd, optionsActualDatesStart, actualStart);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("getMemberCompetitions", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<MemberCompetitionResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MemberCompetitionResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder getMemberCompetitionsRequestBuilder(String X_API_KEY, String spaceName, String memberId, List<String> id, Integer limit, Integer skip, String sortByFields, String include, String lang, String equal, String equalEqual, String lessThanEqual, String lessThanEqualEqual, String equalGreaterThan, String equalEqualGreaterThan, String optionsActualDatesEnd, String actualEnd, String productsProductRefId, String productRefId, String optionsProductsMetadataKey, String optionsProductsMetadataValue, String optionsProductsProductRefId, String status, Integer statusCode, List<String> optionsLimitEntrantsTo, List<String> limitEntrantsTo, String optionsScheduledDatesStart, String scheduledStart, String optionsScheduledDatesEnd, String scheduledEnd, String optionsActualDatesStart, String actualStart) throws ApiException {
    // verify the required parameter 'X_API_KEY' is set
    if (X_API_KEY == null) {
      throw new ApiException(400, "Missing the required parameter 'X_API_KEY' when calling getMemberCompetitions");
    }
    // verify the required parameter 'spaceName' is set
    if (spaceName == null) {
      throw new ApiException(400, "Missing the required parameter 'spaceName' when calling getMemberCompetitions");
    }
    // verify the required parameter 'memberId' is set
    if (memberId == null) {
      throw new ApiException(400, "Missing the required parameter 'memberId' when calling getMemberCompetitions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/{spaceName}/members/{memberId}/competitions"
        .replace("{spaceName}", ApiClient.urlEncode(spaceName.toString()))
        .replace("{memberId}", ApiClient.urlEncode(memberId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_skip", skip));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_sortByFields", sortByFields));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_include", include));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_lang", lang));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("&#x3D;", equal));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("&#x3D;&#x3D;", equalEqual));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("&lt;&#x3D;", lessThanEqual));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("&lt;&#x3D;&#x3D;", lessThanEqualEqual));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("&#x3D;&gt;", equalGreaterThan));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("&#x3D;&#x3D;&gt;", equalEqualGreaterThan));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.actualDates.end", optionsActualDatesEnd));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("actualEnd", actualEnd));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("products.productRefId", productsProductRefId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("productRefId", productRefId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.products.metadata.key", optionsProductsMetadataKey));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.products.metadata.value", optionsProductsMetadataValue));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.products.productRefId", optionsProductsProductRefId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status", status));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("statusCode", statusCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "options.limitEntrantsTo", optionsLimitEntrantsTo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "limitEntrantsTo", limitEntrantsTo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.scheduledDates.start", optionsScheduledDatesStart));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("scheduledStart", scheduledStart));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.scheduledDates.end", optionsScheduledDatesEnd));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("scheduledEnd", scheduledEnd));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.actualDates.start", optionsActualDatesStart));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("actualStart", actualStart));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    if (X_API_KEY != null) {
      localVarRequestBuilder.header("X-API-KEY", X_API_KEY.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Opt in a member in a competition
   * Allows a member to opt-in into an existing Competition using an existing Member Id.  Use &#x60;/api/v1/:space/members/:memberId/competition/:competitionId/entrants&#x60; or &#x60;/api/v1/:space/members/reference/:memberRefId/competition/:competitionId/entrants&#x60;  API endpoint to determine if a Member is already Opted in to a Competition.
   * @param X_API_KEY Your unique API key (required)
   * @param spaceName This is the space name which is linked to the account (required)
   * @param memberId Id of a Member (required)
   * @param competitionId Id of a competition (required)
   * @return CompletableFuture&lt;MemberOptinResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<MemberOptinResponse> optinMemberToCompetition(String X_API_KEY, String spaceName, String memberId, String competitionId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = optinMemberToCompetitionRequestBuilder(X_API_KEY, spaceName, memberId, competitionId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("optinMemberToCompetition", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MemberOptinResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Opt in a member in a competition
   * Allows a member to opt-in into an existing Competition using an existing Member Id.  Use &#x60;/api/v1/:space/members/:memberId/competition/:competitionId/entrants&#x60; or &#x60;/api/v1/:space/members/reference/:memberRefId/competition/:competitionId/entrants&#x60;  API endpoint to determine if a Member is already Opted in to a Competition.
   * @param X_API_KEY Your unique API key (required)
   * @param spaceName This is the space name which is linked to the account (required)
   * @param memberId Id of a Member (required)
   * @param competitionId Id of a competition (required)
   * @return CompletableFuture&lt;ApiResponse&lt;MemberOptinResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<MemberOptinResponse>> optinMemberToCompetitionWithHttpInfo(String X_API_KEY, String spaceName, String memberId, String competitionId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = optinMemberToCompetitionRequestBuilder(X_API_KEY, spaceName, memberId, competitionId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("optinMemberToCompetition", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<MemberOptinResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MemberOptinResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder optinMemberToCompetitionRequestBuilder(String X_API_KEY, String spaceName, String memberId, String competitionId) throws ApiException {
    // verify the required parameter 'X_API_KEY' is set
    if (X_API_KEY == null) {
      throw new ApiException(400, "Missing the required parameter 'X_API_KEY' when calling optinMemberToCompetition");
    }
    // verify the required parameter 'spaceName' is set
    if (spaceName == null) {
      throw new ApiException(400, "Missing the required parameter 'spaceName' when calling optinMemberToCompetition");
    }
    // verify the required parameter 'memberId' is set
    if (memberId == null) {
      throw new ApiException(400, "Missing the required parameter 'memberId' when calling optinMemberToCompetition");
    }
    // verify the required parameter 'competitionId' is set
    if (competitionId == null) {
      throw new ApiException(400, "Missing the required parameter 'competitionId' when calling optinMemberToCompetition");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/{spaceName}/members/{memberId}/competitions/{competitionId}/optin"
        .replace("{spaceName}", ApiClient.urlEncode(spaceName.toString()))
        .replace("{memberId}", ApiClient.urlEncode(memberId.toString()))
        .replace("{competitionId}", ApiClient.urlEncode(competitionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (X_API_KEY != null) {
      localVarRequestBuilder.header("X-API-KEY", X_API_KEY.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Opt in a member in a competition
   * Allows a member to opt-in into an existing Competition using an existing Member Id.  Use &#x60;/api/v1/:space/members/:memberId/competition/:competitionId/entrants&#x60; or &#x60;/api/v1/:space/members/reference/:memberRefId/competition/:competitionId/entrants&#x60;  API endpoint to determine if a Member is already Opted in to a Competition.
   * @param X_API_KEY Your unique API key (required)
   * @param spaceName This is the space name which is linked to the account (required)
   * @param memberRefId Reference Id of a Member (required)
   * @param competitionId Id of a competition (required)
   * @return CompletableFuture&lt;MemberOptinResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<MemberOptinResponse> optinMemberToCompetitionByRefId(String X_API_KEY, String spaceName, String memberRefId, String competitionId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = optinMemberToCompetitionByRefIdRequestBuilder(X_API_KEY, spaceName, memberRefId, competitionId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("optinMemberToCompetitionByRefId", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MemberOptinResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Opt in a member in a competition
   * Allows a member to opt-in into an existing Competition using an existing Member Id.  Use &#x60;/api/v1/:space/members/:memberId/competition/:competitionId/entrants&#x60; or &#x60;/api/v1/:space/members/reference/:memberRefId/competition/:competitionId/entrants&#x60;  API endpoint to determine if a Member is already Opted in to a Competition.
   * @param X_API_KEY Your unique API key (required)
   * @param spaceName This is the space name which is linked to the account (required)
   * @param memberRefId Reference Id of a Member (required)
   * @param competitionId Id of a competition (required)
   * @return CompletableFuture&lt;ApiResponse&lt;MemberOptinResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<MemberOptinResponse>> optinMemberToCompetitionByRefIdWithHttpInfo(String X_API_KEY, String spaceName, String memberRefId, String competitionId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = optinMemberToCompetitionByRefIdRequestBuilder(X_API_KEY, spaceName, memberRefId, competitionId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("optinMemberToCompetitionByRefId", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<MemberOptinResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MemberOptinResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder optinMemberToCompetitionByRefIdRequestBuilder(String X_API_KEY, String spaceName, String memberRefId, String competitionId) throws ApiException {
    // verify the required parameter 'X_API_KEY' is set
    if (X_API_KEY == null) {
      throw new ApiException(400, "Missing the required parameter 'X_API_KEY' when calling optinMemberToCompetitionByRefId");
    }
    // verify the required parameter 'spaceName' is set
    if (spaceName == null) {
      throw new ApiException(400, "Missing the required parameter 'spaceName' when calling optinMemberToCompetitionByRefId");
    }
    // verify the required parameter 'memberRefId' is set
    if (memberRefId == null) {
      throw new ApiException(400, "Missing the required parameter 'memberRefId' when calling optinMemberToCompetitionByRefId");
    }
    // verify the required parameter 'competitionId' is set
    if (competitionId == null) {
      throw new ApiException(400, "Missing the required parameter 'competitionId' when calling optinMemberToCompetitionByRefId");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/{spaceName}/members/reference/{memberRefId}/competitions/{competitionId}/optin"
        .replace("{spaceName}", ApiClient.urlEncode(spaceName.toString()))
        .replace("{memberRefId}", ApiClient.urlEncode(memberRefId.toString()))
        .replace("{competitionId}", ApiClient.urlEncode(competitionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (X_API_KEY != null) {
      localVarRequestBuilder.header("X-API-KEY", X_API_KEY.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
