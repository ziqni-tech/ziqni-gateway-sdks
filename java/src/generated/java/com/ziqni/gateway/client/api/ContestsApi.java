/*
 * Ziqni Gateway Services
 * These are the Gateway services to be used by customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ziqni.gateway.client.api;

import com.ziqni.gateway.client.ApiClient;
import com.ziqni.gateway.client.ApiException;
import com.ziqni.gateway.client.ApiResponse;
import com.ziqni.gateway.client.Pair;

import com.ziqni.gateway.client.model.ApiErrorResponse;
import com.ziqni.gateway.client.model.ContestByIdResponse;
import com.ziqni.gateway.client.model.ContestResponse;
import com.ziqni.gateway.client.model.Error;
import com.ziqni.gateway.client.model.LeaderboardResponse;
import java.time.OffsetDateTime;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ContestsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;

  public ContestsApi() {
    this(new ApiClient());
  }

  public ContestsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  private ApiException getApiException(String operationId, HttpResponse<String> response) {
    String message = formatExceptionMessage(operationId, response.statusCode(), response.body());
    return new ApiException(response.statusCode(), message, response.headers(), response.body());
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Returns the contest by requested id
   * Returns a contest and rewards attached to it by request.  This assumes that a competition and contests have first been created using the web console. Otherwise no data is returned.
   * @param X_API_KEY Your unique API key (required)
   * @param spaceName This is the space name which is linked to the account (required)
   * @param id Unique identifier of the resource (required)
   * @param include Allows you to add the products and metadata objects to the response. Case sensitive (optional)
   * @param lang Allows you to preview the label, description and terms and conditions of the competition in a requested language. Case sensitive (optional)
   * @param uomKey Adding a &#x60;?_uomKey&#x60; will give you the value of rewards converted to the specific Units Of Measure multiplier Case sensitive * The unit of measure type of currency provided has to be the same as the rewards. Otherwise, the value will remain the same.  Usage syntax:  &#x60;?_uomKey&#x3D;search_word&#x60; (optional)
   * @return CompletableFuture&lt;ContestByIdResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ContestByIdResponse> getContestById(String X_API_KEY, String spaceName, String id, String include, String lang, String uomKey) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = getContestByIdRequestBuilder(X_API_KEY, spaceName, id, include, lang, uomKey);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("getContestById", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ContestByIdResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns the contest by requested id
   * Returns a contest and rewards attached to it by request.  This assumes that a competition and contests have first been created using the web console. Otherwise no data is returned.
   * @param X_API_KEY Your unique API key (required)
   * @param spaceName This is the space name which is linked to the account (required)
   * @param id Unique identifier of the resource (required)
   * @param include Allows you to add the products and metadata objects to the response. Case sensitive (optional)
   * @param lang Allows you to preview the label, description and terms and conditions of the competition in a requested language. Case sensitive (optional)
   * @param uomKey Adding a &#x60;?_uomKey&#x60; will give you the value of rewards converted to the specific Units Of Measure multiplier Case sensitive * The unit of measure type of currency provided has to be the same as the rewards. Otherwise, the value will remain the same.  Usage syntax:  &#x60;?_uomKey&#x3D;search_word&#x60; (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;ContestByIdResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ContestByIdResponse>> getContestByIdWithHttpInfo(String X_API_KEY, String spaceName, String id, String include, String lang, String uomKey) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = getContestByIdRequestBuilder(X_API_KEY, spaceName, id, include, lang, uomKey);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("getContestById", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ContestByIdResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ContestByIdResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder getContestByIdRequestBuilder(String X_API_KEY, String spaceName, String id, String include, String lang, String uomKey) throws ApiException {
    // verify the required parameter 'X_API_KEY' is set
    if (X_API_KEY == null) {
      throw new ApiException(400, "Missing the required parameter 'X_API_KEY' when calling getContestById");
    }
    // verify the required parameter 'spaceName' is set
    if (spaceName == null) {
      throw new ApiException(400, "Missing the required parameter 'spaceName' when calling getContestById");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getContestById");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/{spaceName}/contests/{id}"
        .replace("{spaceName}", ApiClient.urlEncode(spaceName.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_include", include));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_lang", lang));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_uomKey", uomKey));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    if (X_API_KEY != null) {
      localVarRequestBuilder.header("X-API-KEY", X_API_KEY.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of contests
   * Returns a simplified list of available Contests and rewards attached to it.  * The response of a contest is different than the competitions. While competitions give a response of only Ready, Active and Finished competitions states the contest gives all the contests that are in cancelled state as well.  This assumes that the competitions and contests have first been created using the web console otherwise no data will be returned and the value of the \&quot;totalRecordsFound\&quot; variable in metadata will be 0.  GET responses can be filtered out based on the contests parameters to narrow down the results.
   * @param X_API_KEY Your unique API key (required)
   * @param spaceName This is the space name which is linked to the account (required)
   * @param id The unique identifiers of the resources (optional
   * @param limit Used for pagination. Setting the limit value will cause the system to limit the number of records returned to the specified number. (optional)
   * @param skip Used for pagination. Setting the skip value will cause the system to return records from the specified position onwards.  EXAMPLE below returns the results for requested resource without skipping any records  &lt;url&gt;?_limit&#x3D;5&amp;_skip&#x3D;0  EXAMPLE below returns the results for requested resource after skipping the first 10 records  &#x60;&lt;url&gt;?_limit&#x3D;5&amp;_skip&#x3D;10&#x60; (optional)
   * @param sortByFields Enables sorting of results based on fields and order specified.  Supported ordering  &#x60;asc, desc&#x60;   Usage syntax  &#x60;_sortByFields&#x3D;&lt;field-to-sort-on&gt;:&lt;order&gt;&#x60;   EXAMPLE The query will return data sorted by transactionTimestamp in descending order  &#x60;&lt;url&gt;?_sortByFields&#x3D;transactionTimestamp:desc,created:asc&#x60; (optional)
   * @param include Allows you to add the products and metadata objects to the response. Case sensitive (optional)
   * @param lang Allows you to preview the label, description and terms and conditions of the competition in a requested language. Case sensitive (optional)
   * @param equal Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  Single equals sign usage has two types of applications in formulating API queries - * assigning values to predefined/reserved parameters like _skip, _limit, _lang, _sortByFields, _uomKey, _include * assigning values to model based parameters (Example name, transactionTimestamp, options.limitEntrantsTo etc.)  EXAMPLE below returns all competitions in \&quot;Ready\&quot; or \&quot;Active\&quot; state that have either a group1 or group2 entrant limitation  &#x60;&lt;url&gt;/competitions?_skip&#x3D;0&amp;_limit&#x3D;100&amp;status&#x3D;Ready,Active&amp;options.limitEntrantsTo&#x3D;group1,group2&#x60; (optional)
   * @param equalEqual Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  Single equals sign usage has two types of applications in formulating API queries - * assigning values to predefined/reserved parameters like _skip, _limit, _lang, _sortByFields, _uomKey, _include * assigning values to model based parameters (Example name, transactionTimestamp, options.limitEntrantsTo etc.)  EXAMPLE below returns all competitions in \&quot;Ready\&quot; state only that have either a group1 or group2 entrant limitation  &#x60;&lt;url&gt;/competitions?_skip&#x3D;0&amp;_limit&#x3D;100&amp;status&#x3D;&#x3D;Ready&amp;options.limitEntrantsTo&#x3D;group1,group2&#x60; (optional)
   * @param lessThanEqual Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  The less than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or less than the specified field value.  EXAMPLE below returns all the data which was uploaded before 17:38 9th of February 2021 (defaults to 20 results).  &#x60;&lt;url&gt;events?transactionTimestamp&lt;&#x3D;2021-02-09T17:38:08.328&#x60; (optional)
   * @param lessThanEqualEqual Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  The less than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or less than the specified field value.  EXAMPLE below returns all the data which were uploaded before 17:38 9th of February 2021 (defaults to 20 results).  &#x60;&lt;url&gt;events?transactionTimestamp&lt;&#x3D;&#x3D;2021-02-09T17:38:08.328&#x60; (optional)
   * @param equalGreaterThan Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  The greater than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or greater than the specified field value.  EXAMPLE below returns all the data which were uploaded after 17:38 9th of February 2021 (defaults to 20 results).  &#x60;&lt;url&gt;events?transactionTimestamp&#x3D;&gt;2021-02-09T17:38:08.328&#x60; (optional)
   * @param equalEqualGreaterThan Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  The greater than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or greater than the specified field value.  EXAMPLE below returns all the data which were uploaded after 17:38 9th of February 2021 (defaults to 20 results).  &#x60;&lt;url&gt;events?transactionTimestamp&#x3D;&#x3D;&gt;2021-02-09T17:38:08.328&#x60; (optional)
   * @param uomKey Adding a &#x60;?_uomKey&#x60; will give you the value of rewards converted to the specific Units Of Measure multiplier Case sensitive * The unit of measure type of currency provided has to be the same as the rewards. Otherwise, the value will remain the same.  Usage syntax:  &#x60;?_uomKey&#x3D;search_word&#x60; (optional)
   * @param competitionId Competition id to query.  &#x60;?competitionId&#x3D;&lt;competition-id&gt;&#x60; (optional
   * @param number Contest number to query  &#x60;?number&#x3D;&lt;contest-number&gt;&#x60; (optional)
   * @param round Contest round  &#x60;?round&#x3D;&lt;round-value&gt;&#x60; (optional)
   * @param optionsNumberOfEntrantsMaximum Filter results by maximum number of entrants  &#x60;?options.numberOfEntrants.maximum&#x3D;search_number&#x60; (optional)
   * @param optionsNumberOfEntrantsMinimum Filter results by minimum number of entrants  &#x60;?options.numberOfEntrants.minimum&#x3D;search_number&#x60; (optional)
   * @param optionsIsPublic Whether the event is public or private  &#x60;?options.isPublic&#x3D;&lt;search-boolean&gt;&#x60; (optional)
   * @param optionsAutoStart Whether the event is enable for auto start or not  &#x60;?options.autoStart&#x3D;search_boolean&#x60; (optional)
   * @param optionsAutoStop Whether the event is enable for auto stop or not  &#x60;?options.autoStop&#x3D;search_boolean&#x60; (optional)
   * @param optionsActualDatesEnd Start and end time of when it actually ended  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?options.actualDates.end&#x3D;search_DateTime&#x60; (optional)
   * @param optionsScheduledDatesStart Start and end time of when it was scheduled  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?options.scheduledDates.start&#x3D;search_DateTime&#x60; (optional)
   * @param optionsScheduledDatesEnd Start and end time of when it was scheduled  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?options.scheduledDates.end&#x3D;search_DateTime&#x60; (optional)
   * @param optionsActualDatesStart Start and end time of when it actually started  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?options.actualDates.start&#x3D;search_DateTime&#x60; (optional)
   * @param optionsStrategiesRankingStrategyScoreDesc Filter results by ranking strategies  &#x60;?options.strategies.rankingStrategy.scoreDesc&#x3D;search_boolean&#x60; (optional)
   * @param optionsStrategiesRankingStrategyTimeDesc Filter results by ranking strategies  &#x60;?options.strategies.rankingStrategy.scoreDesc&#x3D;search_boolean&#x60; (optional)
   * @param optionsStrategiesRankingStrategyScoreFirst Filter results by ranking strategies  &#x60;?options.strategies.rankingStrategy.scoreFirst&#x3D;search_boolean&#x60; (optional)
   * @param optionsStrategiesRankingStrategyIgnoreTime Filter results by ranking strategies  &#x60;?options.strategies.rankingStrategy.ignoreTime&#x3D;search_boolean&#x60; (optional)
   * @param optionsStrategiesRankingStrategyIgnoreScore Filter results by ranking strategies  &#x60;?options.strategies.rankingStrategy.ignoreScore&#x3D;search_boolean&#x60; (optional)
   * @param optionsStrategiesScoringStrategyLimitUpdatesTo Filter results by scoring strategies  &#x60;?options.strategies.scoringStrategy.limitUpdatesTo&#x3D;search_number&#x60; (optional)
   * @param optionsStrategiesScoringStrategySumBestXOf Filter results by scoring strategies  &#x60;?options.strategies.scoringStrategy.sumBestXOf&#x3D;search_number&#x60; (optional)
   * @param optionsStrategiesScoringStrategyLastUpdateTimeStamp Filter results by scoring strategies  &#x60;?options.strategies.scoringStrategy.lastUpdateTimeStamp&#x3D;search_number&#x60; (optional)
   * @param optionsStrategiesScoringStrategyRecordTimeWhenSumReaches Filter results by scoring strategies  &#x60;?options.strategies.scoringStrategy.recordTimeWhenSumReaches&#x3D;search_number&#x60; (optional)
   * @param optionsStrategiesStrategyType The scoring strategy type Supported values - &#x60;TotalCumulative&#x60; &#x60;SumBest&#x60; &#x60;LimitedTo&#x60; &#x60;FirstTo&#x60;  &#x60;?options.strategies.strategyType&#x3D;search_string&#x60; (optional)
   * @param created Works with simple dates or date and time, eg:   &#x60;?created&#x3D;&lt;created-date&gt;&#x60; (optional)
   * @return CompletableFuture&lt;ContestResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ContestResponse> getContests(String X_API_KEY, String spaceName, List<String> id, Integer limit, Integer skip, String sortByFields, String include, String lang, String equal, String equalEqual, String lessThanEqual, String lessThanEqualEqual, String equalGreaterThan, String equalEqualGreaterThan, String uomKey, List<String> competitionId, Integer number, Integer round, Integer optionsNumberOfEntrantsMaximum, Integer optionsNumberOfEntrantsMinimum, Boolean optionsIsPublic, Boolean optionsAutoStart, Boolean optionsAutoStop, String optionsActualDatesEnd, String optionsScheduledDatesStart, String optionsScheduledDatesEnd, String optionsActualDatesStart, Boolean optionsStrategiesRankingStrategyScoreDesc, Boolean optionsStrategiesRankingStrategyTimeDesc, Boolean optionsStrategiesRankingStrategyScoreFirst, Boolean optionsStrategiesRankingStrategyIgnoreTime, Boolean optionsStrategiesRankingStrategyIgnoreScore, Integer optionsStrategiesScoringStrategyLimitUpdatesTo, Double optionsStrategiesScoringStrategySumBestXOf, Long optionsStrategiesScoringStrategyLastUpdateTimeStamp, Long optionsStrategiesScoringStrategyRecordTimeWhenSumReaches, String optionsStrategiesStrategyType, OffsetDateTime created) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = getContestsRequestBuilder(X_API_KEY, spaceName, id, limit, skip, sortByFields, include, lang, equal, equalEqual, lessThanEqual, lessThanEqualEqual, equalGreaterThan, equalEqualGreaterThan, uomKey, competitionId, number, round, optionsNumberOfEntrantsMaximum, optionsNumberOfEntrantsMinimum, optionsIsPublic, optionsAutoStart, optionsAutoStop, optionsActualDatesEnd, optionsScheduledDatesStart, optionsScheduledDatesEnd, optionsActualDatesStart, optionsStrategiesRankingStrategyScoreDesc, optionsStrategiesRankingStrategyTimeDesc, optionsStrategiesRankingStrategyScoreFirst, optionsStrategiesRankingStrategyIgnoreTime, optionsStrategiesRankingStrategyIgnoreScore, optionsStrategiesScoringStrategyLimitUpdatesTo, optionsStrategiesScoringStrategySumBestXOf, optionsStrategiesScoringStrategyLastUpdateTimeStamp, optionsStrategiesScoringStrategyRecordTimeWhenSumReaches, optionsStrategiesStrategyType, created);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("getContests", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ContestResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of contests
   * Returns a simplified list of available Contests and rewards attached to it.  * The response of a contest is different than the competitions. While competitions give a response of only Ready, Active and Finished competitions states the contest gives all the contests that are in cancelled state as well.  This assumes that the competitions and contests have first been created using the web console otherwise no data will be returned and the value of the \&quot;totalRecordsFound\&quot; variable in metadata will be 0.  GET responses can be filtered out based on the contests parameters to narrow down the results.
   * @param X_API_KEY Your unique API key (required)
   * @param spaceName This is the space name which is linked to the account (required)
   * @param id The unique identifiers of the resources (optional
   * @param limit Used for pagination. Setting the limit value will cause the system to limit the number of records returned to the specified number. (optional)
   * @param skip Used for pagination. Setting the skip value will cause the system to return records from the specified position onwards.  EXAMPLE below returns the results for requested resource without skipping any records  &lt;url&gt;?_limit&#x3D;5&amp;_skip&#x3D;0  EXAMPLE below returns the results for requested resource after skipping the first 10 records  &#x60;&lt;url&gt;?_limit&#x3D;5&amp;_skip&#x3D;10&#x60; (optional)
   * @param sortByFields Enables sorting of results based on fields and order specified.  Supported ordering  &#x60;asc, desc&#x60;   Usage syntax  &#x60;_sortByFields&#x3D;&lt;field-to-sort-on&gt;:&lt;order&gt;&#x60;   EXAMPLE The query will return data sorted by transactionTimestamp in descending order  &#x60;&lt;url&gt;?_sortByFields&#x3D;transactionTimestamp:desc,created:asc&#x60; (optional)
   * @param include Allows you to add the products and metadata objects to the response. Case sensitive (optional)
   * @param lang Allows you to preview the label, description and terms and conditions of the competition in a requested language. Case sensitive (optional)
   * @param equal Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  Single equals sign usage has two types of applications in formulating API queries - * assigning values to predefined/reserved parameters like _skip, _limit, _lang, _sortByFields, _uomKey, _include * assigning values to model based parameters (Example name, transactionTimestamp, options.limitEntrantsTo etc.)  EXAMPLE below returns all competitions in \&quot;Ready\&quot; or \&quot;Active\&quot; state that have either a group1 or group2 entrant limitation  &#x60;&lt;url&gt;/competitions?_skip&#x3D;0&amp;_limit&#x3D;100&amp;status&#x3D;Ready,Active&amp;options.limitEntrantsTo&#x3D;group1,group2&#x60; (optional)
   * @param equalEqual Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  Single equals sign usage has two types of applications in formulating API queries - * assigning values to predefined/reserved parameters like _skip, _limit, _lang, _sortByFields, _uomKey, _include * assigning values to model based parameters (Example name, transactionTimestamp, options.limitEntrantsTo etc.)  EXAMPLE below returns all competitions in \&quot;Ready\&quot; state only that have either a group1 or group2 entrant limitation  &#x60;&lt;url&gt;/competitions?_skip&#x3D;0&amp;_limit&#x3D;100&amp;status&#x3D;&#x3D;Ready&amp;options.limitEntrantsTo&#x3D;group1,group2&#x60; (optional)
   * @param lessThanEqual Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  The less than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or less than the specified field value.  EXAMPLE below returns all the data which was uploaded before 17:38 9th of February 2021 (defaults to 20 results).  &#x60;&lt;url&gt;events?transactionTimestamp&lt;&#x3D;2021-02-09T17:38:08.328&#x60; (optional)
   * @param lessThanEqualEqual Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  The less than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or less than the specified field value.  EXAMPLE below returns all the data which were uploaded before 17:38 9th of February 2021 (defaults to 20 results).  &#x60;&lt;url&gt;events?transactionTimestamp&lt;&#x3D;&#x3D;2021-02-09T17:38:08.328&#x60; (optional)
   * @param equalGreaterThan Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  The greater than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or greater than the specified field value.  EXAMPLE below returns all the data which were uploaded after 17:38 9th of February 2021 (defaults to 20 results).  &#x60;&lt;url&gt;events?transactionTimestamp&#x3D;&gt;2021-02-09T17:38:08.328&#x60; (optional)
   * @param equalEqualGreaterThan Single &#x60;&#x3D;&#x60; sign usage will work as a &#x60;should/OR&#x60; action and &#x60;&#x3D;&#x3D;&#x60; will work as a &#x60;must/AND&#x60; action  The greater than equal filter can be used on fields with a data type of integer, long, double, float, date, time or date-time. The filter will return all matching records that are equal to or greater than the specified field value.  EXAMPLE below returns all the data which were uploaded after 17:38 9th of February 2021 (defaults to 20 results).  &#x60;&lt;url&gt;events?transactionTimestamp&#x3D;&#x3D;&gt;2021-02-09T17:38:08.328&#x60; (optional)
   * @param uomKey Adding a &#x60;?_uomKey&#x60; will give you the value of rewards converted to the specific Units Of Measure multiplier Case sensitive * The unit of measure type of currency provided has to be the same as the rewards. Otherwise, the value will remain the same.  Usage syntax:  &#x60;?_uomKey&#x3D;search_word&#x60; (optional)
   * @param competitionId Competition id to query.  &#x60;?competitionId&#x3D;&lt;competition-id&gt;&#x60; (optional
   * @param number Contest number to query  &#x60;?number&#x3D;&lt;contest-number&gt;&#x60; (optional)
   * @param round Contest round  &#x60;?round&#x3D;&lt;round-value&gt;&#x60; (optional)
   * @param optionsNumberOfEntrantsMaximum Filter results by maximum number of entrants  &#x60;?options.numberOfEntrants.maximum&#x3D;search_number&#x60; (optional)
   * @param optionsNumberOfEntrantsMinimum Filter results by minimum number of entrants  &#x60;?options.numberOfEntrants.minimum&#x3D;search_number&#x60; (optional)
   * @param optionsIsPublic Whether the event is public or private  &#x60;?options.isPublic&#x3D;&lt;search-boolean&gt;&#x60; (optional)
   * @param optionsAutoStart Whether the event is enable for auto start or not  &#x60;?options.autoStart&#x3D;search_boolean&#x60; (optional)
   * @param optionsAutoStop Whether the event is enable for auto stop or not  &#x60;?options.autoStop&#x3D;search_boolean&#x60; (optional)
   * @param optionsActualDatesEnd Start and end time of when it actually ended  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?options.actualDates.end&#x3D;search_DateTime&#x60; (optional)
   * @param optionsScheduledDatesStart Start and end time of when it was scheduled  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?options.scheduledDates.start&#x3D;search_DateTime&#x60; (optional)
   * @param optionsScheduledDatesEnd Start and end time of when it was scheduled  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?options.scheduledDates.end&#x3D;search_DateTime&#x60; (optional)
   * @param optionsActualDatesStart Start and end time of when it actually started  Supported DateTime patterns - * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd&#39;T&#39;HH:mm\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy-MM-dd HH:mm\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm:ss\&quot; * String &#x3D; \&quot;yyyy/MM/dd HH:mm\&quot;  &#x60;?options.actualDates.start&#x3D;search_DateTime&#x60; (optional)
   * @param optionsStrategiesRankingStrategyScoreDesc Filter results by ranking strategies  &#x60;?options.strategies.rankingStrategy.scoreDesc&#x3D;search_boolean&#x60; (optional)
   * @param optionsStrategiesRankingStrategyTimeDesc Filter results by ranking strategies  &#x60;?options.strategies.rankingStrategy.scoreDesc&#x3D;search_boolean&#x60; (optional)
   * @param optionsStrategiesRankingStrategyScoreFirst Filter results by ranking strategies  &#x60;?options.strategies.rankingStrategy.scoreFirst&#x3D;search_boolean&#x60; (optional)
   * @param optionsStrategiesRankingStrategyIgnoreTime Filter results by ranking strategies  &#x60;?options.strategies.rankingStrategy.ignoreTime&#x3D;search_boolean&#x60; (optional)
   * @param optionsStrategiesRankingStrategyIgnoreScore Filter results by ranking strategies  &#x60;?options.strategies.rankingStrategy.ignoreScore&#x3D;search_boolean&#x60; (optional)
   * @param optionsStrategiesScoringStrategyLimitUpdatesTo Filter results by scoring strategies  &#x60;?options.strategies.scoringStrategy.limitUpdatesTo&#x3D;search_number&#x60; (optional)
   * @param optionsStrategiesScoringStrategySumBestXOf Filter results by scoring strategies  &#x60;?options.strategies.scoringStrategy.sumBestXOf&#x3D;search_number&#x60; (optional)
   * @param optionsStrategiesScoringStrategyLastUpdateTimeStamp Filter results by scoring strategies  &#x60;?options.strategies.scoringStrategy.lastUpdateTimeStamp&#x3D;search_number&#x60; (optional)
   * @param optionsStrategiesScoringStrategyRecordTimeWhenSumReaches Filter results by scoring strategies  &#x60;?options.strategies.scoringStrategy.recordTimeWhenSumReaches&#x3D;search_number&#x60; (optional)
   * @param optionsStrategiesStrategyType The scoring strategy type Supported values - &#x60;TotalCumulative&#x60; &#x60;SumBest&#x60; &#x60;LimitedTo&#x60; &#x60;FirstTo&#x60;  &#x60;?options.strategies.strategyType&#x3D;search_string&#x60; (optional)
   * @param created Works with simple dates or date and time, eg:   &#x60;?created&#x3D;&lt;created-date&gt;&#x60; (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;ContestResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ContestResponse>> getContestsWithHttpInfo(String X_API_KEY, String spaceName, List<String> id, Integer limit, Integer skip, String sortByFields, String include, String lang, String equal, String equalEqual, String lessThanEqual, String lessThanEqualEqual, String equalGreaterThan, String equalEqualGreaterThan, String uomKey, List<String> competitionId, Integer number, Integer round, Integer optionsNumberOfEntrantsMaximum, Integer optionsNumberOfEntrantsMinimum, Boolean optionsIsPublic, Boolean optionsAutoStart, Boolean optionsAutoStop, String optionsActualDatesEnd, String optionsScheduledDatesStart, String optionsScheduledDatesEnd, String optionsActualDatesStart, Boolean optionsStrategiesRankingStrategyScoreDesc, Boolean optionsStrategiesRankingStrategyTimeDesc, Boolean optionsStrategiesRankingStrategyScoreFirst, Boolean optionsStrategiesRankingStrategyIgnoreTime, Boolean optionsStrategiesRankingStrategyIgnoreScore, Integer optionsStrategiesScoringStrategyLimitUpdatesTo, Double optionsStrategiesScoringStrategySumBestXOf, Long optionsStrategiesScoringStrategyLastUpdateTimeStamp, Long optionsStrategiesScoringStrategyRecordTimeWhenSumReaches, String optionsStrategiesStrategyType, OffsetDateTime created) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = getContestsRequestBuilder(X_API_KEY, spaceName, id, limit, skip, sortByFields, include, lang, equal, equalEqual, lessThanEqual, lessThanEqualEqual, equalGreaterThan, equalEqualGreaterThan, uomKey, competitionId, number, round, optionsNumberOfEntrantsMaximum, optionsNumberOfEntrantsMinimum, optionsIsPublic, optionsAutoStart, optionsAutoStop, optionsActualDatesEnd, optionsScheduledDatesStart, optionsScheduledDatesEnd, optionsActualDatesStart, optionsStrategiesRankingStrategyScoreDesc, optionsStrategiesRankingStrategyTimeDesc, optionsStrategiesRankingStrategyScoreFirst, optionsStrategiesRankingStrategyIgnoreTime, optionsStrategiesRankingStrategyIgnoreScore, optionsStrategiesScoringStrategyLimitUpdatesTo, optionsStrategiesScoringStrategySumBestXOf, optionsStrategiesScoringStrategyLastUpdateTimeStamp, optionsStrategiesScoringStrategyRecordTimeWhenSumReaches, optionsStrategiesStrategyType, created);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("getContests", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ContestResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ContestResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder getContestsRequestBuilder(String X_API_KEY, String spaceName, List<String> id, Integer limit, Integer skip, String sortByFields, String include, String lang, String equal, String equalEqual, String lessThanEqual, String lessThanEqualEqual, String equalGreaterThan, String equalEqualGreaterThan, String uomKey, List<String> competitionId, Integer number, Integer round, Integer optionsNumberOfEntrantsMaximum, Integer optionsNumberOfEntrantsMinimum, Boolean optionsIsPublic, Boolean optionsAutoStart, Boolean optionsAutoStop, String optionsActualDatesEnd, String optionsScheduledDatesStart, String optionsScheduledDatesEnd, String optionsActualDatesStart, Boolean optionsStrategiesRankingStrategyScoreDesc, Boolean optionsStrategiesRankingStrategyTimeDesc, Boolean optionsStrategiesRankingStrategyScoreFirst, Boolean optionsStrategiesRankingStrategyIgnoreTime, Boolean optionsStrategiesRankingStrategyIgnoreScore, Integer optionsStrategiesScoringStrategyLimitUpdatesTo, Double optionsStrategiesScoringStrategySumBestXOf, Long optionsStrategiesScoringStrategyLastUpdateTimeStamp, Long optionsStrategiesScoringStrategyRecordTimeWhenSumReaches, String optionsStrategiesStrategyType, OffsetDateTime created) throws ApiException {
    // verify the required parameter 'X_API_KEY' is set
    if (X_API_KEY == null) {
      throw new ApiException(400, "Missing the required parameter 'X_API_KEY' when calling getContests");
    }
    // verify the required parameter 'spaceName' is set
    if (spaceName == null) {
      throw new ApiException(400, "Missing the required parameter 'spaceName' when calling getContests");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/{spaceName}/contests"
        .replace("{spaceName}", ApiClient.urlEncode(spaceName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "id", id));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_skip", skip));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_sortByFields", sortByFields));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_include", include));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_lang", lang));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("&#x3D;", equal));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("&#x3D;&#x3D;", equalEqual));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("&lt;&#x3D;", lessThanEqual));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("&lt;&#x3D;&#x3D;", lessThanEqualEqual));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("&#x3D;&gt;", equalGreaterThan));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("&#x3D;&#x3D;&gt;", equalEqualGreaterThan));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_uomKey", uomKey));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "competitionId", competitionId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("number", number));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("round", round));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.numberOfEntrants.maximum", optionsNumberOfEntrantsMaximum));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.numberOfEntrants.minimum", optionsNumberOfEntrantsMinimum));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.isPublic", optionsIsPublic));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.autoStart", optionsAutoStart));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.autoStop", optionsAutoStop));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.actualDates.end", optionsActualDatesEnd));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.scheduledDates.start", optionsScheduledDatesStart));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.scheduledDates.end", optionsScheduledDatesEnd));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.actualDates.start", optionsActualDatesStart));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.strategies.rankingStrategy.scoreDesc", optionsStrategiesRankingStrategyScoreDesc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.strategies.rankingStrategy.timeDesc", optionsStrategiesRankingStrategyTimeDesc));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.strategies.rankingStrategy.scoreFirst", optionsStrategiesRankingStrategyScoreFirst));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.strategies.rankingStrategy.ignoreTime", optionsStrategiesRankingStrategyIgnoreTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.strategies.rankingStrategy.ignoreScore", optionsStrategiesRankingStrategyIgnoreScore));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.strategies.scoringStrategy.limitUpdatesTo", optionsStrategiesScoringStrategyLimitUpdatesTo));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.strategies.scoringStrategy.sumBestXOf", optionsStrategiesScoringStrategySumBestXOf));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.strategies.scoringStrategy.lastUpdateTimeStamp", optionsStrategiesScoringStrategyLastUpdateTimeStamp));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.strategies.scoringStrategy.recordTimeWhenSumReaches", optionsStrategiesScoringStrategyRecordTimeWhenSumReaches));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("options.strategies.strategyType", optionsStrategiesStrategyType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("created", created));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    if (X_API_KEY != null) {
      localVarRequestBuilder.header("X-API-KEY", X_API_KEY.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns the leaderboard for a by contest id
   * Leaderboards, also referred to as score board, give you aggregates of rank and points by member.  Leaderboards are calculated on a near real-time basis. The rate data is received by CompetitionLabs is directly proportional to the update of member positions on the leaderboard.  GET responses can be queried based on generic query parameters (_limit, memberId) to filter results appropriately.
   * @param X_API_KEY Your unique API key (required)
   * @param spaceName This is the space name which is linked to the account (required)
   * @param id Unique identifier of the resource (required)
   * @param memberId Member identifier. Can be a Member reference ID or a Ziqni Member ID  &#x60;The response will show the members with a limit of how much you have inserted and it will include the member that you are searching in the leaderboard&#x60;  &#x60;example - GET https://gateway.ziqni.com/api/v1/test_space/contests/TAHz-2wB9hDCDt3Z_ArD/leaderboard?_limit&#x3D;100&amp;memberId&#x3D;tester-0sn4DmUBkPH_lz9GgxBM&#x60;  &#x60;means that 101 members are shown in the list and the member with the id is included in the list as the last member&#x60; &#x60;?memberId&#x3D;search_word&#x60; (required)
   * @param limit Used for pagination. Setting the limit value will cause the system to limit the number of records returned to the specified number. (optional)
   * @return CompletableFuture&lt;LeaderboardResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<LeaderboardResponse> getLeaderboardByContestId(String X_API_KEY, String spaceName, String id, String memberId, Integer limit) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = getLeaderboardByContestIdRequestBuilder(X_API_KEY, spaceName, id, memberId, limit);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("getLeaderboardByContestId", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LeaderboardResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns the leaderboard for a by contest id
   * Leaderboards, also referred to as score board, give you aggregates of rank and points by member.  Leaderboards are calculated on a near real-time basis. The rate data is received by CompetitionLabs is directly proportional to the update of member positions on the leaderboard.  GET responses can be queried based on generic query parameters (_limit, memberId) to filter results appropriately.
   * @param X_API_KEY Your unique API key (required)
   * @param spaceName This is the space name which is linked to the account (required)
   * @param id Unique identifier of the resource (required)
   * @param memberId Member identifier. Can be a Member reference ID or a Ziqni Member ID  &#x60;The response will show the members with a limit of how much you have inserted and it will include the member that you are searching in the leaderboard&#x60;  &#x60;example - GET https://gateway.ziqni.com/api/v1/test_space/contests/TAHz-2wB9hDCDt3Z_ArD/leaderboard?_limit&#x3D;100&amp;memberId&#x3D;tester-0sn4DmUBkPH_lz9GgxBM&#x60;  &#x60;means that 101 members are shown in the list and the member with the id is included in the list as the last member&#x60; &#x60;?memberId&#x3D;search_word&#x60; (required)
   * @param limit Used for pagination. Setting the limit value will cause the system to limit the number of records returned to the specified number. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;LeaderboardResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<LeaderboardResponse>> getLeaderboardByContestIdWithHttpInfo(String X_API_KEY, String spaceName, String id, String memberId, Integer limit) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = getLeaderboardByContestIdRequestBuilder(X_API_KEY, spaceName, id, memberId, limit);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("getLeaderboardByContestId", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<LeaderboardResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LeaderboardResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder getLeaderboardByContestIdRequestBuilder(String X_API_KEY, String spaceName, String id, String memberId, Integer limit) throws ApiException {
    // verify the required parameter 'X_API_KEY' is set
    if (X_API_KEY == null) {
      throw new ApiException(400, "Missing the required parameter 'X_API_KEY' when calling getLeaderboardByContestId");
    }
    // verify the required parameter 'spaceName' is set
    if (spaceName == null) {
      throw new ApiException(400, "Missing the required parameter 'spaceName' when calling getLeaderboardByContestId");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getLeaderboardByContestId");
    }
    // verify the required parameter 'memberId' is set
    if (memberId == null) {
      throw new ApiException(400, "Missing the required parameter 'memberId' when calling getLeaderboardByContestId");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/{spaceName}/contests/{id}/leaderboard"
        .replace("{spaceName}", ApiClient.urlEncode(spaceName.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("memberId", memberId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    if (X_API_KEY != null) {
      localVarRequestBuilder.header("X-API-KEY", X_API_KEY.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
